/****************************************************************************
*   Generated by ACUITY 6.12.4
*   Match ovxlib 1.1.53
*
*   Neural Network appliction network definition source file
****************************************************************************/
/*-------------------------------------------
                   Includes
 -------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>

#include "vsi_nn_pub.h"

#include "vnn_global.h"
#include "vnn_yolov3tinyuint8.h"

/*-------------------------------------------
                   Macros
 -------------------------------------------*/

#define NEW_VXNODE(_node, _type, _in, _out, _uid) do {\
        _node = vsi_nn_AddNode( graph, _type, _in, _out, NULL );\
        if( NULL == _node ) {\
            goto error;\
        }\
        _node->uid = (uint32_t)_uid;\
    } while(0)

#define NEW_VIRTUAL_TENSOR(_id, _attr, _dtype) do {\
        memset( _attr.size, 0, VSI_NN_MAX_DIM_NUM * sizeof(vsi_size_t));\
        _attr.dim_num = VSI_NN_DIM_AUTO;\
        _attr.vtl = !VNN_APP_DEBUG;\
        _attr.is_const = FALSE;\
        _attr.dtype.vx_type = _dtype;\
        _id = vsi_nn_AddTensor( graph, VSI_NN_TENSOR_ID_AUTO,\
                & _attr, NULL );\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)

// Set const tensor dims out of this macro.
#define NEW_CONST_TENSOR(_id, _attr, _dtype, _ofst, _size) do {\
        data = load_data( fp, _ofst, _size  );\
        _attr.vtl = FALSE;\
        _attr.is_const = TRUE;\
        _attr.dtype.vx_type = _dtype;\
        _id = vsi_nn_AddTensor( graph, VSI_NN_TENSOR_ID_AUTO,\
                & _attr, data );\
        free( data );\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)

// Set generic tensor dims out of this macro.
#define NEW_NORM_TENSOR(_id, _attr, _dtype) do {\
        _attr.vtl = FALSE;\
        _attr.is_const = FALSE;\
        _attr.dtype.vx_type = _dtype;\
        if ( enable_from_handle )\
        {\
            _id = vsi_nn_AddTensorFromHandle( graph, VSI_NN_TENSOR_ID_AUTO,\
                    & _attr, NULL );\
        }\
        else\
        {\
            _id = vsi_nn_AddTensor( graph, VSI_NN_TENSOR_ID_AUTO,\
                    & _attr, NULL );\
        }\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)

// Set generic tensor dims out of this macro.
#define NEW_NORM_TENSOR_FROM_HANDLE(_id, _attr, _dtype) do {\
        _attr.vtl = FALSE;\
        _attr.is_const = FALSE;\
        _attr.dtype.vx_type = _dtype;\
        _id = vsi_nn_AddTensorFromHandle( graph, VSI_NN_TENSOR_ID_AUTO,\
                & _attr, NULL );\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)

#ifdef HANDLE_OUT_TENSOR
#define NEW_HANDLE_TENSOR(_id, _attr, _dtype, data) do {\
        _attr.vtl = FALSE;\
        _attr.is_const = FALSE;\
        _attr.dtype.vx_type = _dtype;\
        _id = vsi_nn_AddTensorFromHandle( graph, VSI_NN_TENSOR_ID_AUTO,\
                & _attr, data );\
        if( VSI_NN_TENSOR_ID_NA == _id ) {\
            goto error;\
        }\
    } while(0)
#endif


/*-------------------------------------------
               Local Variables
 -------------------------------------------*/

/*-------------------------------------------
                  Functions
 -------------------------------------------*/
static uint8_t* load_data
    (
    FILE  * fp,
    size_t  ofst,
    size_t  sz
    )
{
    uint8_t* data;
    int32_t ret;
    data = NULL;
    if( NULL == fp )
    {
        return NULL;
    }

    ret = VSI_FSEEK(fp, ofst, SEEK_SET);
    if (ret != 0)
    {
        VSILOGE("blob seek failure.");
        return NULL;
    }

    data = (uint8_t*)malloc(sz);
    if (data == NULL)
    {
        VSILOGE("buffer malloc failure.");
        return NULL;
    }
    ret = fread(data, 1, sz, fp);
    return data;
} /* load_data() */

#define NB_NET_NODE_NUM            (1)
#define NB_NET_NORM_TENSOR_NUM     (5)
#define NB_NET_CONST_TENSOR_NUM    (0)
#define NB_NET_VIRTUAL_TENSOR_NUM  (3)
#define NB_NET_TOTAL_TENSOR_NUM    (NB_NET_NORM_TENSOR_NUM + NB_NET_CONST_TENSOR_NUM + NB_NET_VIRTUAL_TENSOR_NUM)
vsi_nn_graph_t * vnn_CreateYolov3TinyUint8_NB
        (
                const char * data_file_name,
                vsi_nn_context_t in_ctx,
                const vsi_nn_preprocess_map_element_t * pre_process_map,
                uint32_t pre_process_map_count,
                const vsi_nn_postprocess_map_element_t * post_process_map,
                uint32_t post_process_map_count,
                uint8_t * output_data_1,
                uint8_t * output_data_2,
                uint8_t * output_data_3,
                uint32_t image_width,
                uint32_t image_height
        )
{
    uint32_t                _infinity = VSI_NN_FLOAT32_INF;
    vsi_status              status;
    vsi_bool                release_ctx;
    vsi_nn_context_t        ctx;
    vsi_nn_graph_t *        graph;
    vsi_nn_node_t *         node[NB_NET_NODE_NUM];
    vsi_nn_tensor_id_t      norm_tensor[NB_NET_NORM_TENSOR_NUM];

    vsi_nn_tensor_attr_t    attr;
    FILE *                  fp;
    uint8_t *               data;
    uint32_t                i = 0;
    char *                  use_img_process_s;
    char *                  use_from_handle = NULL;
    int32_t                 enable_pre_post_process = 0;
    int32_t                 enable_from_handle = 0;
    vsi_bool                sort = FALSE;
    vsi_bool                inference_with_nbg = FALSE;
    char*                   pos = NULL;





    (void)(_infinity);
    ctx = NULL;
    graph = NULL;
    status = VSI_FAILURE;
    memset( &attr, 0, sizeof( attr ) );
    memset( &node, 0, sizeof( vsi_nn_node_t * ) * NB_NET_NODE_NUM );

    fp = fopen( data_file_name, "rb" );
    if( NULL == fp )
    {
        VSILOGE( "Open file %s failed.", data_file_name );
        goto error;
    }

    pos = strstr(data_file_name, ".nb");
    if( pos && strcmp(pos, ".nb") == 0 )
    {
        inference_with_nbg = TRUE;
    }

    if( NULL == in_ctx )
    {
        ctx = vsi_nn_CreateContext();
    }
    else
    {
        ctx = in_ctx;
    }

    use_img_process_s = getenv( "VSI_USE_IMAGE_PROCESS" );
    if( use_img_process_s )
    {
        enable_pre_post_process = atoi(use_img_process_s);
    }
    use_from_handle = getenv( "VSI_USE_FROM_HANDLE" );
    if ( use_from_handle )
    {
        enable_from_handle = atoi(use_from_handle);
    }

    graph = vsi_nn_CreateGraph( ctx, NB_NET_TOTAL_TENSOR_NUM, NB_NET_NODE_NUM );
    if( NULL == graph )
    {
        VSILOGE( "Create graph fail." );
        goto error;
    }
    vsi_nn_SetGraphVersion( graph, VNN_VERSION_MAJOR, VNN_VERSION_MINOR, VNN_VERSION_PATCH );
    vsi_nn_SetGraphInputs( graph, NULL, 2 );
    vsi_nn_SetGraphOutputs( graph, NULL, 3 );

/*-----------------------------------------
  Register client ops
 -----------------------------------------*/


/*-----------------------------------------
  Node definitions
 -----------------------------------------*/
    if( !inference_with_nbg )
    {

        /*-----------------------------------------
          lid       - nbg_0
          var       - node[0]
          name      - nbg
          operation - nbg
          input     - [1280, 720, 1, 1]
                      [1280, 360, 1, 1]
          output    - [20, 20, 18, 1]
                      [40, 40, 18, 1]
                      [80, 80, 18, 1]
        -----------------------------------------*/
        NEW_VXNODE(node[0], VSI_NN_OP_NBG, 2, 3, 0);
        node[0]->nn_param.nbg.type = VSI_NN_NBG_FILE;
        node[0]->nn_param.nbg.url = data_file_name;

    }
    else
    {
        NEW_VXNODE(node[0], VSI_NN_OP_NBG, 2, 3, 0);
        node[0]->nn_param.nbg.type = VSI_NN_NBG_FILE;
        node[0]->nn_param.nbg.url = data_file_name;

    }

/*-----------------------------------------
  Tensor initialize
 -----------------------------------------*/
    attr.dtype.fmt = VSI_NN_DIM_FMT_NCHW;
    /* @images_328_0:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1280;
    attr.size[1] = 720;
    attr.size[2] = 1;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_NONE;
    NEW_NORM_TENSOR(norm_tensor[0], attr, VSI_NN_TYPE_UINT8);

    /* @attach_Conv_/yolo_head_P5/Conv/out0_0:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 20;
    attr.size[1] = 20;
    attr.size[2] = 18;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.07358036190271378;
    attr.dtype.zero_point = 164;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
#ifdef HANDLE_OUT_TENSOR
    NEW_HANDLE_TENSOR(norm_tensor[1], attr, VSI_NN_TYPE_UINT8, output_data_1);
#else
    NEW_NORM_TENSOR(norm_tensor[1], attr, VSI_NN_TYPE_UINT8);
#endif

    /* @images_328_1:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1280;
    attr.size[1] = 360;
    attr.size[2] = 1;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_NONE;
    NEW_NORM_TENSOR(norm_tensor[2], attr, VSI_NN_TYPE_UINT8);

    /* @attach_Conv_/yolo_head_P4/Conv/out0_1:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 40;
    attr.size[1] = 40;
    attr.size[2] = 18;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.07308664917945862;
    attr.dtype.zero_point = 166;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
#ifdef HANDLE_OUT_TENSOR
    NEW_HANDLE_TENSOR(norm_tensor[3], attr, VSI_NN_TYPE_UINT8, output_data_2);
#else
    NEW_NORM_TENSOR(norm_tensor[3], attr, VSI_NN_TYPE_UINT8);
#endif

    /* @attach_Conv_/yolo_head_P3/Conv/out0_2:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 80;
    attr.size[1] = 80;
    attr.size[2] = 18;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.08372680842876434;
    attr.dtype.zero_point = 164;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
#ifdef HANDLE_OUT_TENSOR
    NEW_HANDLE_TENSOR(norm_tensor[4], attr, VSI_NN_TYPE_UINT8, output_data_3);
    #else
    NEW_NORM_TENSOR(norm_tensor[4], attr, VSI_NN_TYPE_UINT8);
#endif



    if( !inference_with_nbg )
    {




/*-----------------------------------------
  Connection initialize
 -----------------------------------------*/
        node[0]->input.tensors[0] = norm_tensor[0];
        node[0]->input.tensors[1] = norm_tensor[2];
        node[0]->output.tensors[0] = norm_tensor[1];
        node[0]->output.tensors[1] = norm_tensor[3];
        node[0]->output.tensors[2] = norm_tensor[4];

        /* nbg_0 */


    }
    else
    {
        node[0]->input.tensors[0] = norm_tensor[0];
        node[0]->input.tensors[1] = norm_tensor[2];
        node[0]->output.tensors[0] = norm_tensor[1];
        node[0]->output.tensors[1] = norm_tensor[3];
        node[0]->output.tensors[2] = norm_tensor[4];

        /* nbg_0 */


    }
    graph->input.tensors[0] = norm_tensor[0];
    graph->input.tensors[1] = norm_tensor[2];
    graph->output.tensors[0] = norm_tensor[1];
    graph->output.tensors[1] = norm_tensor[3];
    graph->output.tensors[2] = norm_tensor[4];


    if( enable_pre_post_process )
    {
        sort = TRUE;
        if( pre_process_map_count > 0 )
        {
            for( i = 0; i < pre_process_map_count; i++ )
            {
                status = vsi_nn_AddGraphPreProcess(graph, pre_process_map[i].graph_input_idx,
                                                   pre_process_map[i].preprocesses,
                                                   pre_process_map[i].preprocess_count);
                TEST_CHECK_STATUS( status, error );
            }
        }

        if( post_process_map_count > 0 )
        {
            for( i = 0; i < post_process_map_count; i++ )
            {
                status = vsi_nn_AddGraphPostProcess(graph, post_process_map[i].graph_output_idx,
                                                    post_process_map[i].postprocesses,
                                                    post_process_map[i].postprocess_count);
                TEST_CHECK_STATUS( status, error );
            }
        }
    }

    status = vsi_nn_SetupGraph( graph, sort );
    TEST_CHECK_STATUS( status, error );


    if( VSI_FAILURE == status )
    {
        goto error;
    }

    fclose( fp );

    return graph;

    error:
    if( NULL != fp )
    {
        fclose( fp );
    }

    release_ctx = ( NULL == in_ctx );
    vsi_nn_DumpGraphToJson( graph );
    vnn_ReleaseYolov3TinyUint8( graph, release_ctx );

    return NULL;
} /* vsi_nn_CreateYolov3TinyUint8()_NB */


#define DATA_NET_NODE_NUM            (233)
#define DATA_NET_NORM_TENSOR_NUM     (4)
#define DATA_NET_CONST_TENSOR_NUM    (196)
#define DATA_NET_VIRTUAL_TENSOR_NUM  (234)
#define DATA_NET_TOTAL_TENSOR_NUM    (DATA_NET_NORM_TENSOR_NUM + DATA_NET_CONST_TENSOR_NUM + DATA_NET_VIRTUAL_TENSOR_NUM)
vsi_nn_graph_t * vnn_CreateYolov3TinyUint8_data
        (
                const char * data_file_name,
                vsi_nn_context_t in_ctx,
                const vsi_nn_preprocess_map_element_t * pre_process_map,
                uint32_t pre_process_map_count,
                const vsi_nn_postprocess_map_element_t * post_process_map,
                uint32_t post_process_map_count,
                uint8_t * output_data_1,
                uint8_t * output_data_2,
                uint8_t * output_data_3
        )
{
    uint32_t                _infinity = VSI_NN_FLOAT32_INF;
    vsi_status              status;
    vsi_bool                release_ctx;
    vsi_nn_context_t        ctx;
    vsi_nn_graph_t *        graph;
    vsi_nn_node_t *         node[DATA_NET_NODE_NUM];
    vsi_nn_tensor_id_t      norm_tensor[DATA_NET_NORM_TENSOR_NUM];
    vsi_nn_tensor_id_t      const_tensor[DATA_NET_CONST_TENSOR_NUM];
    vsi_nn_tensor_attr_t    attr;
    FILE *                  fp;
    uint8_t *               data;
    uint32_t                i = 0;
    char *                  use_img_process_s;
    char *                  use_from_handle = NULL;
    int32_t                 enable_pre_post_process = 0;
    int32_t                 enable_from_handle = 0;
    vsi_bool                sort = FALSE;
    vsi_bool                inference_with_nbg = FALSE;
    char*                   pos = NULL;

    uint32_t   perm_1[] = { 1, 0, 2, 3 };
    uint32_t   perm_2[] = { 1, 0, 2, 3 };
    vsi_size_t shape_1[] = { 512, 1 };
    vsi_size_t shape_2[] = { 1, 1, 512, 1 };
    uint32_t   slices_1[] = { 20, 20 };




    (void)(_infinity);
    ctx = NULL;
    graph = NULL;
    status = VSI_FAILURE;
    memset( &attr, 0, sizeof( attr ) );
    memset( &node, 0, sizeof( vsi_nn_node_t * ) * DATA_NET_NODE_NUM );

    fp = fopen( data_file_name, "rb" );
    if( NULL == fp )
    {
        VSILOGE( "Open file %s failed.", data_file_name );
        goto error;
    }

    pos = strstr(data_file_name, ".nb");
    if( pos && strcmp(pos, ".nb") == 0 )
    {
        inference_with_nbg = TRUE;
    }

    if( NULL == in_ctx )
    {
        ctx = vsi_nn_CreateContext();
    }
    else
    {
        ctx = in_ctx;
    }

    use_img_process_s = getenv( "VSI_USE_IMAGE_PROCESS" );
    if( use_img_process_s )
    {
        enable_pre_post_process = atoi(use_img_process_s);
    }
    use_from_handle = getenv( "VSI_USE_FROM_HANDLE" );
    if ( use_from_handle )
    {
        enable_from_handle = atoi(use_from_handle);
    }

    graph = vsi_nn_CreateGraph( ctx, DATA_NET_TOTAL_TENSOR_NUM, DATA_NET_NODE_NUM );
    if( NULL == graph )
    {
        VSILOGE( "Create graph fail." );
        goto error;
    }
    vsi_nn_SetGraphVersion( graph, VNN_VERSION_MAJOR, VNN_VERSION_MINOR, VNN_VERSION_PATCH );
    if ( enable_pre_post_process )
    {
        vsi_nn_SetGraphInputs( graph, NULL, 2 );
    }
    else
    {
        vsi_nn_SetGraphInputs( graph, NULL, 1 );
    }
    vsi_nn_SetGraphOutputs( graph, NULL, 3 );

/*-----------------------------------------
  Register client ops
 -----------------------------------------*/


/*-----------------------------------------
  Node definitions
 -----------------------------------------*/
    if( !inference_with_nbg )
    {

    /*-----------------------------------------
      lid       - Conv_/stem/stem.0/conv/Conv_326
      var       - node[0]
      name      - Conv_/stem/stem.0/conv/Conv
      operation - convolution
      input     - [640, 640, 3, 1]
      filter    - [3, 3, 3, 32]
      output    - [640, 640, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[0], VSI_NN_OP_CONV2D, 3, 1, 326);
    node[0]->nn_param.conv2d.ksize[0] = 3;
    node[0]->nn_param.conv2d.ksize[1] = 3;
    node[0]->nn_param.conv2d.weights = 32;
    node[0]->nn_param.conv2d.stride[0] = 1;
    node[0]->nn_param.conv2d.stride[1] = 1;
    node[0]->nn_param.conv2d.pad[0] = 1;
    node[0]->nn_param.conv2d.pad[1] = 1;
    node[0]->nn_param.conv2d.pad[2] = 1;
    node[0]->nn_param.conv2d.pad[3] = 1;
    node[0]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[0]->nn_param.conv2d.group = 1;
    node[0]->nn_param.conv2d.dilation[0] = 1;
    node[0]->nn_param.conv2d.dilation[1] = 1;
    node[0]->nn_param.conv2d.multiplier = 0;
    node[0]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[0]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[0]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/stem/stem.0/act/Sigmoid_327_Mul_/stem/stem.0/act/Mul_325
      var       - node[1]
      name      - swish
      operation - swish
      input     - [640, 640, 32, 1]
      output    - [640, 640, 32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[1], VSI_NN_OP_SWISH, 1, 1, 325);
    node[1]->nn_param.swish.type = VSI_NN_SWISH;
    node[1]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/stem/stem.1/conv/Conv_324
      var       - node[2]
      name      - Conv_/stem/stem.1/conv/Conv
      operation - convolution
      input     - [640, 640, 32, 1]
      filter    - [3, 3, 32, 64]
      output    - [320, 320, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[2], VSI_NN_OP_CONV2D, 3, 1, 324);
    node[2]->nn_param.conv2d.ksize[0] = 3;
    node[2]->nn_param.conv2d.ksize[1] = 3;
    node[2]->nn_param.conv2d.weights = 64;
    node[2]->nn_param.conv2d.stride[0] = 2;
    node[2]->nn_param.conv2d.stride[1] = 2;
    node[2]->nn_param.conv2d.pad[0] = 1;
    node[2]->nn_param.conv2d.pad[1] = 1;
    node[2]->nn_param.conv2d.pad[2] = 1;
    node[2]->nn_param.conv2d.pad[3] = 1;
    node[2]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[2]->nn_param.conv2d.group = 1;
    node[2]->nn_param.conv2d.dilation[0] = 1;
    node[2]->nn_param.conv2d.dilation[1] = 1;
    node[2]->nn_param.conv2d.multiplier = 0;
    node[2]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[2]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[2]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/stem/stem.1/act/Sigmoid_323_Mul_/stem/stem.1/act/Mul_322
      var       - node[3]
      name      - swish
      operation - swish
      input     - [320, 320, 64, 1]
      output    - [320, 320, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[3], VSI_NN_OP_SWISH, 1, 1, 322);
    node[3]->nn_param.swish.type = VSI_NN_SWISH;
    node[3]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/stem/stem.2/conv/Conv_319
      var       - node[4]
      name      - Conv_/stem/stem.2/conv/Conv
      operation - convolution
      input     - [320, 320, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [320, 320, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[4], VSI_NN_OP_CONV2D, 3, 1, 319);
    node[4]->nn_param.conv2d.ksize[0] = 3;
    node[4]->nn_param.conv2d.ksize[1] = 3;
    node[4]->nn_param.conv2d.weights = 64;
    node[4]->nn_param.conv2d.stride[0] = 1;
    node[4]->nn_param.conv2d.stride[1] = 1;
    node[4]->nn_param.conv2d.pad[0] = 1;
    node[4]->nn_param.conv2d.pad[1] = 1;
    node[4]->nn_param.conv2d.pad[2] = 1;
    node[4]->nn_param.conv2d.pad[3] = 1;
    node[4]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[4]->nn_param.conv2d.group = 1;
    node[4]->nn_param.conv2d.dilation[0] = 1;
    node[4]->nn_param.conv2d.dilation[1] = 1;
    node[4]->nn_param.conv2d.multiplier = 0;
    node[4]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[4]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[4]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/stem/stem.2/act/Sigmoid_320_Mul_/stem/stem.2/act/Mul_314
      var       - node[5]
      name      - swish
      operation - swish
      input     - [320, 320, 64, 1]
      output    - [320, 320, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[5], VSI_NN_OP_SWISH, 1, 1, 314);
    node[5]->nn_param.swish.type = VSI_NN_SWISH;
    node[5]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark2/dark2.0/conv/Conv_306
      var       - node[6]
      name      - Conv_/dark2/dark2.0/conv/Conv
      operation - convolution
      input     - [320, 320, 64, 1]
      filter    - [3, 3, 64, 128]
      output    - [160, 160, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[6], VSI_NN_OP_CONV2D, 3, 1, 306);
    node[6]->nn_param.conv2d.ksize[0] = 3;
    node[6]->nn_param.conv2d.ksize[1] = 3;
    node[6]->nn_param.conv2d.weights = 128;
    node[6]->nn_param.conv2d.stride[0] = 2;
    node[6]->nn_param.conv2d.stride[1] = 2;
    node[6]->nn_param.conv2d.pad[0] = 1;
    node[6]->nn_param.conv2d.pad[1] = 1;
    node[6]->nn_param.conv2d.pad[2] = 1;
    node[6]->nn_param.conv2d.pad[3] = 1;
    node[6]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[6]->nn_param.conv2d.group = 1;
    node[6]->nn_param.conv2d.dilation[0] = 1;
    node[6]->nn_param.conv2d.dilation[1] = 1;
    node[6]->nn_param.conv2d.multiplier = 0;
    node[6]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[6]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[6]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark2/dark2.0/act/Sigmoid_305_Mul_/dark2/dark2.0/act/Mul_304
      var       - node[7]
      name      - swish
      operation - swish
      input     - [160, 160, 128, 1]
      output    - [160, 160, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[7], VSI_NN_OP_SWISH, 1, 1, 304);
    node[7]->nn_param.swish.type = VSI_NN_SWISH;
    node[7]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark2/dark2.1/cv1/conv/Conv_302
      var       - node[8]
      name      - Conv_/dark2/dark2.1/cv1/conv/Conv
      operation - convolution
      input     - [160, 160, 128, 1]
      filter    - [1, 1, 128, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[8], VSI_NN_OP_CONV2D, 3, 1, 302);
    node[8]->nn_param.conv2d.ksize[0] = 1;
    node[8]->nn_param.conv2d.ksize[1] = 1;
    node[8]->nn_param.conv2d.weights = 64;
    node[8]->nn_param.conv2d.stride[0] = 1;
    node[8]->nn_param.conv2d.stride[1] = 1;
    node[8]->nn_param.conv2d.pad[0] = 0;
    node[8]->nn_param.conv2d.pad[1] = 0;
    node[8]->nn_param.conv2d.pad[2] = 0;
    node[8]->nn_param.conv2d.pad[3] = 0;
    node[8]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[8]->nn_param.conv2d.group = 1;
    node[8]->nn_param.conv2d.dilation[0] = 1;
    node[8]->nn_param.conv2d.dilation[1] = 1;
    node[8]->nn_param.conv2d.multiplier = 0;
    node[8]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[8]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[8]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/dark2/dark2.1/cv2/conv/Conv_311
      var       - node[9]
      name      - Conv_/dark2/dark2.1/cv2/conv/Conv
      operation - convolution
      input     - [160, 160, 128, 1]
      filter    - [1, 1, 128, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[9], VSI_NN_OP_CONV2D, 3, 1, 311);
    node[9]->nn_param.conv2d.ksize[0] = 1;
    node[9]->nn_param.conv2d.ksize[1] = 1;
    node[9]->nn_param.conv2d.weights = 64;
    node[9]->nn_param.conv2d.stride[0] = 1;
    node[9]->nn_param.conv2d.stride[1] = 1;
    node[9]->nn_param.conv2d.pad[0] = 0;
    node[9]->nn_param.conv2d.pad[1] = 0;
    node[9]->nn_param.conv2d.pad[2] = 0;
    node[9]->nn_param.conv2d.pad[3] = 0;
    node[9]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[9]->nn_param.conv2d.group = 1;
    node[9]->nn_param.conv2d.dilation[0] = 1;
    node[9]->nn_param.conv2d.dilation[1] = 1;
    node[9]->nn_param.conv2d.multiplier = 0;
    node[9]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[9]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[9]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark2/dark2.1/cv1/act/Sigmoid_303_Mul_/dark2/dark2.1/cv1/act/Mul_294
      var       - node[10]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[10], VSI_NN_OP_SWISH, 1, 1, 294);
    node[10]->nn_param.swish.type = VSI_NN_SWISH;
    node[10]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/dark2/dark2.1/cv2/act/Sigmoid_312_Mul_/dark2/dark2.1/cv2/act/Mul_301
      var       - node[11]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[11], VSI_NN_OP_SWISH, 1, 1, 301);
    node[11]->nn_param.swish.type = VSI_NN_SWISH;
    node[11]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark2/dark2.1/cv3.0/conv/Conv_317
      var       - node[12]
      name      - Conv_/dark2/dark2.1/cv3.0/conv/Conv
      operation - convolution
      input     - [160, 160, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[12], VSI_NN_OP_CONV2D, 3, 1, 317);
    node[12]->nn_param.conv2d.ksize[0] = 3;
    node[12]->nn_param.conv2d.ksize[1] = 3;
    node[12]->nn_param.conv2d.weights = 64;
    node[12]->nn_param.conv2d.stride[0] = 1;
    node[12]->nn_param.conv2d.stride[1] = 1;
    node[12]->nn_param.conv2d.pad[0] = 1;
    node[12]->nn_param.conv2d.pad[1] = 1;
    node[12]->nn_param.conv2d.pad[2] = 1;
    node[12]->nn_param.conv2d.pad[3] = 1;
    node[12]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[12]->nn_param.conv2d.group = 1;
    node[12]->nn_param.conv2d.dilation[0] = 1;
    node[12]->nn_param.conv2d.dilation[1] = 1;
    node[12]->nn_param.conv2d.multiplier = 0;
    node[12]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[12]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[12]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark2/dark2.1/cv3.0/act/Sigmoid_318_Mul_/dark2/dark2.1/cv3.0/act/Mul_313
      var       - node[13]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[13], VSI_NN_OP_SWISH, 1, 1, 313);
    node[13]->nn_param.swish.type = VSI_NN_SWISH;
    node[13]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark2/dark2.1/cv3.1/conv/Conv_309
      var       - node[14]
      name      - Conv_/dark2/dark2.1/cv3.1/conv/Conv
      operation - convolution
      input     - [160, 160, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[14], VSI_NN_OP_CONV2D, 3, 1, 309);
    node[14]->nn_param.conv2d.ksize[0] = 3;
    node[14]->nn_param.conv2d.ksize[1] = 3;
    node[14]->nn_param.conv2d.weights = 64;
    node[14]->nn_param.conv2d.stride[0] = 1;
    node[14]->nn_param.conv2d.stride[1] = 1;
    node[14]->nn_param.conv2d.pad[0] = 1;
    node[14]->nn_param.conv2d.pad[1] = 1;
    node[14]->nn_param.conv2d.pad[2] = 1;
    node[14]->nn_param.conv2d.pad[3] = 1;
    node[14]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[14]->nn_param.conv2d.group = 1;
    node[14]->nn_param.conv2d.dilation[0] = 1;
    node[14]->nn_param.conv2d.dilation[1] = 1;
    node[14]->nn_param.conv2d.multiplier = 0;
    node[14]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[14]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[14]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark2/dark2.1/cv3.1/act/Sigmoid_310_Mul_/dark2/dark2.1/cv3.1/act/Mul_300
      var       - node[15]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[15], VSI_NN_OP_SWISH, 1, 1, 300);
    node[15]->nn_param.swish.type = VSI_NN_SWISH;
    node[15]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark2/dark2.1/cv3.2/conv/Conv_321
      var       - node[16]
      name      - Conv_/dark2/dark2.1/cv3.2/conv/Conv
      operation - convolution
      input     - [160, 160, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[16], VSI_NN_OP_CONV2D, 3, 1, 321);
    node[16]->nn_param.conv2d.ksize[0] = 3;
    node[16]->nn_param.conv2d.ksize[1] = 3;
    node[16]->nn_param.conv2d.weights = 64;
    node[16]->nn_param.conv2d.stride[0] = 1;
    node[16]->nn_param.conv2d.stride[1] = 1;
    node[16]->nn_param.conv2d.pad[0] = 1;
    node[16]->nn_param.conv2d.pad[1] = 1;
    node[16]->nn_param.conv2d.pad[2] = 1;
    node[16]->nn_param.conv2d.pad[3] = 1;
    node[16]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[16]->nn_param.conv2d.group = 1;
    node[16]->nn_param.conv2d.dilation[0] = 1;
    node[16]->nn_param.conv2d.dilation[1] = 1;
    node[16]->nn_param.conv2d.multiplier = 0;
    node[16]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[16]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[16]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark2/dark2.1/cv3.2/act/Sigmoid_316_Mul_/dark2/dark2.1/cv3.2/act/Mul_315
      var       - node[17]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[17], VSI_NN_OP_SWISH, 1, 1, 315);
    node[17]->nn_param.swish.type = VSI_NN_SWISH;
    node[17]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark2/dark2.1/cv3.3/conv/Conv_307
      var       - node[18]
      name      - Conv_/dark2/dark2.1/cv3.3/conv/Conv
      operation - convolution
      input     - [160, 160, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[18], VSI_NN_OP_CONV2D, 3, 1, 307);
    node[18]->nn_param.conv2d.ksize[0] = 3;
    node[18]->nn_param.conv2d.ksize[1] = 3;
    node[18]->nn_param.conv2d.weights = 64;
    node[18]->nn_param.conv2d.stride[0] = 1;
    node[18]->nn_param.conv2d.stride[1] = 1;
    node[18]->nn_param.conv2d.pad[0] = 1;
    node[18]->nn_param.conv2d.pad[1] = 1;
    node[18]->nn_param.conv2d.pad[2] = 1;
    node[18]->nn_param.conv2d.pad[3] = 1;
    node[18]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[18]->nn_param.conv2d.group = 1;
    node[18]->nn_param.conv2d.dilation[0] = 1;
    node[18]->nn_param.conv2d.dilation[1] = 1;
    node[18]->nn_param.conv2d.multiplier = 0;
    node[18]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[18]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[18]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark2/dark2.1/cv3.3/act/Sigmoid_308_Mul_/dark2/dark2.1/cv3.3/act/Mul_299
      var       - node[19]
      name      - swish
      operation - swish
      input     - [160, 160, 64, 1]
      output    - [160, 160, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[19], VSI_NN_OP_SWISH, 1, 1, 299);
    node[19]->nn_param.swish.type = VSI_NN_SWISH;
    node[19]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/dark2/dark2.1/Concat_293
      var       - node[20]
      name      - Concat_/dark2/dark2.1/Concat
      operation - concat
      input     - [160, 160, 64, 1]
                  [160, 160, 64, 1]
                  [160, 160, 64, 1]
                  [160, 160, 64, 1]
      output    - [160, 160, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[20], VSI_NN_OP_CONCAT, 4, 1, 293);
    node[20]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/dark2/dark2.1/cv4/conv/Conv_280
      var       - node[21]
      name      - Conv_/dark2/dark2.1/cv4/conv/Conv
      operation - convolution
      input     - [160, 160, 256, 1]
      filter    - [1, 1, 256, 256]
      output    - [160, 160, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[21], VSI_NN_OP_CONV2D, 3, 1, 280);
    node[21]->nn_param.conv2d.ksize[0] = 1;
    node[21]->nn_param.conv2d.ksize[1] = 1;
    node[21]->nn_param.conv2d.weights = 256;
    node[21]->nn_param.conv2d.stride[0] = 1;
    node[21]->nn_param.conv2d.stride[1] = 1;
    node[21]->nn_param.conv2d.pad[0] = 0;
    node[21]->nn_param.conv2d.pad[1] = 0;
    node[21]->nn_param.conv2d.pad[2] = 0;
    node[21]->nn_param.conv2d.pad[3] = 0;
    node[21]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[21]->nn_param.conv2d.group = 1;
    node[21]->nn_param.conv2d.dilation[0] = 1;
    node[21]->nn_param.conv2d.dilation[1] = 1;
    node[21]->nn_param.conv2d.multiplier = 0;
    node[21]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[21]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[21]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark2/dark2.1/cv4/act/Sigmoid_278_Mul_/dark2/dark2.1/cv4/act/Mul_276
      var       - node[22]
      name      - swish
      operation - swish
      input     - [160, 160, 256, 1]
      output    - [160, 160, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[22], VSI_NN_OP_SWISH, 1, 1, 276);
    node[22]->nn_param.swish.type = VSI_NN_SWISH;
    node[22]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - MaxPool_/dark3/dark3.0/mp/m/MaxPool_275
      var       - node[23]
      name      - MaxPool_/dark3/dark3.0/mp/m/MaxPool
      operation - pooling
      input     - [160, 160, 256, 1]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[23], VSI_NN_OP_POOL, 1, 1, 275);
    node[23]->nn_param.pool.ksize[0] = 2;
    node[23]->nn_param.pool.ksize[1] = 2;
    node[23]->nn_param.pool.stride[0] = 2;
    node[23]->nn_param.pool.stride[1] = 2;
    node[23]->nn_param.pool.pad[0] = 0;
    node[23]->nn_param.pool.pad[1] = 0;
    node[23]->nn_param.pool.pad[2] = 0;
    node[23]->nn_param.pool.pad[3] = 0;
    node[23]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[23]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[23]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.0/cv2/conv/Conv_290
      var       - node[24]
      name      - Conv_/dark3/dark3.0/cv2/conv/Conv
      operation - convolution
      input     - [160, 160, 256, 1]
      filter    - [1, 1, 256, 128]
      output    - [160, 160, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[24], VSI_NN_OP_CONV2D, 3, 1, 290);
    node[24]->nn_param.conv2d.ksize[0] = 1;
    node[24]->nn_param.conv2d.ksize[1] = 1;
    node[24]->nn_param.conv2d.weights = 128;
    node[24]->nn_param.conv2d.stride[0] = 1;
    node[24]->nn_param.conv2d.stride[1] = 1;
    node[24]->nn_param.conv2d.pad[0] = 0;
    node[24]->nn_param.conv2d.pad[1] = 0;
    node[24]->nn_param.conv2d.pad[2] = 0;
    node[24]->nn_param.conv2d.pad[3] = 0;
    node[24]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[24]->nn_param.conv2d.group = 1;
    node[24]->nn_param.conv2d.dilation[0] = 1;
    node[24]->nn_param.conv2d.dilation[1] = 1;
    node[24]->nn_param.conv2d.multiplier = 0;
    node[24]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[24]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[24]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.0/cv1/conv/Conv_255
      var       - node[25]
      name      - Conv_/dark3/dark3.0/cv1/conv/Conv
      operation - convolution
      input     - [80, 80, 256, 1]
      filter    - [1, 1, 256, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[25], VSI_NN_OP_CONV2D, 3, 1, 255);
    node[25]->nn_param.conv2d.ksize[0] = 1;
    node[25]->nn_param.conv2d.ksize[1] = 1;
    node[25]->nn_param.conv2d.weights = 128;
    node[25]->nn_param.conv2d.stride[0] = 1;
    node[25]->nn_param.conv2d.stride[1] = 1;
    node[25]->nn_param.conv2d.pad[0] = 0;
    node[25]->nn_param.conv2d.pad[1] = 0;
    node[25]->nn_param.conv2d.pad[2] = 0;
    node[25]->nn_param.conv2d.pad[3] = 0;
    node[25]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[25]->nn_param.conv2d.group = 1;
    node[25]->nn_param.conv2d.dilation[0] = 1;
    node[25]->nn_param.conv2d.dilation[1] = 1;
    node[25]->nn_param.conv2d.multiplier = 0;
    node[25]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[25]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[25]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.0/cv2/act/Sigmoid_274_Mul_/dark3/dark3.0/cv2/act/Mul_273
      var       - node[26]
      name      - swish
      operation - swish
      input     - [160, 160, 128, 1]
      output    - [160, 160, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[26], VSI_NN_OP_SWISH, 1, 1, 273);
    node[26]->nn_param.swish.type = VSI_NN_SWISH;
    node[26]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.0/cv1/act/Sigmoid_256_Mul_/dark3/dark3.0/cv1/act/Mul_229
      var       - node[27]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[27], VSI_NN_OP_SWISH, 1, 1, 229);
    node[27]->nn_param.swish.type = VSI_NN_SWISH;
    node[27]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.0/cv3/conv/Conv_253
      var       - node[28]
      name      - Conv_/dark3/dark3.0/cv3/conv/Conv
      operation - convolution
      input     - [160, 160, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[28], VSI_NN_OP_CONV2D, 3, 1, 253);
    node[28]->nn_param.conv2d.ksize[0] = 3;
    node[28]->nn_param.conv2d.ksize[1] = 3;
    node[28]->nn_param.conv2d.weights = 128;
    node[28]->nn_param.conv2d.stride[0] = 2;
    node[28]->nn_param.conv2d.stride[1] = 2;
    node[28]->nn_param.conv2d.pad[0] = 1;
    node[28]->nn_param.conv2d.pad[1] = 1;
    node[28]->nn_param.conv2d.pad[2] = 1;
    node[28]->nn_param.conv2d.pad[3] = 1;
    node[28]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[28]->nn_param.conv2d.group = 1;
    node[28]->nn_param.conv2d.dilation[0] = 1;
    node[28]->nn_param.conv2d.dilation[1] = 1;
    node[28]->nn_param.conv2d.multiplier = 0;
    node[28]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[28]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[28]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.0/cv3/act/Sigmoid_254_Mul_/dark3/dark3.0/cv3/act/Mul_228
      var       - node[29]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[29], VSI_NN_OP_SWISH, 1, 1, 228);
    node[29]->nn_param.swish.type = VSI_NN_SWISH;
    node[29]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/dark3/dark3.0/Concat_204
      var       - node[30]
      name      - Concat_/dark3/dark3.0/Concat
      operation - concat
      input     - [80, 80, 128, 1]
                  [80, 80, 128, 1]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[30], VSI_NN_OP_CONCAT, 2, 1, 204);
    node[30]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.1/cv2/conv/Conv_201
      var       - node[31]
      name      - Conv_/dark3/dark3.1/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 256, 1]
      filter    - [1, 1, 256, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[31], VSI_NN_OP_CONV2D, 3, 1, 201);
    node[31]->nn_param.conv2d.ksize[0] = 1;
    node[31]->nn_param.conv2d.ksize[1] = 1;
    node[31]->nn_param.conv2d.weights = 128;
    node[31]->nn_param.conv2d.stride[0] = 1;
    node[31]->nn_param.conv2d.stride[1] = 1;
    node[31]->nn_param.conv2d.pad[0] = 0;
    node[31]->nn_param.conv2d.pad[1] = 0;
    node[31]->nn_param.conv2d.pad[2] = 0;
    node[31]->nn_param.conv2d.pad[3] = 0;
    node[31]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[31]->nn_param.conv2d.group = 1;
    node[31]->nn_param.conv2d.dilation[0] = 1;
    node[31]->nn_param.conv2d.dilation[1] = 1;
    node[31]->nn_param.conv2d.multiplier = 0;
    node[31]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[31]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[31]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.1/cv1/conv/Conv_203
      var       - node[32]
      name      - Conv_/dark3/dark3.1/cv1/conv/Conv
      operation - convolution
      input     - [80, 80, 256, 1]
      filter    - [1, 1, 256, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[32], VSI_NN_OP_CONV2D, 3, 1, 203);
    node[32]->nn_param.conv2d.ksize[0] = 1;
    node[32]->nn_param.conv2d.ksize[1] = 1;
    node[32]->nn_param.conv2d.weights = 128;
    node[32]->nn_param.conv2d.stride[0] = 1;
    node[32]->nn_param.conv2d.stride[1] = 1;
    node[32]->nn_param.conv2d.pad[0] = 0;
    node[32]->nn_param.conv2d.pad[1] = 0;
    node[32]->nn_param.conv2d.pad[2] = 0;
    node[32]->nn_param.conv2d.pad[3] = 0;
    node[32]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[32]->nn_param.conv2d.group = 1;
    node[32]->nn_param.conv2d.dilation[0] = 1;
    node[32]->nn_param.conv2d.dilation[1] = 1;
    node[32]->nn_param.conv2d.multiplier = 0;
    node[32]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[32]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[32]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.1/cv2/act/Sigmoid_202_Mul_/dark3/dark3.1/cv2/act/Mul_180
      var       - node[33]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[33], VSI_NN_OP_SWISH, 1, 1, 180);
    node[33]->nn_param.swish.type = VSI_NN_SWISH;
    node[33]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.1/cv1/act/Sigmoid_182_Mul_/dark3/dark3.1/cv1/act/Mul_181
      var       - node[34]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[34], VSI_NN_OP_SWISH, 1, 1, 181);
    node[34]->nn_param.swish.type = VSI_NN_SWISH;
    node[34]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.1/cv3.0/conv/Conv_226
      var       - node[35]
      name      - Conv_/dark3/dark3.1/cv3.0/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[35], VSI_NN_OP_CONV2D, 3, 1, 226);
    node[35]->nn_param.conv2d.ksize[0] = 3;
    node[35]->nn_param.conv2d.ksize[1] = 3;
    node[35]->nn_param.conv2d.weights = 128;
    node[35]->nn_param.conv2d.stride[0] = 1;
    node[35]->nn_param.conv2d.stride[1] = 1;
    node[35]->nn_param.conv2d.pad[0] = 1;
    node[35]->nn_param.conv2d.pad[1] = 1;
    node[35]->nn_param.conv2d.pad[2] = 1;
    node[35]->nn_param.conv2d.pad[3] = 1;
    node[35]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[35]->nn_param.conv2d.group = 1;
    node[35]->nn_param.conv2d.dilation[0] = 1;
    node[35]->nn_param.conv2d.dilation[1] = 1;
    node[35]->nn_param.conv2d.multiplier = 0;
    node[35]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[35]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[35]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.1/cv3.0/act/Sigmoid_225_Mul_/dark3/dark3.1/cv3.0/act/Mul_224
      var       - node[36]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[36], VSI_NN_OP_SWISH, 1, 1, 224);
    node[36]->nn_param.swish.type = VSI_NN_SWISH;
    node[36]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.1/cv3.1/conv/Conv_199
      var       - node[37]
      name      - Conv_/dark3/dark3.1/cv3.1/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[37], VSI_NN_OP_CONV2D, 3, 1, 199);
    node[37]->nn_param.conv2d.ksize[0] = 3;
    node[37]->nn_param.conv2d.ksize[1] = 3;
    node[37]->nn_param.conv2d.weights = 128;
    node[37]->nn_param.conv2d.stride[0] = 1;
    node[37]->nn_param.conv2d.stride[1] = 1;
    node[37]->nn_param.conv2d.pad[0] = 1;
    node[37]->nn_param.conv2d.pad[1] = 1;
    node[37]->nn_param.conv2d.pad[2] = 1;
    node[37]->nn_param.conv2d.pad[3] = 1;
    node[37]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[37]->nn_param.conv2d.group = 1;
    node[37]->nn_param.conv2d.dilation[0] = 1;
    node[37]->nn_param.conv2d.dilation[1] = 1;
    node[37]->nn_param.conv2d.multiplier = 0;
    node[37]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[37]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[37]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.1/cv3.1/act/Sigmoid_200_Mul_/dark3/dark3.1/cv3.1/act/Mul_179
      var       - node[38]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[38], VSI_NN_OP_SWISH, 1, 1, 179);
    node[38]->nn_param.swish.type = VSI_NN_SWISH;
    node[38]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.1/cv3.2/conv/Conv_227
      var       - node[39]
      name      - Conv_/dark3/dark3.1/cv3.2/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[39], VSI_NN_OP_CONV2D, 3, 1, 227);
    node[39]->nn_param.conv2d.ksize[0] = 3;
    node[39]->nn_param.conv2d.ksize[1] = 3;
    node[39]->nn_param.conv2d.weights = 128;
    node[39]->nn_param.conv2d.stride[0] = 1;
    node[39]->nn_param.conv2d.stride[1] = 1;
    node[39]->nn_param.conv2d.pad[0] = 1;
    node[39]->nn_param.conv2d.pad[1] = 1;
    node[39]->nn_param.conv2d.pad[2] = 1;
    node[39]->nn_param.conv2d.pad[3] = 1;
    node[39]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[39]->nn_param.conv2d.group = 1;
    node[39]->nn_param.conv2d.dilation[0] = 1;
    node[39]->nn_param.conv2d.dilation[1] = 1;
    node[39]->nn_param.conv2d.multiplier = 0;
    node[39]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[39]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[39]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.1/cv3.2/act/Sigmoid_223_Mul_/dark3/dark3.1/cv3.2/act/Mul_222
      var       - node[40]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[40], VSI_NN_OP_SWISH, 1, 1, 222);
    node[40]->nn_param.swish.type = VSI_NN_SWISH;
    node[40]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.1/cv3.3/conv/Conv_197
      var       - node[41]
      name      - Conv_/dark3/dark3.1/cv3.3/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[41], VSI_NN_OP_CONV2D, 3, 1, 197);
    node[41]->nn_param.conv2d.ksize[0] = 3;
    node[41]->nn_param.conv2d.ksize[1] = 3;
    node[41]->nn_param.conv2d.weights = 128;
    node[41]->nn_param.conv2d.stride[0] = 1;
    node[41]->nn_param.conv2d.stride[1] = 1;
    node[41]->nn_param.conv2d.pad[0] = 1;
    node[41]->nn_param.conv2d.pad[1] = 1;
    node[41]->nn_param.conv2d.pad[2] = 1;
    node[41]->nn_param.conv2d.pad[3] = 1;
    node[41]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[41]->nn_param.conv2d.group = 1;
    node[41]->nn_param.conv2d.dilation[0] = 1;
    node[41]->nn_param.conv2d.dilation[1] = 1;
    node[41]->nn_param.conv2d.multiplier = 0;
    node[41]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[41]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[41]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.1/cv3.3/act/Sigmoid_198_Mul_/dark3/dark3.1/cv3.3/act/Mul_178
      var       - node[42]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[42], VSI_NN_OP_SWISH, 1, 1, 178);
    node[42]->nn_param.swish.type = VSI_NN_SWISH;
    node[42]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/dark3/dark3.1/Concat_165
      var       - node[43]
      name      - Concat_/dark3/dark3.1/Concat
      operation - concat
      input     - [80, 80, 128, 1]
                  [80, 80, 128, 1]
                  [80, 80, 128, 1]
                  [80, 80, 128, 1]
      output    - [80, 80, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[43], VSI_NN_OP_CONCAT, 4, 1, 165);
    node[43]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/dark3/dark3.1/cv4/conv/Conv_164
      var       - node[44]
      name      - Conv_/dark3/dark3.1/cv4/conv/Conv
      operation - convolution
      input     - [80, 80, 512, 1]
      filter    - [1, 1, 512, 512]
      output    - [80, 80, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[44], VSI_NN_OP_CONV2D, 3, 1, 164);
    node[44]->nn_param.conv2d.ksize[0] = 1;
    node[44]->nn_param.conv2d.ksize[1] = 1;
    node[44]->nn_param.conv2d.weights = 512;
    node[44]->nn_param.conv2d.stride[0] = 1;
    node[44]->nn_param.conv2d.stride[1] = 1;
    node[44]->nn_param.conv2d.pad[0] = 0;
    node[44]->nn_param.conv2d.pad[1] = 0;
    node[44]->nn_param.conv2d.pad[2] = 0;
    node[44]->nn_param.conv2d.pad[3] = 0;
    node[44]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[44]->nn_param.conv2d.group = 1;
    node[44]->nn_param.conv2d.dilation[0] = 1;
    node[44]->nn_param.conv2d.dilation[1] = 1;
    node[44]->nn_param.conv2d.multiplier = 0;
    node[44]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[44]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[44]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark3/dark3.1/cv4/act/Sigmoid_151_Mul_/dark3/dark3.1/cv4/act/Mul_141
      var       - node[45]
      name      - swish
      operation - swish
      input     - [80, 80, 512, 1]
      output    - [80, 80, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[45], VSI_NN_OP_SWISH, 1, 1, 141);
    node[45]->nn_param.swish.type = VSI_NN_SWISH;
    node[45]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv_for_feat1/conv/Conv_123
      var       - node[46]
      name      - Conv_/conv_for_feat1/conv/Conv
      operation - convolution
      input     - [80, 80, 512, 1]
      filter    - [1, 1, 512, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[46], VSI_NN_OP_CONV2D, 3, 1, 123);
    node[46]->nn_param.conv2d.ksize[0] = 1;
    node[46]->nn_param.conv2d.ksize[1] = 1;
    node[46]->nn_param.conv2d.weights = 128;
    node[46]->nn_param.conv2d.stride[0] = 1;
    node[46]->nn_param.conv2d.stride[1] = 1;
    node[46]->nn_param.conv2d.pad[0] = 0;
    node[46]->nn_param.conv2d.pad[1] = 0;
    node[46]->nn_param.conv2d.pad[2] = 0;
    node[46]->nn_param.conv2d.pad[3] = 0;
    node[46]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[46]->nn_param.conv2d.group = 1;
    node[46]->nn_param.conv2d.dilation[0] = 1;
    node[46]->nn_param.conv2d.dilation[1] = 1;
    node[46]->nn_param.conv2d.multiplier = 0;
    node[46]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[46]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[46]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - MaxPool_/dark4/dark4.0/mp/m/MaxPool_283
      var       - node[47]
      name      - MaxPool_/dark4/dark4.0/mp/m/MaxPool
      operation - pooling
      input     - [80, 80, 512, 1]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[47], VSI_NN_OP_POOL, 1, 1, 283);
    node[47]->nn_param.pool.ksize[0] = 2;
    node[47]->nn_param.pool.ksize[1] = 2;
    node[47]->nn_param.pool.stride[0] = 2;
    node[47]->nn_param.pool.stride[1] = 2;
    node[47]->nn_param.pool.pad[0] = 0;
    node[47]->nn_param.pool.pad[1] = 0;
    node[47]->nn_param.pool.pad[2] = 0;
    node[47]->nn_param.pool.pad[3] = 0;
    node[47]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[47]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[47]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.0/cv2/conv/Conv_295
      var       - node[48]
      name      - Conv_/dark4/dark4.0/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[48], VSI_NN_OP_CONV2D, 3, 1, 295);
    node[48]->nn_param.conv2d.ksize[0] = 1;
    node[48]->nn_param.conv2d.ksize[1] = 1;
    node[48]->nn_param.conv2d.weights = 256;
    node[48]->nn_param.conv2d.stride[0] = 1;
    node[48]->nn_param.conv2d.stride[1] = 1;
    node[48]->nn_param.conv2d.pad[0] = 0;
    node[48]->nn_param.conv2d.pad[1] = 0;
    node[48]->nn_param.conv2d.pad[2] = 0;
    node[48]->nn_param.conv2d.pad[3] = 0;
    node[48]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[48]->nn_param.conv2d.group = 1;
    node[48]->nn_param.conv2d.dilation[0] = 1;
    node[48]->nn_param.conv2d.dilation[1] = 1;
    node[48]->nn_param.conv2d.multiplier = 0;
    node[48]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[48]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[48]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv_for_feat1/act/Sigmoid_122_Mul_/conv_for_feat1/act/Mul_121
      var       - node[49]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[49], VSI_NN_OP_SWISH, 1, 1, 121);
    node[49]->nn_param.swish.type = VSI_NN_SWISH;
    node[49]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.0/cv1/conv/Conv_264
      var       - node[50]
      name      - Conv_/dark4/dark4.0/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[50], VSI_NN_OP_CONV2D, 3, 1, 264);
    node[50]->nn_param.conv2d.ksize[0] = 1;
    node[50]->nn_param.conv2d.ksize[1] = 1;
    node[50]->nn_param.conv2d.weights = 256;
    node[50]->nn_param.conv2d.stride[0] = 1;
    node[50]->nn_param.conv2d.stride[1] = 1;
    node[50]->nn_param.conv2d.pad[0] = 0;
    node[50]->nn_param.conv2d.pad[1] = 0;
    node[50]->nn_param.conv2d.pad[2] = 0;
    node[50]->nn_param.conv2d.pad[3] = 0;
    node[50]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[50]->nn_param.conv2d.group = 1;
    node[50]->nn_param.conv2d.dilation[0] = 1;
    node[50]->nn_param.conv2d.dilation[1] = 1;
    node[50]->nn_param.conv2d.multiplier = 0;
    node[50]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[50]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[50]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.0/cv2/act/Sigmoid_296_Mul_/dark4/dark4.0/cv2/act/Mul_286
      var       - node[51]
      name      - swish
      operation - swish
      input     - [80, 80, 256, 1]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[51], VSI_NN_OP_SWISH, 1, 1, 286);
    node[51]->nn_param.swish.type = VSI_NN_SWISH;
    node[51]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.0/cv1/act/Sigmoid_263_Mul_/dark4/dark4.0/cv1/act/Mul_262
      var       - node[52]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[52], VSI_NN_OP_SWISH, 1, 1, 262);
    node[52]->nn_param.swish.type = VSI_NN_SWISH;
    node[52]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.0/cv3/conv/Conv_284
      var       - node[53]
      name      - Conv_/dark4/dark4.0/cv3/conv/Conv
      operation - convolution
      input     - [80, 80, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[53], VSI_NN_OP_CONV2D, 3, 1, 284);
    node[53]->nn_param.conv2d.ksize[0] = 3;
    node[53]->nn_param.conv2d.ksize[1] = 3;
    node[53]->nn_param.conv2d.weights = 256;
    node[53]->nn_param.conv2d.stride[0] = 2;
    node[53]->nn_param.conv2d.stride[1] = 2;
    node[53]->nn_param.conv2d.pad[0] = 1;
    node[53]->nn_param.conv2d.pad[1] = 1;
    node[53]->nn_param.conv2d.pad[2] = 1;
    node[53]->nn_param.conv2d.pad[3] = 1;
    node[53]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[53]->nn_param.conv2d.group = 1;
    node[53]->nn_param.conv2d.dilation[0] = 1;
    node[53]->nn_param.conv2d.dilation[1] = 1;
    node[53]->nn_param.conv2d.multiplier = 0;
    node[53]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[53]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[53]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.0/cv3/act/Sigmoid_282_Mul_/dark4/dark4.0/cv3/act/Mul_281
      var       - node[54]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[54], VSI_NN_OP_SWISH, 1, 1, 281);
    node[54]->nn_param.swish.type = VSI_NN_SWISH;
    node[54]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/dark4/dark4.0/Concat_261
      var       - node[55]
      name      - Concat_/dark4/dark4.0/Concat
      operation - concat
      input     - [40, 40, 256, 1]
                  [40, 40, 256, 1]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[55], VSI_NN_OP_CONCAT, 2, 1, 261);
    node[55]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.1/cv2/conv/Conv_234
      var       - node[56]
      name      - Conv_/dark4/dark4.1/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[56], VSI_NN_OP_CONV2D, 3, 1, 234);
    node[56]->nn_param.conv2d.ksize[0] = 1;
    node[56]->nn_param.conv2d.ksize[1] = 1;
    node[56]->nn_param.conv2d.weights = 256;
    node[56]->nn_param.conv2d.stride[0] = 1;
    node[56]->nn_param.conv2d.stride[1] = 1;
    node[56]->nn_param.conv2d.pad[0] = 0;
    node[56]->nn_param.conv2d.pad[1] = 0;
    node[56]->nn_param.conv2d.pad[2] = 0;
    node[56]->nn_param.conv2d.pad[3] = 0;
    node[56]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[56]->nn_param.conv2d.group = 1;
    node[56]->nn_param.conv2d.dilation[0] = 1;
    node[56]->nn_param.conv2d.dilation[1] = 1;
    node[56]->nn_param.conv2d.multiplier = 0;
    node[56]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[56]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[56]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.1/cv1/conv/Conv_236
      var       - node[57]
      name      - Conv_/dark4/dark4.1/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[57], VSI_NN_OP_CONV2D, 3, 1, 236);
    node[57]->nn_param.conv2d.ksize[0] = 1;
    node[57]->nn_param.conv2d.ksize[1] = 1;
    node[57]->nn_param.conv2d.weights = 256;
    node[57]->nn_param.conv2d.stride[0] = 1;
    node[57]->nn_param.conv2d.stride[1] = 1;
    node[57]->nn_param.conv2d.pad[0] = 0;
    node[57]->nn_param.conv2d.pad[1] = 0;
    node[57]->nn_param.conv2d.pad[2] = 0;
    node[57]->nn_param.conv2d.pad[3] = 0;
    node[57]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[57]->nn_param.conv2d.group = 1;
    node[57]->nn_param.conv2d.dilation[0] = 1;
    node[57]->nn_param.conv2d.dilation[1] = 1;
    node[57]->nn_param.conv2d.multiplier = 0;
    node[57]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[57]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[57]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.1/cv2/act/Sigmoid_235_Mul_/dark4/dark4.1/cv2/act/Mul_207
      var       - node[58]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[58], VSI_NN_OP_SWISH, 1, 1, 207);
    node[58]->nn_param.swish.type = VSI_NN_SWISH;
    node[58]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.1/cv1/act/Sigmoid_237_Mul_/dark4/dark4.1/cv1/act/Mul_208
      var       - node[59]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[59], VSI_NN_OP_SWISH, 1, 1, 208);
    node[59]->nn_param.swish.type = VSI_NN_SWISH;
    node[59]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.1/cv3.0/conv/Conv_279
      var       - node[60]
      name      - Conv_/dark4/dark4.1/cv3.0/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[60], VSI_NN_OP_CONV2D, 3, 1, 279);
    node[60]->nn_param.conv2d.ksize[0] = 3;
    node[60]->nn_param.conv2d.ksize[1] = 3;
    node[60]->nn_param.conv2d.weights = 256;
    node[60]->nn_param.conv2d.stride[0] = 1;
    node[60]->nn_param.conv2d.stride[1] = 1;
    node[60]->nn_param.conv2d.pad[0] = 1;
    node[60]->nn_param.conv2d.pad[1] = 1;
    node[60]->nn_param.conv2d.pad[2] = 1;
    node[60]->nn_param.conv2d.pad[3] = 1;
    node[60]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[60]->nn_param.conv2d.group = 1;
    node[60]->nn_param.conv2d.dilation[0] = 1;
    node[60]->nn_param.conv2d.dilation[1] = 1;
    node[60]->nn_param.conv2d.multiplier = 0;
    node[60]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[60]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[60]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.1/cv3.0/act/Sigmoid_260_Mul_/dark4/dark4.1/cv3.0/act/Mul_259
      var       - node[61]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[61], VSI_NN_OP_SWISH, 1, 1, 259);
    node[61]->nn_param.swish.type = VSI_NN_SWISH;
    node[61]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.1/cv3.1/conv/Conv_232
      var       - node[62]
      name      - Conv_/dark4/dark4.1/cv3.1/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[62], VSI_NN_OP_CONV2D, 3, 1, 232);
    node[62]->nn_param.conv2d.ksize[0] = 3;
    node[62]->nn_param.conv2d.ksize[1] = 3;
    node[62]->nn_param.conv2d.weights = 256;
    node[62]->nn_param.conv2d.stride[0] = 1;
    node[62]->nn_param.conv2d.stride[1] = 1;
    node[62]->nn_param.conv2d.pad[0] = 1;
    node[62]->nn_param.conv2d.pad[1] = 1;
    node[62]->nn_param.conv2d.pad[2] = 1;
    node[62]->nn_param.conv2d.pad[3] = 1;
    node[62]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[62]->nn_param.conv2d.group = 1;
    node[62]->nn_param.conv2d.dilation[0] = 1;
    node[62]->nn_param.conv2d.dilation[1] = 1;
    node[62]->nn_param.conv2d.multiplier = 0;
    node[62]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[62]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[62]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.1/cv3.1/act/Sigmoid_233_Mul_/dark4/dark4.1/cv3.1/act/Mul_206
      var       - node[63]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[63], VSI_NN_OP_SWISH, 1, 1, 206);
    node[63]->nn_param.swish.type = VSI_NN_SWISH;
    node[63]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.1/cv3.2/conv/Conv_277
      var       - node[64]
      name      - Conv_/dark4/dark4.1/cv3.2/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[64], VSI_NN_OP_CONV2D, 3, 1, 277);
    node[64]->nn_param.conv2d.ksize[0] = 3;
    node[64]->nn_param.conv2d.ksize[1] = 3;
    node[64]->nn_param.conv2d.weights = 256;
    node[64]->nn_param.conv2d.stride[0] = 1;
    node[64]->nn_param.conv2d.stride[1] = 1;
    node[64]->nn_param.conv2d.pad[0] = 1;
    node[64]->nn_param.conv2d.pad[1] = 1;
    node[64]->nn_param.conv2d.pad[2] = 1;
    node[64]->nn_param.conv2d.pad[3] = 1;
    node[64]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[64]->nn_param.conv2d.group = 1;
    node[64]->nn_param.conv2d.dilation[0] = 1;
    node[64]->nn_param.conv2d.dilation[1] = 1;
    node[64]->nn_param.conv2d.multiplier = 0;
    node[64]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[64]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[64]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.1/cv3.2/act/Sigmoid_258_Mul_/dark4/dark4.1/cv3.2/act/Mul_257
      var       - node[65]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[65], VSI_NN_OP_SWISH, 1, 1, 257);
    node[65]->nn_param.swish.type = VSI_NN_SWISH;
    node[65]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.1/cv3.3/conv/Conv_230
      var       - node[66]
      name      - Conv_/dark4/dark4.1/cv3.3/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[66], VSI_NN_OP_CONV2D, 3, 1, 230);
    node[66]->nn_param.conv2d.ksize[0] = 3;
    node[66]->nn_param.conv2d.ksize[1] = 3;
    node[66]->nn_param.conv2d.weights = 256;
    node[66]->nn_param.conv2d.stride[0] = 1;
    node[66]->nn_param.conv2d.stride[1] = 1;
    node[66]->nn_param.conv2d.pad[0] = 1;
    node[66]->nn_param.conv2d.pad[1] = 1;
    node[66]->nn_param.conv2d.pad[2] = 1;
    node[66]->nn_param.conv2d.pad[3] = 1;
    node[66]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[66]->nn_param.conv2d.group = 1;
    node[66]->nn_param.conv2d.dilation[0] = 1;
    node[66]->nn_param.conv2d.dilation[1] = 1;
    node[66]->nn_param.conv2d.multiplier = 0;
    node[66]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[66]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[66]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.1/cv3.3/act/Sigmoid_231_Mul_/dark4/dark4.1/cv3.3/act/Mul_205
      var       - node[67]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[67], VSI_NN_OP_SWISH, 1, 1, 205);
    node[67]->nn_param.swish.type = VSI_NN_SWISH;
    node[67]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/dark4/dark4.1/Concat_183
      var       - node[68]
      name      - Concat_/dark4/dark4.1/Concat
      operation - concat
      input     - [40, 40, 256, 1]
                  [40, 40, 256, 1]
                  [40, 40, 256, 1]
                  [40, 40, 256, 1]
      output    - [40, 40, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[68], VSI_NN_OP_CONCAT, 4, 1, 183);
    node[68]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/dark4/dark4.1/cv4/conv/Conv_168
      var       - node[69]
      name      - Conv_/dark4/dark4.1/cv4/conv/Conv
      operation - convolution
      input     - [40, 40, 1024, 1]
      filter    - [1, 1, 1024, 1024]
      output    - [40, 40, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[69], VSI_NN_OP_CONV2D, 3, 1, 168);
    node[69]->nn_param.conv2d.ksize[0] = 1;
    node[69]->nn_param.conv2d.ksize[1] = 1;
    node[69]->nn_param.conv2d.weights = 1024;
    node[69]->nn_param.conv2d.stride[0] = 1;
    node[69]->nn_param.conv2d.stride[1] = 1;
    node[69]->nn_param.conv2d.pad[0] = 0;
    node[69]->nn_param.conv2d.pad[1] = 0;
    node[69]->nn_param.conv2d.pad[2] = 0;
    node[69]->nn_param.conv2d.pad[3] = 0;
    node[69]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[69]->nn_param.conv2d.group = 1;
    node[69]->nn_param.conv2d.dilation[0] = 1;
    node[69]->nn_param.conv2d.dilation[1] = 1;
    node[69]->nn_param.conv2d.multiplier = 0;
    node[69]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[69]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[69]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark4/dark4.1/cv4/act/Sigmoid_167_Mul_/dark4/dark4.1/cv4/act/Mul_166
      var       - node[70]
      name      - swish
      operation - swish
      input     - [40, 40, 1024, 1]
      output    - [40, 40, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[70], VSI_NN_OP_SWISH, 1, 1, 166);
    node[70]->nn_param.swish.type = VSI_NN_SWISH;
    node[70]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv_for_feat2/conv/Conv_152
      var       - node[71]
      name      - Conv_/conv_for_feat2/conv/Conv
      operation - convolution
      input     - [40, 40, 1024, 1]
      filter    - [1, 1, 1024, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[71], VSI_NN_OP_CONV2D, 3, 1, 152);
    node[71]->nn_param.conv2d.ksize[0] = 1;
    node[71]->nn_param.conv2d.ksize[1] = 1;
    node[71]->nn_param.conv2d.weights = 256;
    node[71]->nn_param.conv2d.stride[0] = 1;
    node[71]->nn_param.conv2d.stride[1] = 1;
    node[71]->nn_param.conv2d.pad[0] = 0;
    node[71]->nn_param.conv2d.pad[1] = 0;
    node[71]->nn_param.conv2d.pad[2] = 0;
    node[71]->nn_param.conv2d.pad[3] = 0;
    node[71]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[71]->nn_param.conv2d.group = 1;
    node[71]->nn_param.conv2d.dilation[0] = 1;
    node[71]->nn_param.conv2d.dilation[1] = 1;
    node[71]->nn_param.conv2d.multiplier = 0;
    node[71]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[71]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[71]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - MaxPool_/dark5/dark5.0/mp/m/MaxPool_251
      var       - node[72]
      name      - MaxPool_/dark5/dark5.0/mp/m/MaxPool
      operation - pooling
      input     - [40, 40, 1024, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[72], VSI_NN_OP_POOL, 1, 1, 251);
    node[72]->nn_param.pool.ksize[0] = 2;
    node[72]->nn_param.pool.ksize[1] = 2;
    node[72]->nn_param.pool.stride[0] = 2;
    node[72]->nn_param.pool.stride[1] = 2;
    node[72]->nn_param.pool.pad[0] = 0;
    node[72]->nn_param.pool.pad[1] = 0;
    node[72]->nn_param.pool.pad[2] = 0;
    node[72]->nn_param.pool.pad[3] = 0;
    node[72]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[72]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[72]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.0/cv2/conv/Conv_288
      var       - node[73]
      name      - Conv_/dark5/dark5.0/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 1024, 1]
      filter    - [1, 1, 1024, 512]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[73], VSI_NN_OP_CONV2D, 3, 1, 288);
    node[73]->nn_param.conv2d.ksize[0] = 1;
    node[73]->nn_param.conv2d.ksize[1] = 1;
    node[73]->nn_param.conv2d.weights = 512;
    node[73]->nn_param.conv2d.stride[0] = 1;
    node[73]->nn_param.conv2d.stride[1] = 1;
    node[73]->nn_param.conv2d.pad[0] = 0;
    node[73]->nn_param.conv2d.pad[1] = 0;
    node[73]->nn_param.conv2d.pad[2] = 0;
    node[73]->nn_param.conv2d.pad[3] = 0;
    node[73]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[73]->nn_param.conv2d.group = 1;
    node[73]->nn_param.conv2d.dilation[0] = 1;
    node[73]->nn_param.conv2d.dilation[1] = 1;
    node[73]->nn_param.conv2d.multiplier = 0;
    node[73]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[73]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[73]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv_for_feat2/act/Sigmoid_153_Mul_/conv_for_feat2/act/Mul_130
      var       - node[74]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[74], VSI_NN_OP_SWISH, 1, 1, 130);
    node[74]->nn_param.swish.type = VSI_NN_SWISH;
    node[74]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.0/cv1/conv/Conv_249
      var       - node[75]
      name      - Conv_/dark5/dark5.0/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[75], VSI_NN_OP_CONV2D, 3, 1, 249);
    node[75]->nn_param.conv2d.ksize[0] = 1;
    node[75]->nn_param.conv2d.ksize[1] = 1;
    node[75]->nn_param.conv2d.weights = 512;
    node[75]->nn_param.conv2d.stride[0] = 1;
    node[75]->nn_param.conv2d.stride[1] = 1;
    node[75]->nn_param.conv2d.pad[0] = 0;
    node[75]->nn_param.conv2d.pad[1] = 0;
    node[75]->nn_param.conv2d.pad[2] = 0;
    node[75]->nn_param.conv2d.pad[3] = 0;
    node[75]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[75]->nn_param.conv2d.group = 1;
    node[75]->nn_param.conv2d.dilation[0] = 1;
    node[75]->nn_param.conv2d.dilation[1] = 1;
    node[75]->nn_param.conv2d.multiplier = 0;
    node[75]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[75]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[75]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.0/cv2/act/Sigmoid_289_Mul_/dark5/dark5.0/cv2/act/Mul_272
      var       - node[76]
      name      - swish
      operation - swish
      input     - [40, 40, 512, 1]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[76], VSI_NN_OP_SWISH, 1, 1, 272);
    node[76]->nn_param.swish.type = VSI_NN_SWISH;
    node[76]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.0/cv1/act/Sigmoid_250_Mul_/dark5/dark5.0/cv1/act/Mul_221
      var       - node[77]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[77], VSI_NN_OP_SWISH, 1, 1, 221);
    node[77]->nn_param.swish.type = VSI_NN_SWISH;
    node[77]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.0/cv3/conv/Conv_271
      var       - node[78]
      name      - Conv_/dark5/dark5.0/cv3/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [3, 3, 512, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[78], VSI_NN_OP_CONV2D, 3, 1, 271);
    node[78]->nn_param.conv2d.ksize[0] = 3;
    node[78]->nn_param.conv2d.ksize[1] = 3;
    node[78]->nn_param.conv2d.weights = 512;
    node[78]->nn_param.conv2d.stride[0] = 2;
    node[78]->nn_param.conv2d.stride[1] = 2;
    node[78]->nn_param.conv2d.pad[0] = 1;
    node[78]->nn_param.conv2d.pad[1] = 1;
    node[78]->nn_param.conv2d.pad[2] = 1;
    node[78]->nn_param.conv2d.pad[3] = 1;
    node[78]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[78]->nn_param.conv2d.group = 1;
    node[78]->nn_param.conv2d.dilation[0] = 1;
    node[78]->nn_param.conv2d.dilation[1] = 1;
    node[78]->nn_param.conv2d.multiplier = 0;
    node[78]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[78]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[78]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.0/cv3/act/Sigmoid_252_Mul_/dark5/dark5.0/cv3/act/Mul_248
      var       - node[79]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[79], VSI_NN_OP_SWISH, 1, 1, 248);
    node[79]->nn_param.swish.type = VSI_NN_SWISH;
    node[79]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/dark5/dark5.0/Concat_220
      var       - node[80]
      name      - Concat_/dark5/dark5.0/Concat
      operation - concat
      input     - [20, 20, 512, 1]
                  [20, 20, 512, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[80], VSI_NN_OP_CONCAT, 2, 1, 220);
    node[80]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.1/cv1/conv/Conv_195
      var       - node[81]
      name      - Conv_/dark5/dark5.1/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[81], VSI_NN_OP_CONV2D, 3, 1, 195);
    node[81]->nn_param.conv2d.ksize[0] = 1;
    node[81]->nn_param.conv2d.ksize[1] = 1;
    node[81]->nn_param.conv2d.weights = 256;
    node[81]->nn_param.conv2d.stride[0] = 1;
    node[81]->nn_param.conv2d.stride[1] = 1;
    node[81]->nn_param.conv2d.pad[0] = 0;
    node[81]->nn_param.conv2d.pad[1] = 0;
    node[81]->nn_param.conv2d.pad[2] = 0;
    node[81]->nn_param.conv2d.pad[3] = 0;
    node[81]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[81]->nn_param.conv2d.group = 1;
    node[81]->nn_param.conv2d.dilation[0] = 1;
    node[81]->nn_param.conv2d.dilation[1] = 1;
    node[81]->nn_param.conv2d.multiplier = 0;
    node[81]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[81]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[81]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.1/cv2/conv/Conv_218
      var       - node[82]
      name      - Conv_/dark5/dark5.1/cv2/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[82], VSI_NN_OP_CONV2D, 3, 1, 218);
    node[82]->nn_param.conv2d.ksize[0] = 1;
    node[82]->nn_param.conv2d.ksize[1] = 1;
    node[82]->nn_param.conv2d.weights = 256;
    node[82]->nn_param.conv2d.stride[0] = 1;
    node[82]->nn_param.conv2d.stride[1] = 1;
    node[82]->nn_param.conv2d.pad[0] = 0;
    node[82]->nn_param.conv2d.pad[1] = 0;
    node[82]->nn_param.conv2d.pad[2] = 0;
    node[82]->nn_param.conv2d.pad[3] = 0;
    node[82]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[82]->nn_param.conv2d.group = 1;
    node[82]->nn_param.conv2d.dilation[0] = 1;
    node[82]->nn_param.conv2d.dilation[1] = 1;
    node[82]->nn_param.conv2d.multiplier = 0;
    node[82]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[82]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[82]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.1/cv1/act/Sigmoid_196_Mul_/dark5/dark5.1/cv1/act/Mul_177
      var       - node[83]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[83], VSI_NN_OP_SWISH, 1, 1, 177);
    node[83]->nn_param.swish.type = VSI_NN_SWISH;
    node[83]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.1/cv2/act/Sigmoid_219_Mul_/dark5/dark5.1/cv2/act/Mul_194
      var       - node[84]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[84], VSI_NN_OP_SWISH, 1, 1, 194);
    node[84]->nn_param.swish.type = VSI_NN_SWISH;
    node[84]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.1/cv3.0/conv/Conv_246
      var       - node[85]
      name      - Conv_/dark5/dark5.1/cv3.0/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[85], VSI_NN_OP_CONV2D, 3, 1, 246);
    node[85]->nn_param.conv2d.ksize[0] = 3;
    node[85]->nn_param.conv2d.ksize[1] = 3;
    node[85]->nn_param.conv2d.weights = 256;
    node[85]->nn_param.conv2d.stride[0] = 1;
    node[85]->nn_param.conv2d.stride[1] = 1;
    node[85]->nn_param.conv2d.pad[0] = 1;
    node[85]->nn_param.conv2d.pad[1] = 1;
    node[85]->nn_param.conv2d.pad[2] = 1;
    node[85]->nn_param.conv2d.pad[3] = 1;
    node[85]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[85]->nn_param.conv2d.group = 1;
    node[85]->nn_param.conv2d.dilation[0] = 1;
    node[85]->nn_param.conv2d.dilation[1] = 1;
    node[85]->nn_param.conv2d.multiplier = 0;
    node[85]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[85]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[85]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.1/cv3.0/act/Sigmoid_245_Mul_/dark5/dark5.1/cv3.0/act/Mul_244
      var       - node[86]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[86], VSI_NN_OP_SWISH, 1, 1, 244);
    node[86]->nn_param.swish.type = VSI_NN_SWISH;
    node[86]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.1/cv3.1/conv/Conv_216
      var       - node[87]
      name      - Conv_/dark5/dark5.1/cv3.1/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[87], VSI_NN_OP_CONV2D, 3, 1, 216);
    node[87]->nn_param.conv2d.ksize[0] = 3;
    node[87]->nn_param.conv2d.ksize[1] = 3;
    node[87]->nn_param.conv2d.weights = 256;
    node[87]->nn_param.conv2d.stride[0] = 1;
    node[87]->nn_param.conv2d.stride[1] = 1;
    node[87]->nn_param.conv2d.pad[0] = 1;
    node[87]->nn_param.conv2d.pad[1] = 1;
    node[87]->nn_param.conv2d.pad[2] = 1;
    node[87]->nn_param.conv2d.pad[3] = 1;
    node[87]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[87]->nn_param.conv2d.group = 1;
    node[87]->nn_param.conv2d.dilation[0] = 1;
    node[87]->nn_param.conv2d.dilation[1] = 1;
    node[87]->nn_param.conv2d.multiplier = 0;
    node[87]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[87]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[87]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.1/cv3.1/act/Sigmoid_217_Mul_/dark5/dark5.1/cv3.1/act/Mul_193
      var       - node[88]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[88], VSI_NN_OP_SWISH, 1, 1, 193);
    node[88]->nn_param.swish.type = VSI_NN_SWISH;
    node[88]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.1/cv3.2/conv/Conv_247
      var       - node[89]
      name      - Conv_/dark5/dark5.1/cv3.2/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[89], VSI_NN_OP_CONV2D, 3, 1, 247);
    node[89]->nn_param.conv2d.ksize[0] = 3;
    node[89]->nn_param.conv2d.ksize[1] = 3;
    node[89]->nn_param.conv2d.weights = 256;
    node[89]->nn_param.conv2d.stride[0] = 1;
    node[89]->nn_param.conv2d.stride[1] = 1;
    node[89]->nn_param.conv2d.pad[0] = 1;
    node[89]->nn_param.conv2d.pad[1] = 1;
    node[89]->nn_param.conv2d.pad[2] = 1;
    node[89]->nn_param.conv2d.pad[3] = 1;
    node[89]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[89]->nn_param.conv2d.group = 1;
    node[89]->nn_param.conv2d.dilation[0] = 1;
    node[89]->nn_param.conv2d.dilation[1] = 1;
    node[89]->nn_param.conv2d.multiplier = 0;
    node[89]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[89]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[89]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.1/cv3.2/act/Sigmoid_243_Mul_/dark5/dark5.1/cv3.2/act/Mul_242
      var       - node[90]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[90], VSI_NN_OP_SWISH, 1, 1, 242);
    node[90]->nn_param.swish.type = VSI_NN_SWISH;
    node[90]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.1/cv3.3/conv/Conv_214
      var       - node[91]
      name      - Conv_/dark5/dark5.1/cv3.3/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[91], VSI_NN_OP_CONV2D, 3, 1, 214);
    node[91]->nn_param.conv2d.ksize[0] = 3;
    node[91]->nn_param.conv2d.ksize[1] = 3;
    node[91]->nn_param.conv2d.weights = 256;
    node[91]->nn_param.conv2d.stride[0] = 1;
    node[91]->nn_param.conv2d.stride[1] = 1;
    node[91]->nn_param.conv2d.pad[0] = 1;
    node[91]->nn_param.conv2d.pad[1] = 1;
    node[91]->nn_param.conv2d.pad[2] = 1;
    node[91]->nn_param.conv2d.pad[3] = 1;
    node[91]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[91]->nn_param.conv2d.group = 1;
    node[91]->nn_param.conv2d.dilation[0] = 1;
    node[91]->nn_param.conv2d.dilation[1] = 1;
    node[91]->nn_param.conv2d.multiplier = 0;
    node[91]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[91]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[91]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.1/cv3.3/act/Sigmoid_215_Mul_/dark5/dark5.1/cv3.3/act/Mul_192
      var       - node[92]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[92], VSI_NN_OP_SWISH, 1, 1, 192);
    node[92]->nn_param.swish.type = VSI_NN_SWISH;
    node[92]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/dark5/dark5.1/Concat_176
      var       - node[93]
      name      - Concat_/dark5/dark5.1/Concat
      operation - concat
      input     - [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 256, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[93], VSI_NN_OP_CONCAT, 4, 1, 176);
    node[93]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/dark5/dark5.1/cv4/conv/Conv_162
      var       - node[94]
      name      - Conv_/dark5/dark5.1/cv4/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 1024]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[94], VSI_NN_OP_CONV2D, 3, 1, 162);
    node[94]->nn_param.conv2d.ksize[0] = 1;
    node[94]->nn_param.conv2d.ksize[1] = 1;
    node[94]->nn_param.conv2d.weights = 1024;
    node[94]->nn_param.conv2d.stride[0] = 1;
    node[94]->nn_param.conv2d.stride[1] = 1;
    node[94]->nn_param.conv2d.pad[0] = 0;
    node[94]->nn_param.conv2d.pad[1] = 0;
    node[94]->nn_param.conv2d.pad[2] = 0;
    node[94]->nn_param.conv2d.pad[3] = 0;
    node[94]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[94]->nn_param.conv2d.group = 1;
    node[94]->nn_param.conv2d.dilation[0] = 1;
    node[94]->nn_param.conv2d.dilation[1] = 1;
    node[94]->nn_param.conv2d.multiplier = 0;
    node[94]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[94]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[94]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/dark5/dark5.1/cv4/act/Sigmoid_163_Mul_/dark5/dark5.1/cv4/act/Mul_140
      var       - node[95]
      name      - swish
      operation - swish
      input     - [20, 20, 1024, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[95], VSI_NN_OP_SWISH, 1, 1, 140);
    node[95]->nn_param.swish.type = VSI_NN_SWISH;
    node[95]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - AveragePool_/coordstt5/avg_pool_y/AveragePool_292
      var       - node[96]
      name      - AveragePool_/coordstt5/avg_pool_y/AveragePool
      operation - pooling
      input     - [20, 20, 1024, 1]
      output    - [20, 1, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[96], VSI_NN_OP_POOL, 1, 1, 292);
    node[96]->nn_param.pool.ksize[0] = 1;
    node[96]->nn_param.pool.ksize[1] = 20;
    node[96]->nn_param.pool.stride[0] = 1;
    node[96]->nn_param.pool.stride[1] = 20;
    node[96]->nn_param.pool.pad[0] = 0;
    node[96]->nn_param.pool.pad[1] = 0;
    node[96]->nn_param.pool.pad[2] = 0;
    node[96]->nn_param.pool.pad[3] = 0;
    node[96]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_AVG_ANDROID;
    node[96]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[96]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - AveragePool_/coordstt5/avg_pool_x/AveragePool_298
      var       - node[97]
      name      - AveragePool_/coordstt5/avg_pool_x/AveragePool
      operation - pooling
      input     - [20, 20, 1024, 1]
      output    - [1, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[97], VSI_NN_OP_POOL, 1, 1, 298);
    node[97]->nn_param.pool.ksize[0] = 20;
    node[97]->nn_param.pool.ksize[1] = 1;
    node[97]->nn_param.pool.stride[0] = 20;
    node[97]->nn_param.pool.stride[1] = 1;
    node[97]->nn_param.pool.pad[0] = 0;
    node[97]->nn_param.pool.pad[1] = 0;
    node[97]->nn_param.pool.pad[2] = 0;
    node[97]->nn_param.pool.pad[3] = 0;
    node[97]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_AVG_ANDROID;
    node[97]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[97]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Concat_/coordstt5/Concat_291_acuity_mark_perm_50
      var       - node[98]
      name      - Concat_/coordstt5/Concat_291_acuity_mark_perm
      operation - permute
      input     - [1, 20, 1024, 1]
      output    - [20, 1, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[98], VSI_NN_OP_PERMUTE, 1, 1, 50);
    node[98]->nn_param.permute.perm = perm_1;
    node[98]->nn_param.permute.dim_num = 4;

    /*-----------------------------------------
      lid       - Concat_/coordstt5/Concat_291
      var       - node[99]
      name      - Concat_/coordstt5/Concat
      operation - concat
      input     - [20, 1, 1024, 1]
                  [20, 1, 1024, 1]
      output    - [40, 1, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[99], VSI_NN_OP_CONCAT, 2, 1, 291);
    node[99]->nn_param.concat.axis = 0;

    /*-----------------------------------------
      lid       - Conv_/coordstt5/conv_1x1/Conv_287
      var       - node[100]
      name      - Conv_/coordstt5/conv_1x1/Conv
      operation - convolution
      input     - [40, 1, 1024, 1]
      filter    - [1, 1, 1024, 64]
      output    - [40, 1, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[100], VSI_NN_OP_CONV2D, 3, 1, 287);
    node[100]->nn_param.conv2d.ksize[0] = 1;
    node[100]->nn_param.conv2d.ksize[1] = 1;
    node[100]->nn_param.conv2d.weights = 64;
    node[100]->nn_param.conv2d.stride[0] = 1;
    node[100]->nn_param.conv2d.stride[1] = 1;
    node[100]->nn_param.conv2d.pad[0] = 0;
    node[100]->nn_param.conv2d.pad[1] = 0;
    node[100]->nn_param.conv2d.pad[2] = 0;
    node[100]->nn_param.conv2d.pad[3] = 0;
    node[100]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[100]->nn_param.conv2d.group = 1;
    node[100]->nn_param.conv2d.dilation[0] = 1;
    node[100]->nn_param.conv2d.dilation[1] = 1;
    node[100]->nn_param.conv2d.multiplier = 0;
    node[100]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[100]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[100]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Relu_/coordstt5/relu/Relu_270
      var       - node[101]
      name      - Relu_/coordstt5/relu/Relu
      operation - relu
      input     - [40, 1, 64, 1]
      output    - [40, 1, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[101], VSI_NN_OP_RELU, 1, 1, 270);

    /*-----------------------------------------
      lid       - Split_/coordstt5/Split_269
      var       - node[102]
      name      - Split_/coordstt5/Split
      operation - split
      input     - [40, 1, 64, 1]
      output    - [20, 1, 64, 1]
                  [20, 1, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[102], VSI_NN_OP_SPLIT, 1, 2, 269);
    node[102]->nn_param.split.axis = 0;
    node[102]->nn_param.split.slices = slices_1;
    node[102]->nn_param.split.slices_num = 2;

    /*-----------------------------------------
      lid       - Conv_/coordstt5/F_h/Conv_241_acuity_mark_perm_48
      var       - node[103]
      name      - Conv_/coordstt5/F_h/Conv_241_acuity_mark_perm
      operation - permute
      input     - [20, 1, 64, 1]
      output    - [1, 20, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[103], VSI_NN_OP_PERMUTE, 1, 1, 48);
    node[103]->nn_param.permute.perm = perm_2;
    node[103]->nn_param.permute.dim_num = 4;

    /*-----------------------------------------
      lid       - Conv_/coordstt5/F_w/Conv_213
      var       - node[104]
      name      - Conv_/coordstt5/F_w/Conv
      operation - convolution
      input     - [20, 1, 64, 1]
      filter    - [1, 1, 64, 1024]
      output    - [20, 1, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[104], VSI_NN_OP_CONV2D, 3, 1, 213);
    node[104]->nn_param.conv2d.ksize[0] = 1;
    node[104]->nn_param.conv2d.ksize[1] = 1;
    node[104]->nn_param.conv2d.weights = 1024;
    node[104]->nn_param.conv2d.stride[0] = 1;
    node[104]->nn_param.conv2d.stride[1] = 1;
    node[104]->nn_param.conv2d.pad[0] = 0;
    node[104]->nn_param.conv2d.pad[1] = 0;
    node[104]->nn_param.conv2d.pad[2] = 0;
    node[104]->nn_param.conv2d.pad[3] = 0;
    node[104]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[104]->nn_param.conv2d.group = 1;
    node[104]->nn_param.conv2d.dilation[0] = 1;
    node[104]->nn_param.conv2d.dilation[1] = 1;
    node[104]->nn_param.conv2d.multiplier = 0;
    node[104]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[104]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[104]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/coordstt5/F_h/Conv_241
      var       - node[105]
      name      - Conv_/coordstt5/F_h/Conv
      operation - convolution
      input     - [1, 20, 64, 1]
      filter    - [1, 1, 64, 1024]
      output    - [1, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[105], VSI_NN_OP_CONV2D, 3, 1, 241);
    node[105]->nn_param.conv2d.ksize[0] = 1;
    node[105]->nn_param.conv2d.ksize[1] = 1;
    node[105]->nn_param.conv2d.weights = 1024;
    node[105]->nn_param.conv2d.stride[0] = 1;
    node[105]->nn_param.conv2d.stride[1] = 1;
    node[105]->nn_param.conv2d.pad[0] = 0;
    node[105]->nn_param.conv2d.pad[1] = 0;
    node[105]->nn_param.conv2d.pad[2] = 0;
    node[105]->nn_param.conv2d.pad[3] = 0;
    node[105]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[105]->nn_param.conv2d.group = 1;
    node[105]->nn_param.conv2d.dilation[0] = 1;
    node[105]->nn_param.conv2d.dilation[1] = 1;
    node[105]->nn_param.conv2d.multiplier = 0;
    node[105]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[105]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[105]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/coordstt5/sigmoid_w/Sigmoid_191
      var       - node[106]
      name      - Sigmoid_/coordstt5/sigmoid_w/Sigmoid
      operation - sigmoid
      input     - [20, 1, 1024, 1]
      output    - [20, 1, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[106], VSI_NN_OP_SIGMOID, 1, 1, 191);

    /*-----------------------------------------
      lid       - Sigmoid_/coordstt5/sigmoid_h/Sigmoid_212
      var       - node[107]
      name      - Sigmoid_/coordstt5/sigmoid_h/Sigmoid
      operation - sigmoid
      input     - [1, 20, 1024, 1]
      output    - [1, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[107], VSI_NN_OP_SIGMOID, 1, 1, 212);

    /*-----------------------------------------
      lid       - Mul_/coordstt5/Mul_174
      var       - node[108]
      name      - Mul_/coordstt5/Mul
      operation - multiply
      input     - [20, 20, 1024, 1]
                  [1, 20, 1024, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[108], VSI_NN_OP_MULTIPLY, 2, 1, 174);
    node[108]->nn_param.multiply.scale = 1;
    node[108]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[108]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;

    /*-----------------------------------------
      lid       - Mul_/coordstt5/Mul_1_161
      var       - node[109]
      name      - Mul_/coordstt5/Mul_1
      operation - multiply
      input     - [20, 20, 1024, 1]
                  [20, 1, 1024, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[109], VSI_NN_OP_MULTIPLY, 2, 1, 161);
    node[109]->nn_param.multiply.scale = 1;
    node[109]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[109]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;

    /*-----------------------------------------
      lid       - Mul_/Mul_139
      var       - node[110]
      name      - Mul_/Mul
      operation - multiply
      input     - [20, 20, 1024, 1]
                  [20, 20, 1024, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[110], VSI_NN_OP_MULTIPLY, 2, 1, 139);
    node[110]->nn_param.multiply.scale = 1;
    node[110]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[110]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;

    /*-----------------------------------------
      lid       - Conv_/conv/Conv_120
      var       - node[111]
      name      - Conv_/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 1024]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[111], VSI_NN_OP_CONV2D, 3, 1, 120);
    node[111]->nn_param.conv2d.ksize[0] = 1;
    node[111]->nn_param.conv2d.ksize[1] = 1;
    node[111]->nn_param.conv2d.weights = 1024;
    node[111]->nn_param.conv2d.stride[0] = 1;
    node[111]->nn_param.conv2d.stride[1] = 1;
    node[111]->nn_param.conv2d.pad[0] = 0;
    node[111]->nn_param.conv2d.pad[1] = 0;
    node[111]->nn_param.conv2d.pad[2] = 0;
    node[111]->nn_param.conv2d.pad[3] = 0;
    node[111]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[111]->nn_param.conv2d.group = 1;
    node[111]->nn_param.conv2d.dilation[0] = 1;
    node[111]->nn_param.conv2d.dilation[1] = 1;
    node[111]->nn_param.conv2d.multiplier = 0;
    node[111]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[111]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[111]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/sppcspc/cv2/conv/Conv_88
      var       - node[112]
      name      - Conv_/sppcspc/cv2/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[112], VSI_NN_OP_CONV2D, 3, 1, 88);
    node[112]->nn_param.conv2d.ksize[0] = 1;
    node[112]->nn_param.conv2d.ksize[1] = 1;
    node[112]->nn_param.conv2d.weights = 512;
    node[112]->nn_param.conv2d.stride[0] = 1;
    node[112]->nn_param.conv2d.stride[1] = 1;
    node[112]->nn_param.conv2d.pad[0] = 0;
    node[112]->nn_param.conv2d.pad[1] = 0;
    node[112]->nn_param.conv2d.pad[2] = 0;
    node[112]->nn_param.conv2d.pad[3] = 0;
    node[112]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[112]->nn_param.conv2d.group = 1;
    node[112]->nn_param.conv2d.dilation[0] = 1;
    node[112]->nn_param.conv2d.dilation[1] = 1;
    node[112]->nn_param.conv2d.multiplier = 0;
    node[112]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[112]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[112]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/sppcspc/cv1/conv/Conv_285
      var       - node[113]
      name      - Conv_/sppcspc/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[113], VSI_NN_OP_CONV2D, 3, 1, 285);
    node[113]->nn_param.conv2d.ksize[0] = 1;
    node[113]->nn_param.conv2d.ksize[1] = 1;
    node[113]->nn_param.conv2d.weights = 512;
    node[113]->nn_param.conv2d.stride[0] = 1;
    node[113]->nn_param.conv2d.stride[1] = 1;
    node[113]->nn_param.conv2d.pad[0] = 0;
    node[113]->nn_param.conv2d.pad[1] = 0;
    node[113]->nn_param.conv2d.pad[2] = 0;
    node[113]->nn_param.conv2d.pad[3] = 0;
    node[113]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[113]->nn_param.conv2d.group = 1;
    node[113]->nn_param.conv2d.dilation[0] = 1;
    node[113]->nn_param.conv2d.dilation[1] = 1;
    node[113]->nn_param.conv2d.multiplier = 0;
    node[113]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[113]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[113]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/sppcspc/cv2/act/Sigmoid_87_Mul_/sppcspc/cv2/act/Mul_86
      var       - node[114]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[114], VSI_NN_OP_SWISH, 1, 1, 86);
    node[114]->nn_param.swish.type = VSI_NN_SWISH;
    node[114]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/sppcspc/cv1/act/Sigmoid_267_Mul_/sppcspc/cv1/act/Mul_266
      var       - node[115]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[115], VSI_NN_OP_SWISH, 1, 1, 266);
    node[115]->nn_param.swish.type = VSI_NN_SWISH;
    node[115]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/sppcspc/cv3/conv/Conv_239
      var       - node[116]
      name      - Conv_/sppcspc/cv3/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [3, 3, 512, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[116], VSI_NN_OP_CONV2D, 3, 1, 239);
    node[116]->nn_param.conv2d.ksize[0] = 3;
    node[116]->nn_param.conv2d.ksize[1] = 3;
    node[116]->nn_param.conv2d.weights = 512;
    node[116]->nn_param.conv2d.stride[0] = 1;
    node[116]->nn_param.conv2d.stride[1] = 1;
    node[116]->nn_param.conv2d.pad[0] = 1;
    node[116]->nn_param.conv2d.pad[1] = 1;
    node[116]->nn_param.conv2d.pad[2] = 1;
    node[116]->nn_param.conv2d.pad[3] = 1;
    node[116]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[116]->nn_param.conv2d.group = 1;
    node[116]->nn_param.conv2d.dilation[0] = 1;
    node[116]->nn_param.conv2d.dilation[1] = 1;
    node[116]->nn_param.conv2d.multiplier = 0;
    node[116]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[116]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[116]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/sppcspc/cv3/act/Sigmoid_240_Mul_/sppcspc/cv3/act/Mul_211
      var       - node[117]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[117], VSI_NN_OP_SWISH, 1, 1, 211);
    node[117]->nn_param.swish.type = VSI_NN_SWISH;
    node[117]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/sppcspc/cv4/conv/Conv_189
      var       - node[118]
      name      - Conv_/sppcspc/cv4/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [1, 1, 512, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[118], VSI_NN_OP_CONV2D, 3, 1, 189);
    node[118]->nn_param.conv2d.ksize[0] = 1;
    node[118]->nn_param.conv2d.ksize[1] = 1;
    node[118]->nn_param.conv2d.weights = 512;
    node[118]->nn_param.conv2d.stride[0] = 1;
    node[118]->nn_param.conv2d.stride[1] = 1;
    node[118]->nn_param.conv2d.pad[0] = 0;
    node[118]->nn_param.conv2d.pad[1] = 0;
    node[118]->nn_param.conv2d.pad[2] = 0;
    node[118]->nn_param.conv2d.pad[3] = 0;
    node[118]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[118]->nn_param.conv2d.group = 1;
    node[118]->nn_param.conv2d.dilation[0] = 1;
    node[118]->nn_param.conv2d.dilation[1] = 1;
    node[118]->nn_param.conv2d.multiplier = 0;
    node[118]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[118]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[118]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/sppcspc/cv4/act/Sigmoid_188_Mul_/sppcspc/cv4/act/Mul_185
      var       - node[119]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[119], VSI_NN_OP_SWISH, 1, 1, 185);
    node[119]->nn_param.swish.type = VSI_NN_SWISH;
    node[119]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - MaxPool_/sppcspc/m.2/MaxPool_173
      var       - node[120]
      name      - MaxPool_/sppcspc/m.2/MaxPool
      operation - pooling
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[120], VSI_NN_OP_POOL, 1, 1, 173);
    node[120]->nn_param.pool.ksize[0] = 13;
    node[120]->nn_param.pool.ksize[1] = 13;
    node[120]->nn_param.pool.stride[0] = 1;
    node[120]->nn_param.pool.stride[1] = 1;
    node[120]->nn_param.pool.pad[0] = 6;
    node[120]->nn_param.pool.pad[1] = 6;
    node[120]->nn_param.pool.pad[2] = 6;
    node[120]->nn_param.pool.pad[3] = 6;
    node[120]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[120]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[120]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - MaxPool_/sppcspc/m.0/MaxPool_186
      var       - node[121]
      name      - MaxPool_/sppcspc/m.0/MaxPool
      operation - pooling
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[121], VSI_NN_OP_POOL, 1, 1, 186);
    node[121]->nn_param.pool.ksize[0] = 5;
    node[121]->nn_param.pool.ksize[1] = 5;
    node[121]->nn_param.pool.stride[0] = 1;
    node[121]->nn_param.pool.stride[1] = 1;
    node[121]->nn_param.pool.pad[0] = 2;
    node[121]->nn_param.pool.pad[1] = 2;
    node[121]->nn_param.pool.pad[2] = 2;
    node[121]->nn_param.pool.pad[3] = 2;
    node[121]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[121]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[121]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - MaxPool_/sppcspc/m.1/MaxPool_187
      var       - node[122]
      name      - MaxPool_/sppcspc/m.1/MaxPool
      operation - pooling
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[122], VSI_NN_OP_POOL, 1, 1, 187);
    node[122]->nn_param.pool.ksize[0] = 9;
    node[122]->nn_param.pool.ksize[1] = 9;
    node[122]->nn_param.pool.stride[0] = 1;
    node[122]->nn_param.pool.stride[1] = 1;
    node[122]->nn_param.pool.pad[0] = 4;
    node[122]->nn_param.pool.pad[1] = 4;
    node[122]->nn_param.pool.pad[2] = 4;
    node[122]->nn_param.pool.pad[3] = 4;
    node[122]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[122]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[122]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Concat_/sppcspc/Concat_172
      var       - node[123]
      name      - Concat_/sppcspc/Concat
      operation - concat
      input     - [20, 20, 512, 1]
                  [20, 20, 512, 1]
                  [20, 20, 512, 1]
                  [20, 20, 512, 1]
      output    - [20, 20, 2048, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[123], VSI_NN_OP_CONCAT, 4, 1, 172);
    node[123]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/sppcspc/cv5/conv/Conv_159
      var       - node[124]
      name      - Conv_/sppcspc/cv5/conv/Conv
      operation - convolution
      input     - [20, 20, 2048, 1]
      filter    - [1, 1, 2048, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[124], VSI_NN_OP_CONV2D, 3, 1, 159);
    node[124]->nn_param.conv2d.ksize[0] = 1;
    node[124]->nn_param.conv2d.ksize[1] = 1;
    node[124]->nn_param.conv2d.weights = 512;
    node[124]->nn_param.conv2d.stride[0] = 1;
    node[124]->nn_param.conv2d.stride[1] = 1;
    node[124]->nn_param.conv2d.pad[0] = 0;
    node[124]->nn_param.conv2d.pad[1] = 0;
    node[124]->nn_param.conv2d.pad[2] = 0;
    node[124]->nn_param.conv2d.pad[3] = 0;
    node[124]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[124]->nn_param.conv2d.group = 1;
    node[124]->nn_param.conv2d.dilation[0] = 1;
    node[124]->nn_param.conv2d.dilation[1] = 1;
    node[124]->nn_param.conv2d.multiplier = 0;
    node[124]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[124]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[124]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/sppcspc/cv5/act/Sigmoid_160_Mul_/sppcspc/cv5/act/Mul_138
      var       - node[125]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[125], VSI_NN_OP_SWISH, 1, 1, 138);
    node[125]->nn_param.swish.type = VSI_NN_SWISH;
    node[125]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/sppcspc/cv6/conv/Conv_137
      var       - node[126]
      name      - Conv_/sppcspc/cv6/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [3, 3, 512, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[126], VSI_NN_OP_CONV2D, 3, 1, 137);
    node[126]->nn_param.conv2d.ksize[0] = 3;
    node[126]->nn_param.conv2d.ksize[1] = 3;
    node[126]->nn_param.conv2d.weights = 512;
    node[126]->nn_param.conv2d.stride[0] = 1;
    node[126]->nn_param.conv2d.stride[1] = 1;
    node[126]->nn_param.conv2d.pad[0] = 1;
    node[126]->nn_param.conv2d.pad[1] = 1;
    node[126]->nn_param.conv2d.pad[2] = 1;
    node[126]->nn_param.conv2d.pad[3] = 1;
    node[126]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[126]->nn_param.conv2d.group = 1;
    node[126]->nn_param.conv2d.dilation[0] = 1;
    node[126]->nn_param.conv2d.dilation[1] = 1;
    node[126]->nn_param.conv2d.multiplier = 0;
    node[126]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[126]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[126]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/sppcspc/cv6/act/Sigmoid_119_Mul_/sppcspc/cv6/act/Mul_118
      var       - node[127]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[127], VSI_NN_OP_SWISH, 1, 1, 118);
    node[127]->nn_param.swish.type = VSI_NN_SWISH;
    node[127]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/sppcspc/Concat_1_85
      var       - node[128]
      name      - Concat_/sppcspc/Concat_1
      operation - concat
      input     - [20, 20, 512, 1]
                  [20, 20, 512, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[128], VSI_NN_OP_CONCAT, 2, 1, 85);
    node[128]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/sppcspc/cv7/conv/Conv_84
      var       - node[129]
      name      - Conv_/sppcspc/cv7/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[129], VSI_NN_OP_CONV2D, 3, 1, 84);
    node[129]->nn_param.conv2d.ksize[0] = 1;
    node[129]->nn_param.conv2d.ksize[1] = 1;
    node[129]->nn_param.conv2d.weights = 512;
    node[129]->nn_param.conv2d.stride[0] = 1;
    node[129]->nn_param.conv2d.stride[1] = 1;
    node[129]->nn_param.conv2d.pad[0] = 0;
    node[129]->nn_param.conv2d.pad[1] = 0;
    node[129]->nn_param.conv2d.pad[2] = 0;
    node[129]->nn_param.conv2d.pad[3] = 0;
    node[129]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[129]->nn_param.conv2d.group = 1;
    node[129]->nn_param.conv2d.dilation[0] = 1;
    node[129]->nn_param.conv2d.dilation[1] = 1;
    node[129]->nn_param.conv2d.multiplier = 0;
    node[129]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[129]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[129]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/sppcspc/cv7/act/Sigmoid_83_Mul_/sppcspc/cv7/act/Mul_82
      var       - node[130]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[130], VSI_NN_OP_SWISH, 1, 1, 82);
    node[130]->nn_param.swish.type = VSI_NN_SWISH;
    node[130]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - GlobalAveragePool_/se/avg_pool/GlobalAveragePool_265
      var       - node[131]
      name      - GlobalAveragePool_/se/avg_pool/GlobalAveragePool
      operation - pooling
      input     - [20, 20, 512, 1]
      output    - [1, 1, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[131], VSI_NN_OP_POOL, 1, 1, 265);
    node[131]->nn_param.pool.ksize[0] = 20;
    node[131]->nn_param.pool.ksize[1] = 20;
    node[131]->nn_param.pool.stride[0] = 1;
    node[131]->nn_param.pool.stride[1] = 1;
    node[131]->nn_param.pool.pad[0] = 0;
    node[131]->nn_param.pool.pad[1] = 0;
    node[131]->nn_param.pool.pad[2] = 0;
    node[131]->nn_param.pool.pad[3] = 0;
    node[131]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_AVG_ANDROID;
    node[131]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[131]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Reshape_/se/Reshape_238
      var       - node[132]
      name      - Reshape_/se/Reshape
      operation - reshape
      input     - [1, 1, 512, 1]
      output    - [512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[132], VSI_NN_OP_RESHAPE2, 1, 1, 238);
    node[132]->nn_param.reshape2.size = shape_1;
    node[132]->nn_param.reshape2.dim_num = 2;

    /*-----------------------------------------
      lid       - MatMul_/se/fc/fc.0/MatMul_210
      var       - node[133]
      name      - MatMul_/se/fc/fc.0/MatMul
      operation - fullconnect
      input     - [512, 1]
      filter    - [512, 32]
      output    - [32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[133], VSI_NN_OP_FCL, 3, 1, 210);
    node[133]->nn_param.fcl.weights = 32;
    node[133]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[133]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[133]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Relu_/se/fc/fc.1/Relu_209
      var       - node[134]
      name      - Relu_/se/fc/fc.1/Relu
      operation - relu
      input     - [32, 1]
      output    - [32, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[134], VSI_NN_OP_RELU, 1, 1, 209);

    /*-----------------------------------------
      lid       - MatMul_/se/fc/fc.2/MatMul_184
      var       - node[135]
      name      - MatMul_/se/fc/fc.2/MatMul
      operation - fullconnect
      input     - [32, 1]
      filter    - [32, 512]
      output    - [512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[135], VSI_NN_OP_FCL, 3, 1, 184);
    node[135]->nn_param.fcl.weights = 512;
    node[135]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[135]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[135]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/se/fc/fc.3/Sigmoid_171
      var       - node[136]
      name      - Sigmoid_/se/fc/fc.3/Sigmoid
      operation - sigmoid
      input     - [512, 1]
      output    - [512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[136], VSI_NN_OP_SIGMOID, 1, 1, 171);

    /*-----------------------------------------
      lid       - Reshape_/se/Reshape_1_170
      var       - node[137]
      name      - Reshape_/se/Reshape_1
      operation - reshape
      input     - [512, 1]
      output    - [1, 1, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[137], VSI_NN_OP_RESHAPE2, 1, 1, 170);
    node[137]->nn_param.reshape2.size = shape_2;
    node[137]->nn_param.reshape2.dim_num = 4;

    /*-----------------------------------------
      lid       - Mul_/se/Mul_155
      var       - node[138]
      name      - Mul_/se/Mul
      operation - multiply
      input     - [20, 20, 512, 1]
                  [1, 1, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[138], VSI_NN_OP_MULTIPLY, 2, 1, 155);
    node[138]->nn_param.multiply.scale = 1;
    node[138]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[138]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;

    /*-----------------------------------------
      lid       - Mul_/Mul_1_154
      var       - node[139]
      name      - Mul_/Mul_1
      operation - multiply
      input     - [20, 20, 512, 1]
                  [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[139], VSI_NN_OP_MULTIPLY, 2, 1, 154);
    node[139]->nn_param.multiply.scale = 1;
    node[139]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[139]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;

    /*-----------------------------------------
      lid       - Conv_/conv_for_P5/conv/Conv_131
      var       - node[140]
      name      - Conv_/conv_for_P5/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[140], VSI_NN_OP_CONV2D, 3, 1, 131);
    node[140]->nn_param.conv2d.ksize[0] = 1;
    node[140]->nn_param.conv2d.ksize[1] = 1;
    node[140]->nn_param.conv2d.weights = 256;
    node[140]->nn_param.conv2d.stride[0] = 1;
    node[140]->nn_param.conv2d.stride[1] = 1;
    node[140]->nn_param.conv2d.pad[0] = 0;
    node[140]->nn_param.conv2d.pad[1] = 0;
    node[140]->nn_param.conv2d.pad[2] = 0;
    node[140]->nn_param.conv2d.pad[3] = 0;
    node[140]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[140]->nn_param.conv2d.group = 1;
    node[140]->nn_param.conv2d.dilation[0] = 1;
    node[140]->nn_param.conv2d.dilation[1] = 1;
    node[140]->nn_param.conv2d.multiplier = 0;
    node[140]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[140]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[140]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv_for_P5/act/Sigmoid_132_Mul_/conv_for_P5/act/Mul_114
      var       - node[141]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[141], VSI_NN_OP_SWISH, 1, 1, 114);
    node[141]->nn_param.swish.type = VSI_NN_SWISH;
    node[141]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Resize_/upsample/Resize_113
      var       - node[142]
      name      - Resize_/upsample/Resize
      operation - image_resize
      input     - [20, 20, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[142], VSI_NN_OP_RESIZE, 1, 1, 113);
    node[142]->nn_param.resize.type = VSI_NN_INTERPOLATION_NEAREST_NEIGHBOR;
    node[142]->nn_param.resize.factor = 0.0;
    node[142]->nn_param.resize.align_corners = FALSE;
    node[142]->nn_param.resize.half_pixel_centers = FALSE;
    node[142]->nn_param.resize.size[0] = 40;
    node[142]->nn_param.resize.size[1] = 40;

    /*-----------------------------------------
      lid       - Concat_/Concat_112
      var       - node[143]
      name      - Concat_/Concat
      operation - concat
      input     - [40, 40, 256, 1]
                  [40, 40, 256, 1]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[143], VSI_NN_OP_CONCAT, 2, 1, 112);
    node[143]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample1/cv1/conv/Conv_100
      var       - node[144]
      name      - Conv_/conv3_for_upsample1/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[144], VSI_NN_OP_CONV2D, 3, 1, 100);
    node[144]->nn_param.conv2d.ksize[0] = 1;
    node[144]->nn_param.conv2d.ksize[1] = 1;
    node[144]->nn_param.conv2d.weights = 256;
    node[144]->nn_param.conv2d.stride[0] = 1;
    node[144]->nn_param.conv2d.stride[1] = 1;
    node[144]->nn_param.conv2d.pad[0] = 0;
    node[144]->nn_param.conv2d.pad[1] = 0;
    node[144]->nn_param.conv2d.pad[2] = 0;
    node[144]->nn_param.conv2d.pad[3] = 0;
    node[144]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[144]->nn_param.conv2d.group = 1;
    node[144]->nn_param.conv2d.dilation[0] = 1;
    node[144]->nn_param.conv2d.dilation[1] = 1;
    node[144]->nn_param.conv2d.multiplier = 0;
    node[144]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[144]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[144]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample1/cv2/conv/Conv_150
      var       - node[145]
      name      - Conv_/conv3_for_upsample1/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[145], VSI_NN_OP_CONV2D, 3, 1, 150);
    node[145]->nn_param.conv2d.ksize[0] = 1;
    node[145]->nn_param.conv2d.ksize[1] = 1;
    node[145]->nn_param.conv2d.weights = 256;
    node[145]->nn_param.conv2d.stride[0] = 1;
    node[145]->nn_param.conv2d.stride[1] = 1;
    node[145]->nn_param.conv2d.pad[0] = 0;
    node[145]->nn_param.conv2d.pad[1] = 0;
    node[145]->nn_param.conv2d.pad[2] = 0;
    node[145]->nn_param.conv2d.pad[3] = 0;
    node[145]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[145]->nn_param.conv2d.group = 1;
    node[145]->nn_param.conv2d.dilation[0] = 1;
    node[145]->nn_param.conv2d.dilation[1] = 1;
    node[145]->nn_param.conv2d.multiplier = 0;
    node[145]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[145]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[145]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample1/cv1/act/Sigmoid_99_Mul_/conv3_for_upsample1/cv1/act/Mul_98
      var       - node[146]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[146], VSI_NN_OP_SWISH, 1, 1, 98);
    node[146]->nn_param.swish.type = VSI_NN_SWISH;
    node[146]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample1/cv2/act/Sigmoid_129_Mul_/conv3_for_upsample1/cv2/act/Mul_128
      var       - node[147]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[147], VSI_NN_OP_SWISH, 1, 1, 128);
    node[147]->nn_param.swish.type = VSI_NN_SWISH;
    node[147]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample1/cv3.0/conv/Conv_148
      var       - node[148]
      name      - Conv_/conv3_for_upsample1/cv3.0/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[148], VSI_NN_OP_CONV2D, 3, 1, 148);
    node[148]->nn_param.conv2d.ksize[0] = 3;
    node[148]->nn_param.conv2d.ksize[1] = 3;
    node[148]->nn_param.conv2d.weights = 128;
    node[148]->nn_param.conv2d.stride[0] = 1;
    node[148]->nn_param.conv2d.stride[1] = 1;
    node[148]->nn_param.conv2d.pad[0] = 1;
    node[148]->nn_param.conv2d.pad[1] = 1;
    node[148]->nn_param.conv2d.pad[2] = 1;
    node[148]->nn_param.conv2d.pad[3] = 1;
    node[148]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[148]->nn_param.conv2d.group = 1;
    node[148]->nn_param.conv2d.dilation[0] = 1;
    node[148]->nn_param.conv2d.dilation[1] = 1;
    node[148]->nn_param.conv2d.multiplier = 0;
    node[148]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[148]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[148]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample1/cv3.0/act/Sigmoid_149_Mul_/conv3_for_upsample1/cv3.0/act/Mul_127
      var       - node[149]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[149], VSI_NN_OP_SWISH, 1, 1, 127);
    node[149]->nn_param.swish.type = VSI_NN_SWISH;
    node[149]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample1/cv3.1/conv/Conv_146
      var       - node[150]
      name      - Conv_/conv3_for_upsample1/cv3.1/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[150], VSI_NN_OP_CONV2D, 3, 1, 146);
    node[150]->nn_param.conv2d.ksize[0] = 3;
    node[150]->nn_param.conv2d.ksize[1] = 3;
    node[150]->nn_param.conv2d.weights = 128;
    node[150]->nn_param.conv2d.stride[0] = 1;
    node[150]->nn_param.conv2d.stride[1] = 1;
    node[150]->nn_param.conv2d.pad[0] = 1;
    node[150]->nn_param.conv2d.pad[1] = 1;
    node[150]->nn_param.conv2d.pad[2] = 1;
    node[150]->nn_param.conv2d.pad[3] = 1;
    node[150]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[150]->nn_param.conv2d.group = 1;
    node[150]->nn_param.conv2d.dilation[0] = 1;
    node[150]->nn_param.conv2d.dilation[1] = 1;
    node[150]->nn_param.conv2d.multiplier = 0;
    node[150]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[150]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[150]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample1/cv3.1/act/Sigmoid_147_Mul_/conv3_for_upsample1/cv3.1/act/Mul_126
      var       - node[151]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[151], VSI_NN_OP_SWISH, 1, 1, 126);
    node[151]->nn_param.swish.type = VSI_NN_SWISH;
    node[151]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample1/cv3.2/conv/Conv_144
      var       - node[152]
      name      - Conv_/conv3_for_upsample1/cv3.2/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[152], VSI_NN_OP_CONV2D, 3, 1, 144);
    node[152]->nn_param.conv2d.ksize[0] = 3;
    node[152]->nn_param.conv2d.ksize[1] = 3;
    node[152]->nn_param.conv2d.weights = 128;
    node[152]->nn_param.conv2d.stride[0] = 1;
    node[152]->nn_param.conv2d.stride[1] = 1;
    node[152]->nn_param.conv2d.pad[0] = 1;
    node[152]->nn_param.conv2d.pad[1] = 1;
    node[152]->nn_param.conv2d.pad[2] = 1;
    node[152]->nn_param.conv2d.pad[3] = 1;
    node[152]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[152]->nn_param.conv2d.group = 1;
    node[152]->nn_param.conv2d.dilation[0] = 1;
    node[152]->nn_param.conv2d.dilation[1] = 1;
    node[152]->nn_param.conv2d.multiplier = 0;
    node[152]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[152]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[152]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample1/cv3.2/act/Sigmoid_145_Mul_/conv3_for_upsample1/cv3.2/act/Mul_125
      var       - node[153]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[153], VSI_NN_OP_SWISH, 1, 1, 125);
    node[153]->nn_param.swish.type = VSI_NN_SWISH;
    node[153]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample1/cv3.3/conv/Conv_142
      var       - node[154]
      name      - Conv_/conv3_for_upsample1/cv3.3/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[154], VSI_NN_OP_CONV2D, 3, 1, 142);
    node[154]->nn_param.conv2d.ksize[0] = 3;
    node[154]->nn_param.conv2d.ksize[1] = 3;
    node[154]->nn_param.conv2d.weights = 128;
    node[154]->nn_param.conv2d.stride[0] = 1;
    node[154]->nn_param.conv2d.stride[1] = 1;
    node[154]->nn_param.conv2d.pad[0] = 1;
    node[154]->nn_param.conv2d.pad[1] = 1;
    node[154]->nn_param.conv2d.pad[2] = 1;
    node[154]->nn_param.conv2d.pad[3] = 1;
    node[154]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[154]->nn_param.conv2d.group = 1;
    node[154]->nn_param.conv2d.dilation[0] = 1;
    node[154]->nn_param.conv2d.dilation[1] = 1;
    node[154]->nn_param.conv2d.multiplier = 0;
    node[154]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[154]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[154]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample1/cv3.3/act/Sigmoid_143_Mul_/conv3_for_upsample1/cv3.3/act/Mul_124
      var       - node[155]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[155], VSI_NN_OP_SWISH, 1, 1, 124);
    node[155]->nn_param.swish.type = VSI_NN_SWISH;
    node[155]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/conv3_for_upsample1/Concat_97
      var       - node[156]
      name      - Concat_/conv3_for_upsample1/Concat
      operation - concat
      input     - [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 256, 1]
                  [40, 40, 256, 1]
      output    - [40, 40, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[156], VSI_NN_OP_CONCAT, 6, 1, 97);
    node[156]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample1/cv4/conv/Conv_96
      var       - node[157]
      name      - Conv_/conv3_for_upsample1/cv4/conv/Conv
      operation - convolution
      input     - [40, 40, 1024, 1]
      filter    - [1, 1, 1024, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[157], VSI_NN_OP_CONV2D, 3, 1, 96);
    node[157]->nn_param.conv2d.ksize[0] = 1;
    node[157]->nn_param.conv2d.ksize[1] = 1;
    node[157]->nn_param.conv2d.weights = 256;
    node[157]->nn_param.conv2d.stride[0] = 1;
    node[157]->nn_param.conv2d.stride[1] = 1;
    node[157]->nn_param.conv2d.pad[0] = 0;
    node[157]->nn_param.conv2d.pad[1] = 0;
    node[157]->nn_param.conv2d.pad[2] = 0;
    node[157]->nn_param.conv2d.pad[3] = 0;
    node[157]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[157]->nn_param.conv2d.group = 1;
    node[157]->nn_param.conv2d.dilation[0] = 1;
    node[157]->nn_param.conv2d.dilation[1] = 1;
    node[157]->nn_param.conv2d.multiplier = 0;
    node[157]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[157]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[157]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample1/cv4/act/Sigmoid_95_Mul_/conv3_for_upsample1/cv4/act/Mul_94
      var       - node[158]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[158], VSI_NN_OP_SWISH, 1, 1, 94);
    node[158]->nn_param.swish.type = VSI_NN_SWISH;
    node[158]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv_for_P4/conv/Conv_93
      var       - node[159]
      name      - Conv_/conv_for_P4/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [1, 1, 256, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[159], VSI_NN_OP_CONV2D, 3, 1, 93);
    node[159]->nn_param.conv2d.ksize[0] = 1;
    node[159]->nn_param.conv2d.ksize[1] = 1;
    node[159]->nn_param.conv2d.weights = 128;
    node[159]->nn_param.conv2d.stride[0] = 1;
    node[159]->nn_param.conv2d.stride[1] = 1;
    node[159]->nn_param.conv2d.pad[0] = 0;
    node[159]->nn_param.conv2d.pad[1] = 0;
    node[159]->nn_param.conv2d.pad[2] = 0;
    node[159]->nn_param.conv2d.pad[3] = 0;
    node[159]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[159]->nn_param.conv2d.group = 1;
    node[159]->nn_param.conv2d.dilation[0] = 1;
    node[159]->nn_param.conv2d.dilation[1] = 1;
    node[159]->nn_param.conv2d.multiplier = 0;
    node[159]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[159]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[159]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv_for_P4/act/Sigmoid_92_Mul_/conv_for_P4/act/Mul_91
      var       - node[160]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[160], VSI_NN_OP_SWISH, 1, 1, 91);
    node[160]->nn_param.swish.type = VSI_NN_SWISH;
    node[160]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Resize_/upsample_1/Resize_90
      var       - node[161]
      name      - Resize_/upsample_1/Resize
      operation - image_resize
      input     - [40, 40, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[161], VSI_NN_OP_RESIZE, 1, 1, 90);
    node[161]->nn_param.resize.type = VSI_NN_INTERPOLATION_NEAREST_NEIGHBOR;
    node[161]->nn_param.resize.factor = 0.0;
    node[161]->nn_param.resize.align_corners = FALSE;
    node[161]->nn_param.resize.half_pixel_centers = FALSE;
    node[161]->nn_param.resize.size[0] = 80;
    node[161]->nn_param.resize.size[1] = 80;

    /*-----------------------------------------
      lid       - Concat_/Concat_1_89
      var       - node[162]
      name      - Concat_/Concat_1
      operation - concat
      input     - [80, 80, 128, 1]
                  [80, 80, 128, 1]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[162], VSI_NN_OP_CONCAT, 2, 1, 89);
    node[162]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample2/cv2/conv/Conv_53
      var       - node[163]
      name      - Conv_/conv3_for_upsample2/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 256, 1]
      filter    - [1, 1, 256, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[163], VSI_NN_OP_CONV2D, 3, 1, 53);
    node[163]->nn_param.conv2d.ksize[0] = 1;
    node[163]->nn_param.conv2d.ksize[1] = 1;
    node[163]->nn_param.conv2d.weights = 128;
    node[163]->nn_param.conv2d.stride[0] = 1;
    node[163]->nn_param.conv2d.stride[1] = 1;
    node[163]->nn_param.conv2d.pad[0] = 0;
    node[163]->nn_param.conv2d.pad[1] = 0;
    node[163]->nn_param.conv2d.pad[2] = 0;
    node[163]->nn_param.conv2d.pad[3] = 0;
    node[163]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[163]->nn_param.conv2d.group = 1;
    node[163]->nn_param.conv2d.dilation[0] = 1;
    node[163]->nn_param.conv2d.dilation[1] = 1;
    node[163]->nn_param.conv2d.multiplier = 0;
    node[163]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[163]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[163]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample2/cv1/conv/Conv_55
      var       - node[164]
      name      - Conv_/conv3_for_upsample2/cv1/conv/Conv
      operation - convolution
      input     - [80, 80, 256, 1]
      filter    - [1, 1, 256, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[164], VSI_NN_OP_CONV2D, 3, 1, 55);
    node[164]->nn_param.conv2d.ksize[0] = 1;
    node[164]->nn_param.conv2d.ksize[1] = 1;
    node[164]->nn_param.conv2d.weights = 128;
    node[164]->nn_param.conv2d.stride[0] = 1;
    node[164]->nn_param.conv2d.stride[1] = 1;
    node[164]->nn_param.conv2d.pad[0] = 0;
    node[164]->nn_param.conv2d.pad[1] = 0;
    node[164]->nn_param.conv2d.pad[2] = 0;
    node[164]->nn_param.conv2d.pad[3] = 0;
    node[164]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[164]->nn_param.conv2d.group = 1;
    node[164]->nn_param.conv2d.dilation[0] = 1;
    node[164]->nn_param.conv2d.dilation[1] = 1;
    node[164]->nn_param.conv2d.multiplier = 0;
    node[164]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[164]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[164]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample2/cv2/act/Sigmoid_54_Mul_/conv3_for_upsample2/cv2/act/Mul_31
      var       - node[165]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[165], VSI_NN_OP_SWISH, 1, 1, 31);
    node[165]->nn_param.swish.type = VSI_NN_SWISH;
    node[165]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample2/cv1/act/Sigmoid_56_Mul_/conv3_for_upsample2/cv1/act/Mul_32
      var       - node[166]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[166], VSI_NN_OP_SWISH, 1, 1, 32);
    node[166]->nn_param.swish.type = VSI_NN_SWISH;
    node[166]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample2/cv3.0/conv/Conv_51
      var       - node[167]
      name      - Conv_/conv3_for_upsample2/cv3.0/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[167], VSI_NN_OP_CONV2D, 3, 1, 51);
    node[167]->nn_param.conv2d.ksize[0] = 3;
    node[167]->nn_param.conv2d.ksize[1] = 3;
    node[167]->nn_param.conv2d.weights = 64;
    node[167]->nn_param.conv2d.stride[0] = 1;
    node[167]->nn_param.conv2d.stride[1] = 1;
    node[167]->nn_param.conv2d.pad[0] = 1;
    node[167]->nn_param.conv2d.pad[1] = 1;
    node[167]->nn_param.conv2d.pad[2] = 1;
    node[167]->nn_param.conv2d.pad[3] = 1;
    node[167]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[167]->nn_param.conv2d.group = 1;
    node[167]->nn_param.conv2d.dilation[0] = 1;
    node[167]->nn_param.conv2d.dilation[1] = 1;
    node[167]->nn_param.conv2d.multiplier = 0;
    node[167]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[167]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[167]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample2/cv3.0/act/Sigmoid_52_Mul_/conv3_for_upsample2/cv3.0/act/Mul_30
      var       - node[168]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[168], VSI_NN_OP_SWISH, 1, 1, 30);
    node[168]->nn_param.swish.type = VSI_NN_SWISH;
    node[168]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample2/cv3.1/conv/Conv_49
      var       - node[169]
      name      - Conv_/conv3_for_upsample2/cv3.1/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[169], VSI_NN_OP_CONV2D, 3, 1, 49);
    node[169]->nn_param.conv2d.ksize[0] = 3;
    node[169]->nn_param.conv2d.ksize[1] = 3;
    node[169]->nn_param.conv2d.weights = 64;
    node[169]->nn_param.conv2d.stride[0] = 1;
    node[169]->nn_param.conv2d.stride[1] = 1;
    node[169]->nn_param.conv2d.pad[0] = 1;
    node[169]->nn_param.conv2d.pad[1] = 1;
    node[169]->nn_param.conv2d.pad[2] = 1;
    node[169]->nn_param.conv2d.pad[3] = 1;
    node[169]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[169]->nn_param.conv2d.group = 1;
    node[169]->nn_param.conv2d.dilation[0] = 1;
    node[169]->nn_param.conv2d.dilation[1] = 1;
    node[169]->nn_param.conv2d.multiplier = 0;
    node[169]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[169]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[169]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample2/cv3.1/act/Sigmoid_50_Mul_/conv3_for_upsample2/cv3.1/act/Mul_29
      var       - node[170]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[170], VSI_NN_OP_SWISH, 1, 1, 29);
    node[170]->nn_param.swish.type = VSI_NN_SWISH;
    node[170]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample2/cv3.2/conv/Conv_47
      var       - node[171]
      name      - Conv_/conv3_for_upsample2/cv3.2/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[171], VSI_NN_OP_CONV2D, 3, 1, 47);
    node[171]->nn_param.conv2d.ksize[0] = 3;
    node[171]->nn_param.conv2d.ksize[1] = 3;
    node[171]->nn_param.conv2d.weights = 64;
    node[171]->nn_param.conv2d.stride[0] = 1;
    node[171]->nn_param.conv2d.stride[1] = 1;
    node[171]->nn_param.conv2d.pad[0] = 1;
    node[171]->nn_param.conv2d.pad[1] = 1;
    node[171]->nn_param.conv2d.pad[2] = 1;
    node[171]->nn_param.conv2d.pad[3] = 1;
    node[171]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[171]->nn_param.conv2d.group = 1;
    node[171]->nn_param.conv2d.dilation[0] = 1;
    node[171]->nn_param.conv2d.dilation[1] = 1;
    node[171]->nn_param.conv2d.multiplier = 0;
    node[171]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[171]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[171]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample2/cv3.2/act/Sigmoid_48_Mul_/conv3_for_upsample2/cv3.2/act/Mul_28
      var       - node[172]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[172], VSI_NN_OP_SWISH, 1, 1, 28);
    node[172]->nn_param.swish.type = VSI_NN_SWISH;
    node[172]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample2/cv3.3/conv/Conv_45
      var       - node[173]
      name      - Conv_/conv3_for_upsample2/cv3.3/conv/Conv
      operation - convolution
      input     - [80, 80, 64, 1]
      filter    - [3, 3, 64, 64]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[173], VSI_NN_OP_CONV2D, 3, 1, 45);
    node[173]->nn_param.conv2d.ksize[0] = 3;
    node[173]->nn_param.conv2d.ksize[1] = 3;
    node[173]->nn_param.conv2d.weights = 64;
    node[173]->nn_param.conv2d.stride[0] = 1;
    node[173]->nn_param.conv2d.stride[1] = 1;
    node[173]->nn_param.conv2d.pad[0] = 1;
    node[173]->nn_param.conv2d.pad[1] = 1;
    node[173]->nn_param.conv2d.pad[2] = 1;
    node[173]->nn_param.conv2d.pad[3] = 1;
    node[173]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[173]->nn_param.conv2d.group = 1;
    node[173]->nn_param.conv2d.dilation[0] = 1;
    node[173]->nn_param.conv2d.dilation[1] = 1;
    node[173]->nn_param.conv2d.multiplier = 0;
    node[173]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[173]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[173]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample2/cv3.3/act/Sigmoid_46_Mul_/conv3_for_upsample2/cv3.3/act/Mul_27
      var       - node[174]
      name      - swish
      operation - swish
      input     - [80, 80, 64, 1]
      output    - [80, 80, 64, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[174], VSI_NN_OP_SWISH, 1, 1, 27);
    node[174]->nn_param.swish.type = VSI_NN_SWISH;
    node[174]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/conv3_for_upsample2/Concat_22
      var       - node[175]
      name      - Concat_/conv3_for_upsample2/Concat
      operation - concat
      input     - [80, 80, 64, 1]
                  [80, 80, 64, 1]
                  [80, 80, 64, 1]
                  [80, 80, 64, 1]
                  [80, 80, 128, 1]
                  [80, 80, 128, 1]
      output    - [80, 80, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[175], VSI_NN_OP_CONCAT, 6, 1, 22);
    node[175]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_upsample2/cv4/conv/Conv_21
      var       - node[176]
      name      - Conv_/conv3_for_upsample2/cv4/conv/Conv
      operation - convolution
      input     - [80, 80, 512, 1]
      filter    - [1, 1, 512, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[176], VSI_NN_OP_CONV2D, 3, 1, 21);
    node[176]->nn_param.conv2d.ksize[0] = 1;
    node[176]->nn_param.conv2d.ksize[1] = 1;
    node[176]->nn_param.conv2d.weights = 128;
    node[176]->nn_param.conv2d.stride[0] = 1;
    node[176]->nn_param.conv2d.stride[1] = 1;
    node[176]->nn_param.conv2d.pad[0] = 0;
    node[176]->nn_param.conv2d.pad[1] = 0;
    node[176]->nn_param.conv2d.pad[2] = 0;
    node[176]->nn_param.conv2d.pad[3] = 0;
    node[176]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[176]->nn_param.conv2d.group = 1;
    node[176]->nn_param.conv2d.dilation[0] = 1;
    node[176]->nn_param.conv2d.dilation[1] = 1;
    node[176]->nn_param.conv2d.multiplier = 0;
    node[176]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[176]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[176]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_upsample2/cv4/act/Sigmoid_16_Mul_/conv3_for_upsample2/cv4/act/Mul_15
      var       - node[177]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[177], VSI_NN_OP_SWISH, 1, 1, 15);
    node[177]->nn_param.swish.type = VSI_NN_SWISH;
    node[177]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/rep_conv_1/rbr_reparam/Conv_9
      var       - node[178]
      name      - Conv_/rep_conv_1/rbr_reparam/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 256]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[178], VSI_NN_OP_CONV2D, 3, 1, 9);
    node[178]->nn_param.conv2d.ksize[0] = 3;
    node[178]->nn_param.conv2d.ksize[1] = 3;
    node[178]->nn_param.conv2d.weights = 256;
    node[178]->nn_param.conv2d.stride[0] = 1;
    node[178]->nn_param.conv2d.stride[1] = 1;
    node[178]->nn_param.conv2d.pad[0] = 1;
    node[178]->nn_param.conv2d.pad[1] = 1;
    node[178]->nn_param.conv2d.pad[2] = 1;
    node[178]->nn_param.conv2d.pad[3] = 1;
    node[178]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[178]->nn_param.conv2d.group = 1;
    node[178]->nn_param.conv2d.dilation[0] = 1;
    node[178]->nn_param.conv2d.dilation[1] = 1;
    node[178]->nn_param.conv2d.multiplier = 0;
    node[178]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[178]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[178]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - MaxPool_/down_sample1/mp/m/MaxPool_105
      var       - node[179]
      name      - MaxPool_/down_sample1/mp/m/MaxPool
      operation - pooling
      input     - [80, 80, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[179], VSI_NN_OP_POOL, 1, 1, 105);
    node[179]->nn_param.pool.ksize[0] = 2;
    node[179]->nn_param.pool.ksize[1] = 2;
    node[179]->nn_param.pool.stride[0] = 2;
    node[179]->nn_param.pool.stride[1] = 2;
    node[179]->nn_param.pool.pad[0] = 0;
    node[179]->nn_param.pool.pad[1] = 0;
    node[179]->nn_param.pool.pad[2] = 0;
    node[179]->nn_param.pool.pad[3] = 0;
    node[179]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[179]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[179]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/down_sample1/cv2/conv/Conv_111
      var       - node[180]
      name      - Conv_/down_sample1/cv2/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [1, 1, 128, 128]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[180], VSI_NN_OP_CONV2D, 3, 1, 111);
    node[180]->nn_param.conv2d.ksize[0] = 1;
    node[180]->nn_param.conv2d.ksize[1] = 1;
    node[180]->nn_param.conv2d.weights = 128;
    node[180]->nn_param.conv2d.stride[0] = 1;
    node[180]->nn_param.conv2d.stride[1] = 1;
    node[180]->nn_param.conv2d.pad[0] = 0;
    node[180]->nn_param.conv2d.pad[1] = 0;
    node[180]->nn_param.conv2d.pad[2] = 0;
    node[180]->nn_param.conv2d.pad[3] = 0;
    node[180]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[180]->nn_param.conv2d.group = 1;
    node[180]->nn_param.conv2d.dilation[0] = 1;
    node[180]->nn_param.conv2d.dilation[1] = 1;
    node[180]->nn_param.conv2d.multiplier = 0;
    node[180]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[180]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[180]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/rep_conv_1/act/Sigmoid_10_Mul_/rep_conv_1/act/Mul_6
      var       - node[181]
      name      - swish
      operation - swish
      input     - [80, 80, 256, 1]
      output    - [80, 80, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[181], VSI_NN_OP_SWISH, 1, 1, 6);
    node[181]->nn_param.swish.type = VSI_NN_SWISH;
    node[181]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/down_sample1/cv1/conv/Conv_104
      var       - node[182]
      name      - Conv_/down_sample1/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [1, 1, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[182], VSI_NN_OP_CONV2D, 3, 1, 104);
    node[182]->nn_param.conv2d.ksize[0] = 1;
    node[182]->nn_param.conv2d.ksize[1] = 1;
    node[182]->nn_param.conv2d.weights = 128;
    node[182]->nn_param.conv2d.stride[0] = 1;
    node[182]->nn_param.conv2d.stride[1] = 1;
    node[182]->nn_param.conv2d.pad[0] = 0;
    node[182]->nn_param.conv2d.pad[1] = 0;
    node[182]->nn_param.conv2d.pad[2] = 0;
    node[182]->nn_param.conv2d.pad[3] = 0;
    node[182]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[182]->nn_param.conv2d.group = 1;
    node[182]->nn_param.conv2d.dilation[0] = 1;
    node[182]->nn_param.conv2d.dilation[1] = 1;
    node[182]->nn_param.conv2d.multiplier = 0;
    node[182]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[182]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[182]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/down_sample1/cv2/act/Sigmoid_110_Mul_/down_sample1/cv2/act/Mul_109
      var       - node[183]
      name      - swish
      operation - swish
      input     - [80, 80, 128, 1]
      output    - [80, 80, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[183], VSI_NN_OP_SWISH, 1, 1, 109);
    node[183]->nn_param.swish.type = VSI_NN_SWISH;
    node[183]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/yolo_head_P3/Conv_3
      var       - node[184]
      name      - Conv_/yolo_head_P3/Conv
      operation - convolution
      input     - [80, 80, 256, 1]
      filter    - [1, 1, 256, 18]
      output    - [80, 80, 18, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[184], VSI_NN_OP_CONV2D, 3, 1, 3);
    node[184]->nn_param.conv2d.ksize[0] = 1;
    node[184]->nn_param.conv2d.ksize[1] = 1;
    node[184]->nn_param.conv2d.weights = 18;
    node[184]->nn_param.conv2d.stride[0] = 1;
    node[184]->nn_param.conv2d.stride[1] = 1;
    node[184]->nn_param.conv2d.pad[0] = 0;
    node[184]->nn_param.conv2d.pad[1] = 0;
    node[184]->nn_param.conv2d.pad[2] = 0;
    node[184]->nn_param.conv2d.pad[3] = 0;
    node[184]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[184]->nn_param.conv2d.group = 1;
    node[184]->nn_param.conv2d.dilation[0] = 1;
    node[184]->nn_param.conv2d.dilation[1] = 1;
    node[184]->nn_param.conv2d.multiplier = 0;
    node[184]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[184]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[184]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/down_sample1/cv1/act/Sigmoid_103_Mul_/down_sample1/cv1/act/Mul_102
      var       - node[185]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[185], VSI_NN_OP_SWISH, 1, 1, 102);
    node[185]->nn_param.swish.type = VSI_NN_SWISH;
    node[185]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/down_sample1/cv3/conv/Conv_108
      var       - node[186]
      name      - Conv_/down_sample1/cv3/conv/Conv
      operation - convolution
      input     - [80, 80, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[186], VSI_NN_OP_CONV2D, 3, 1, 108);
    node[186]->nn_param.conv2d.ksize[0] = 3;
    node[186]->nn_param.conv2d.ksize[1] = 3;
    node[186]->nn_param.conv2d.weights = 128;
    node[186]->nn_param.conv2d.stride[0] = 2;
    node[186]->nn_param.conv2d.stride[1] = 2;
    node[186]->nn_param.conv2d.pad[0] = 1;
    node[186]->nn_param.conv2d.pad[1] = 1;
    node[186]->nn_param.conv2d.pad[2] = 1;
    node[186]->nn_param.conv2d.pad[3] = 1;
    node[186]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[186]->nn_param.conv2d.group = 1;
    node[186]->nn_param.conv2d.dilation[0] = 1;
    node[186]->nn_param.conv2d.dilation[1] = 1;
    node[186]->nn_param.conv2d.multiplier = 0;
    node[186]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[186]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[186]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/down_sample1/cv3/act/Sigmoid_107_Mul_/down_sample1/cv3/act/Mul_106
      var       - node[187]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[187], VSI_NN_OP_SWISH, 1, 1, 106);
    node[187]->nn_param.swish.type = VSI_NN_SWISH;
    node[187]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/Concat_2_101
      var       - node[188]
      name      - Concat_/Concat_2
      operation - concat
      input     - [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 256, 1]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[188], VSI_NN_OP_CONCAT, 3, 1, 101);
    node[188]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample1/cv2/conv/Conv_65
      var       - node[189]
      name      - Conv_/conv3_for_downsample1/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[189], VSI_NN_OP_CONV2D, 3, 1, 65);
    node[189]->nn_param.conv2d.ksize[0] = 1;
    node[189]->nn_param.conv2d.ksize[1] = 1;
    node[189]->nn_param.conv2d.weights = 256;
    node[189]->nn_param.conv2d.stride[0] = 1;
    node[189]->nn_param.conv2d.stride[1] = 1;
    node[189]->nn_param.conv2d.pad[0] = 0;
    node[189]->nn_param.conv2d.pad[1] = 0;
    node[189]->nn_param.conv2d.pad[2] = 0;
    node[189]->nn_param.conv2d.pad[3] = 0;
    node[189]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[189]->nn_param.conv2d.group = 1;
    node[189]->nn_param.conv2d.dilation[0] = 1;
    node[189]->nn_param.conv2d.dilation[1] = 1;
    node[189]->nn_param.conv2d.multiplier = 0;
    node[189]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[189]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[189]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample1/cv1/conv/Conv_67
      var       - node[190]
      name      - Conv_/conv3_for_downsample1/cv1/conv/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[190], VSI_NN_OP_CONV2D, 3, 1, 67);
    node[190]->nn_param.conv2d.ksize[0] = 1;
    node[190]->nn_param.conv2d.ksize[1] = 1;
    node[190]->nn_param.conv2d.weights = 256;
    node[190]->nn_param.conv2d.stride[0] = 1;
    node[190]->nn_param.conv2d.stride[1] = 1;
    node[190]->nn_param.conv2d.pad[0] = 0;
    node[190]->nn_param.conv2d.pad[1] = 0;
    node[190]->nn_param.conv2d.pad[2] = 0;
    node[190]->nn_param.conv2d.pad[3] = 0;
    node[190]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[190]->nn_param.conv2d.group = 1;
    node[190]->nn_param.conv2d.dilation[0] = 1;
    node[190]->nn_param.conv2d.dilation[1] = 1;
    node[190]->nn_param.conv2d.multiplier = 0;
    node[190]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[190]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[190]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample1/cv2/act/Sigmoid_66_Mul_/conv3_for_downsample1/cv2/act/Mul_37
      var       - node[191]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[191], VSI_NN_OP_SWISH, 1, 1, 37);
    node[191]->nn_param.swish.type = VSI_NN_SWISH;
    node[191]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample1/cv1/act/Sigmoid_68_Mul_/conv3_for_downsample1/cv1/act/Mul_38
      var       - node[192]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[192], VSI_NN_OP_SWISH, 1, 1, 38);
    node[192]->nn_param.swish.type = VSI_NN_SWISH;
    node[192]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample1/cv3.0/conv/Conv_63
      var       - node[193]
      name      - Conv_/conv3_for_downsample1/cv3.0/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[193], VSI_NN_OP_CONV2D, 3, 1, 63);
    node[193]->nn_param.conv2d.ksize[0] = 3;
    node[193]->nn_param.conv2d.ksize[1] = 3;
    node[193]->nn_param.conv2d.weights = 128;
    node[193]->nn_param.conv2d.stride[0] = 1;
    node[193]->nn_param.conv2d.stride[1] = 1;
    node[193]->nn_param.conv2d.pad[0] = 1;
    node[193]->nn_param.conv2d.pad[1] = 1;
    node[193]->nn_param.conv2d.pad[2] = 1;
    node[193]->nn_param.conv2d.pad[3] = 1;
    node[193]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[193]->nn_param.conv2d.group = 1;
    node[193]->nn_param.conv2d.dilation[0] = 1;
    node[193]->nn_param.conv2d.dilation[1] = 1;
    node[193]->nn_param.conv2d.multiplier = 0;
    node[193]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[193]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[193]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample1/cv3.0/act/Sigmoid_64_Mul_/conv3_for_downsample1/cv3.0/act/Mul_36
      var       - node[194]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[194], VSI_NN_OP_SWISH, 1, 1, 36);
    node[194]->nn_param.swish.type = VSI_NN_SWISH;
    node[194]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample1/cv3.1/conv/Conv_61
      var       - node[195]
      name      - Conv_/conv3_for_downsample1/cv3.1/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[195], VSI_NN_OP_CONV2D, 3, 1, 61);
    node[195]->nn_param.conv2d.ksize[0] = 3;
    node[195]->nn_param.conv2d.ksize[1] = 3;
    node[195]->nn_param.conv2d.weights = 128;
    node[195]->nn_param.conv2d.stride[0] = 1;
    node[195]->nn_param.conv2d.stride[1] = 1;
    node[195]->nn_param.conv2d.pad[0] = 1;
    node[195]->nn_param.conv2d.pad[1] = 1;
    node[195]->nn_param.conv2d.pad[2] = 1;
    node[195]->nn_param.conv2d.pad[3] = 1;
    node[195]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[195]->nn_param.conv2d.group = 1;
    node[195]->nn_param.conv2d.dilation[0] = 1;
    node[195]->nn_param.conv2d.dilation[1] = 1;
    node[195]->nn_param.conv2d.multiplier = 0;
    node[195]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[195]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[195]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample1/cv3.1/act/Sigmoid_62_Mul_/conv3_for_downsample1/cv3.1/act/Mul_35
      var       - node[196]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[196], VSI_NN_OP_SWISH, 1, 1, 35);
    node[196]->nn_param.swish.type = VSI_NN_SWISH;
    node[196]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample1/cv3.2/conv/Conv_59
      var       - node[197]
      name      - Conv_/conv3_for_downsample1/cv3.2/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[197], VSI_NN_OP_CONV2D, 3, 1, 59);
    node[197]->nn_param.conv2d.ksize[0] = 3;
    node[197]->nn_param.conv2d.ksize[1] = 3;
    node[197]->nn_param.conv2d.weights = 128;
    node[197]->nn_param.conv2d.stride[0] = 1;
    node[197]->nn_param.conv2d.stride[1] = 1;
    node[197]->nn_param.conv2d.pad[0] = 1;
    node[197]->nn_param.conv2d.pad[1] = 1;
    node[197]->nn_param.conv2d.pad[2] = 1;
    node[197]->nn_param.conv2d.pad[3] = 1;
    node[197]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[197]->nn_param.conv2d.group = 1;
    node[197]->nn_param.conv2d.dilation[0] = 1;
    node[197]->nn_param.conv2d.dilation[1] = 1;
    node[197]->nn_param.conv2d.multiplier = 0;
    node[197]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[197]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[197]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample1/cv3.2/act/Sigmoid_60_Mul_/conv3_for_downsample1/cv3.2/act/Mul_34
      var       - node[198]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[198], VSI_NN_OP_SWISH, 1, 1, 34);
    node[198]->nn_param.swish.type = VSI_NN_SWISH;
    node[198]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample1/cv3.3/conv/Conv_57
      var       - node[199]
      name      - Conv_/conv3_for_downsample1/cv3.3/conv/Conv
      operation - convolution
      input     - [40, 40, 128, 1]
      filter    - [3, 3, 128, 128]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[199], VSI_NN_OP_CONV2D, 3, 1, 57);
    node[199]->nn_param.conv2d.ksize[0] = 3;
    node[199]->nn_param.conv2d.ksize[1] = 3;
    node[199]->nn_param.conv2d.weights = 128;
    node[199]->nn_param.conv2d.stride[0] = 1;
    node[199]->nn_param.conv2d.stride[1] = 1;
    node[199]->nn_param.conv2d.pad[0] = 1;
    node[199]->nn_param.conv2d.pad[1] = 1;
    node[199]->nn_param.conv2d.pad[2] = 1;
    node[199]->nn_param.conv2d.pad[3] = 1;
    node[199]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[199]->nn_param.conv2d.group = 1;
    node[199]->nn_param.conv2d.dilation[0] = 1;
    node[199]->nn_param.conv2d.dilation[1] = 1;
    node[199]->nn_param.conv2d.multiplier = 0;
    node[199]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[199]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[199]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample1/cv3.3/act/Sigmoid_58_Mul_/conv3_for_downsample1/cv3.3/act/Mul_33
      var       - node[200]
      name      - swish
      operation - swish
      input     - [40, 40, 128, 1]
      output    - [40, 40, 128, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[200], VSI_NN_OP_SWISH, 1, 1, 33);
    node[200]->nn_param.swish.type = VSI_NN_SWISH;
    node[200]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/conv3_for_downsample1/Concat_24
      var       - node[201]
      name      - Concat_/conv3_for_downsample1/Concat
      operation - concat
      input     - [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 128, 1]
                  [40, 40, 256, 1]
                  [40, 40, 256, 1]
      output    - [40, 40, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[201], VSI_NN_OP_CONCAT, 6, 1, 24);
    node[201]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample1/cv4/conv/Conv_23
      var       - node[202]
      name      - Conv_/conv3_for_downsample1/cv4/conv/Conv
      operation - convolution
      input     - [40, 40, 1024, 1]
      filter    - [1, 1, 1024, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[202], VSI_NN_OP_CONV2D, 3, 1, 23);
    node[202]->nn_param.conv2d.ksize[0] = 1;
    node[202]->nn_param.conv2d.ksize[1] = 1;
    node[202]->nn_param.conv2d.weights = 256;
    node[202]->nn_param.conv2d.stride[0] = 1;
    node[202]->nn_param.conv2d.stride[1] = 1;
    node[202]->nn_param.conv2d.pad[0] = 0;
    node[202]->nn_param.conv2d.pad[1] = 0;
    node[202]->nn_param.conv2d.pad[2] = 0;
    node[202]->nn_param.conv2d.pad[3] = 0;
    node[202]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[202]->nn_param.conv2d.group = 1;
    node[202]->nn_param.conv2d.dilation[0] = 1;
    node[202]->nn_param.conv2d.dilation[1] = 1;
    node[202]->nn_param.conv2d.multiplier = 0;
    node[202]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[202]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[202]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample1/cv4/act/Sigmoid_18_Mul_/conv3_for_downsample1/cv4/act/Mul_17
      var       - node[203]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[203], VSI_NN_OP_SWISH, 1, 1, 17);
    node[203]->nn_param.swish.type = VSI_NN_SWISH;
    node[203]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/rep_conv_2/rbr_reparam/Conv_11
      var       - node[204]
      name      - Conv_/rep_conv_2/rbr_reparam/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 512]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[204], VSI_NN_OP_CONV2D, 3, 1, 11);
    node[204]->nn_param.conv2d.ksize[0] = 3;
    node[204]->nn_param.conv2d.ksize[1] = 3;
    node[204]->nn_param.conv2d.weights = 512;
    node[204]->nn_param.conv2d.stride[0] = 1;
    node[204]->nn_param.conv2d.stride[1] = 1;
    node[204]->nn_param.conv2d.pad[0] = 1;
    node[204]->nn_param.conv2d.pad[1] = 1;
    node[204]->nn_param.conv2d.pad[2] = 1;
    node[204]->nn_param.conv2d.pad[3] = 1;
    node[204]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[204]->nn_param.conv2d.group = 1;
    node[204]->nn_param.conv2d.dilation[0] = 1;
    node[204]->nn_param.conv2d.dilation[1] = 1;
    node[204]->nn_param.conv2d.multiplier = 0;
    node[204]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[204]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[204]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - MaxPool_/down_sample2/mp/m/MaxPool_136
      var       - node[205]
      name      - MaxPool_/down_sample2/mp/m/MaxPool
      operation - pooling
      input     - [40, 40, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[205], VSI_NN_OP_POOL, 1, 1, 136);
    node[205]->nn_param.pool.ksize[0] = 2;
    node[205]->nn_param.pool.ksize[1] = 2;
    node[205]->nn_param.pool.stride[0] = 2;
    node[205]->nn_param.pool.stride[1] = 2;
    node[205]->nn_param.pool.pad[0] = 0;
    node[205]->nn_param.pool.pad[1] = 0;
    node[205]->nn_param.pool.pad[2] = 0;
    node[205]->nn_param.pool.pad[3] = 0;
    node[205]->nn_param.pool.type = VX_CONVOLUTIONAL_NETWORK_POOLING_MAX;
    node[205]->nn_param.pool.round_type = VSI_NN_ROUND_FLOOR;
    node[205]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/down_sample2/cv2/conv/Conv_158
      var       - node[206]
      name      - Conv_/down_sample2/cv2/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [1, 1, 256, 256]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[206], VSI_NN_OP_CONV2D, 3, 1, 158);
    node[206]->nn_param.conv2d.ksize[0] = 1;
    node[206]->nn_param.conv2d.ksize[1] = 1;
    node[206]->nn_param.conv2d.weights = 256;
    node[206]->nn_param.conv2d.stride[0] = 1;
    node[206]->nn_param.conv2d.stride[1] = 1;
    node[206]->nn_param.conv2d.pad[0] = 0;
    node[206]->nn_param.conv2d.pad[1] = 0;
    node[206]->nn_param.conv2d.pad[2] = 0;
    node[206]->nn_param.conv2d.pad[3] = 0;
    node[206]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[206]->nn_param.conv2d.group = 1;
    node[206]->nn_param.conv2d.dilation[0] = 1;
    node[206]->nn_param.conv2d.dilation[1] = 1;
    node[206]->nn_param.conv2d.multiplier = 0;
    node[206]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[206]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[206]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/rep_conv_2/act/Sigmoid_12_Mul_/rep_conv_2/act/Mul_7
      var       - node[207]
      name      - swish
      operation - swish
      input     - [40, 40, 512, 1]
      output    - [40, 40, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[207], VSI_NN_OP_SWISH, 1, 1, 7);
    node[207]->nn_param.swish.type = VSI_NN_SWISH;
    node[207]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/down_sample2/cv1/conv/Conv_135
      var       - node[208]
      name      - Conv_/down_sample2/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [1, 1, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[208], VSI_NN_OP_CONV2D, 3, 1, 135);
    node[208]->nn_param.conv2d.ksize[0] = 1;
    node[208]->nn_param.conv2d.ksize[1] = 1;
    node[208]->nn_param.conv2d.weights = 256;
    node[208]->nn_param.conv2d.stride[0] = 1;
    node[208]->nn_param.conv2d.stride[1] = 1;
    node[208]->nn_param.conv2d.pad[0] = 0;
    node[208]->nn_param.conv2d.pad[1] = 0;
    node[208]->nn_param.conv2d.pad[2] = 0;
    node[208]->nn_param.conv2d.pad[3] = 0;
    node[208]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[208]->nn_param.conv2d.group = 1;
    node[208]->nn_param.conv2d.dilation[0] = 1;
    node[208]->nn_param.conv2d.dilation[1] = 1;
    node[208]->nn_param.conv2d.multiplier = 0;
    node[208]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[208]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[208]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/down_sample2/cv2/act/Sigmoid_157_Mul_/down_sample2/cv2/act/Mul_156
      var       - node[209]
      name      - swish
      operation - swish
      input     - [40, 40, 256, 1]
      output    - [40, 40, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[209], VSI_NN_OP_SWISH, 1, 1, 156);
    node[209]->nn_param.swish.type = VSI_NN_SWISH;
    node[209]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/yolo_head_P4/Conv_4
      var       - node[210]
      name      - Conv_/yolo_head_P4/Conv
      operation - convolution
      input     - [40, 40, 512, 1]
      filter    - [1, 1, 512, 18]
      output    - [40, 40, 18, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[210], VSI_NN_OP_CONV2D, 3, 1, 4);
    node[210]->nn_param.conv2d.ksize[0] = 1;
    node[210]->nn_param.conv2d.ksize[1] = 1;
    node[210]->nn_param.conv2d.weights = 18;
    node[210]->nn_param.conv2d.stride[0] = 1;
    node[210]->nn_param.conv2d.stride[1] = 1;
    node[210]->nn_param.conv2d.pad[0] = 0;
    node[210]->nn_param.conv2d.pad[1] = 0;
    node[210]->nn_param.conv2d.pad[2] = 0;
    node[210]->nn_param.conv2d.pad[3] = 0;
    node[210]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[210]->nn_param.conv2d.group = 1;
    node[210]->nn_param.conv2d.dilation[0] = 1;
    node[210]->nn_param.conv2d.dilation[1] = 1;
    node[210]->nn_param.conv2d.multiplier = 0;
    node[210]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[210]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[210]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/down_sample2/cv1/act/Sigmoid_117_Mul_/down_sample2/cv1/act/Mul_116
      var       - node[211]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[211], VSI_NN_OP_SWISH, 1, 1, 116);
    node[211]->nn_param.swish.type = VSI_NN_SWISH;
    node[211]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/down_sample2/cv3/conv/Conv_133
      var       - node[212]
      name      - Conv_/down_sample2/cv3/conv/Conv
      operation - convolution
      input     - [40, 40, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[212], VSI_NN_OP_CONV2D, 3, 1, 133);
    node[212]->nn_param.conv2d.ksize[0] = 3;
    node[212]->nn_param.conv2d.ksize[1] = 3;
    node[212]->nn_param.conv2d.weights = 256;
    node[212]->nn_param.conv2d.stride[0] = 2;
    node[212]->nn_param.conv2d.stride[1] = 2;
    node[212]->nn_param.conv2d.pad[0] = 1;
    node[212]->nn_param.conv2d.pad[1] = 1;
    node[212]->nn_param.conv2d.pad[2] = 1;
    node[212]->nn_param.conv2d.pad[3] = 1;
    node[212]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[212]->nn_param.conv2d.group = 1;
    node[212]->nn_param.conv2d.dilation[0] = 1;
    node[212]->nn_param.conv2d.dilation[1] = 1;
    node[212]->nn_param.conv2d.multiplier = 0;
    node[212]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[212]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[212]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/down_sample2/cv3/act/Sigmoid_134_Mul_/down_sample2/cv3/act/Mul_115
      var       - node[213]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[213], VSI_NN_OP_SWISH, 1, 1, 115);
    node[213]->nn_param.swish.type = VSI_NN_SWISH;
    node[213]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/Concat_3_81
      var       - node[214]
      name      - Concat_/Concat_3
      operation - concat
      input     - [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 512, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[214], VSI_NN_OP_CONCAT, 3, 1, 81);
    node[214]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample2/cv2/conv/Conv_77
      var       - node[215]
      name      - Conv_/conv3_for_downsample2/cv2/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[215], VSI_NN_OP_CONV2D, 3, 1, 77);
    node[215]->nn_param.conv2d.ksize[0] = 1;
    node[215]->nn_param.conv2d.ksize[1] = 1;
    node[215]->nn_param.conv2d.weights = 512;
    node[215]->nn_param.conv2d.stride[0] = 1;
    node[215]->nn_param.conv2d.stride[1] = 1;
    node[215]->nn_param.conv2d.pad[0] = 0;
    node[215]->nn_param.conv2d.pad[1] = 0;
    node[215]->nn_param.conv2d.pad[2] = 0;
    node[215]->nn_param.conv2d.pad[3] = 0;
    node[215]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[215]->nn_param.conv2d.group = 1;
    node[215]->nn_param.conv2d.dilation[0] = 1;
    node[215]->nn_param.conv2d.dilation[1] = 1;
    node[215]->nn_param.conv2d.multiplier = 0;
    node[215]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[215]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[215]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample2/cv1/conv/Conv_79
      var       - node[216]
      name      - Conv_/conv3_for_downsample2/cv1/conv/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[216], VSI_NN_OP_CONV2D, 3, 1, 79);
    node[216]->nn_param.conv2d.ksize[0] = 1;
    node[216]->nn_param.conv2d.ksize[1] = 1;
    node[216]->nn_param.conv2d.weights = 512;
    node[216]->nn_param.conv2d.stride[0] = 1;
    node[216]->nn_param.conv2d.stride[1] = 1;
    node[216]->nn_param.conv2d.pad[0] = 0;
    node[216]->nn_param.conv2d.pad[1] = 0;
    node[216]->nn_param.conv2d.pad[2] = 0;
    node[216]->nn_param.conv2d.pad[3] = 0;
    node[216]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[216]->nn_param.conv2d.group = 1;
    node[216]->nn_param.conv2d.dilation[0] = 1;
    node[216]->nn_param.conv2d.dilation[1] = 1;
    node[216]->nn_param.conv2d.multiplier = 0;
    node[216]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[216]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[216]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample2/cv2/act/Sigmoid_78_Mul_/conv3_for_downsample2/cv2/act/Mul_43
      var       - node[217]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[217], VSI_NN_OP_SWISH, 1, 1, 43);
    node[217]->nn_param.swish.type = VSI_NN_SWISH;
    node[217]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample2/cv1/act/Sigmoid_80_Mul_/conv3_for_downsample2/cv1/act/Mul_44
      var       - node[218]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[218], VSI_NN_OP_SWISH, 1, 1, 44);
    node[218]->nn_param.swish.type = VSI_NN_SWISH;
    node[218]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample2/cv3.0/conv/Conv_75
      var       - node[219]
      name      - Conv_/conv3_for_downsample2/cv3.0/conv/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [3, 3, 512, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[219], VSI_NN_OP_CONV2D, 3, 1, 75);
    node[219]->nn_param.conv2d.ksize[0] = 3;
    node[219]->nn_param.conv2d.ksize[1] = 3;
    node[219]->nn_param.conv2d.weights = 256;
    node[219]->nn_param.conv2d.stride[0] = 1;
    node[219]->nn_param.conv2d.stride[1] = 1;
    node[219]->nn_param.conv2d.pad[0] = 1;
    node[219]->nn_param.conv2d.pad[1] = 1;
    node[219]->nn_param.conv2d.pad[2] = 1;
    node[219]->nn_param.conv2d.pad[3] = 1;
    node[219]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[219]->nn_param.conv2d.group = 1;
    node[219]->nn_param.conv2d.dilation[0] = 1;
    node[219]->nn_param.conv2d.dilation[1] = 1;
    node[219]->nn_param.conv2d.multiplier = 0;
    node[219]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[219]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[219]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample2/cv3.0/act/Sigmoid_76_Mul_/conv3_for_downsample2/cv3.0/act/Mul_42
      var       - node[220]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[220], VSI_NN_OP_SWISH, 1, 1, 42);
    node[220]->nn_param.swish.type = VSI_NN_SWISH;
    node[220]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample2/cv3.1/conv/Conv_73
      var       - node[221]
      name      - Conv_/conv3_for_downsample2/cv3.1/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[221], VSI_NN_OP_CONV2D, 3, 1, 73);
    node[221]->nn_param.conv2d.ksize[0] = 3;
    node[221]->nn_param.conv2d.ksize[1] = 3;
    node[221]->nn_param.conv2d.weights = 256;
    node[221]->nn_param.conv2d.stride[0] = 1;
    node[221]->nn_param.conv2d.stride[1] = 1;
    node[221]->nn_param.conv2d.pad[0] = 1;
    node[221]->nn_param.conv2d.pad[1] = 1;
    node[221]->nn_param.conv2d.pad[2] = 1;
    node[221]->nn_param.conv2d.pad[3] = 1;
    node[221]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[221]->nn_param.conv2d.group = 1;
    node[221]->nn_param.conv2d.dilation[0] = 1;
    node[221]->nn_param.conv2d.dilation[1] = 1;
    node[221]->nn_param.conv2d.multiplier = 0;
    node[221]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[221]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[221]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample2/cv3.1/act/Sigmoid_74_Mul_/conv3_for_downsample2/cv3.1/act/Mul_41
      var       - node[222]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[222], VSI_NN_OP_SWISH, 1, 1, 41);
    node[222]->nn_param.swish.type = VSI_NN_SWISH;
    node[222]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample2/cv3.2/conv/Conv_71
      var       - node[223]
      name      - Conv_/conv3_for_downsample2/cv3.2/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[223], VSI_NN_OP_CONV2D, 3, 1, 71);
    node[223]->nn_param.conv2d.ksize[0] = 3;
    node[223]->nn_param.conv2d.ksize[1] = 3;
    node[223]->nn_param.conv2d.weights = 256;
    node[223]->nn_param.conv2d.stride[0] = 1;
    node[223]->nn_param.conv2d.stride[1] = 1;
    node[223]->nn_param.conv2d.pad[0] = 1;
    node[223]->nn_param.conv2d.pad[1] = 1;
    node[223]->nn_param.conv2d.pad[2] = 1;
    node[223]->nn_param.conv2d.pad[3] = 1;
    node[223]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[223]->nn_param.conv2d.group = 1;
    node[223]->nn_param.conv2d.dilation[0] = 1;
    node[223]->nn_param.conv2d.dilation[1] = 1;
    node[223]->nn_param.conv2d.multiplier = 0;
    node[223]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[223]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[223]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample2/cv3.2/act/Sigmoid_72_Mul_/conv3_for_downsample2/cv3.2/act/Mul_40
      var       - node[224]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[224], VSI_NN_OP_SWISH, 1, 1, 40);
    node[224]->nn_param.swish.type = VSI_NN_SWISH;
    node[224]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample2/cv3.3/conv/Conv_69
      var       - node[225]
      name      - Conv_/conv3_for_downsample2/cv3.3/conv/Conv
      operation - convolution
      input     - [20, 20, 256, 1]
      filter    - [3, 3, 256, 256]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[225], VSI_NN_OP_CONV2D, 3, 1, 69);
    node[225]->nn_param.conv2d.ksize[0] = 3;
    node[225]->nn_param.conv2d.ksize[1] = 3;
    node[225]->nn_param.conv2d.weights = 256;
    node[225]->nn_param.conv2d.stride[0] = 1;
    node[225]->nn_param.conv2d.stride[1] = 1;
    node[225]->nn_param.conv2d.pad[0] = 1;
    node[225]->nn_param.conv2d.pad[1] = 1;
    node[225]->nn_param.conv2d.pad[2] = 1;
    node[225]->nn_param.conv2d.pad[3] = 1;
    node[225]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[225]->nn_param.conv2d.group = 1;
    node[225]->nn_param.conv2d.dilation[0] = 1;
    node[225]->nn_param.conv2d.dilation[1] = 1;
    node[225]->nn_param.conv2d.multiplier = 0;
    node[225]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[225]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[225]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample2/cv3.3/act/Sigmoid_70_Mul_/conv3_for_downsample2/cv3.3/act/Mul_39
      var       - node[226]
      name      - swish
      operation - swish
      input     - [20, 20, 256, 1]
      output    - [20, 20, 256, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[226], VSI_NN_OP_SWISH, 1, 1, 39);
    node[226]->nn_param.swish.type = VSI_NN_SWISH;
    node[226]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Concat_/conv3_for_downsample2/Concat_26
      var       - node[227]
      name      - Concat_/conv3_for_downsample2/Concat
      operation - concat
      input     - [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 256, 1]
                  [20, 20, 512, 1]
                  [20, 20, 512, 1]
      output    - [20, 20, 2048, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[227], VSI_NN_OP_CONCAT, 6, 1, 26);
    node[227]->nn_param.concat.axis = 2;

    /*-----------------------------------------
      lid       - Conv_/conv3_for_downsample2/cv4/conv/Conv_25
      var       - node[228]
      name      - Conv_/conv3_for_downsample2/cv4/conv/Conv
      operation - convolution
      input     - [20, 20, 2048, 1]
      filter    - [1, 1, 2048, 512]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[228], VSI_NN_OP_CONV2D, 3, 1, 25);
    node[228]->nn_param.conv2d.ksize[0] = 1;
    node[228]->nn_param.conv2d.ksize[1] = 1;
    node[228]->nn_param.conv2d.weights = 512;
    node[228]->nn_param.conv2d.stride[0] = 1;
    node[228]->nn_param.conv2d.stride[1] = 1;
    node[228]->nn_param.conv2d.pad[0] = 0;
    node[228]->nn_param.conv2d.pad[1] = 0;
    node[228]->nn_param.conv2d.pad[2] = 0;
    node[228]->nn_param.conv2d.pad[3] = 0;
    node[228]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[228]->nn_param.conv2d.group = 1;
    node[228]->nn_param.conv2d.dilation[0] = 1;
    node[228]->nn_param.conv2d.dilation[1] = 1;
    node[228]->nn_param.conv2d.multiplier = 0;
    node[228]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[228]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[228]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/conv3_for_downsample2/cv4/act/Sigmoid_20_Mul_/conv3_for_downsample2/cv4/act/Mul_19
      var       - node[229]
      name      - swish
      operation - swish
      input     - [20, 20, 512, 1]
      output    - [20, 20, 512, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[229], VSI_NN_OP_SWISH, 1, 1, 19);
    node[229]->nn_param.swish.type = VSI_NN_SWISH;
    node[229]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/rep_conv_3/rbr_reparam/Conv_13
      var       - node[230]
      name      - Conv_/rep_conv_3/rbr_reparam/Conv
      operation - convolution
      input     - [20, 20, 512, 1]
      filter    - [3, 3, 512, 1024]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[230], VSI_NN_OP_CONV2D, 3, 1, 13);
    node[230]->nn_param.conv2d.ksize[0] = 3;
    node[230]->nn_param.conv2d.ksize[1] = 3;
    node[230]->nn_param.conv2d.weights = 1024;
    node[230]->nn_param.conv2d.stride[0] = 1;
    node[230]->nn_param.conv2d.stride[1] = 1;
    node[230]->nn_param.conv2d.pad[0] = 1;
    node[230]->nn_param.conv2d.pad[1] = 1;
    node[230]->nn_param.conv2d.pad[2] = 1;
    node[230]->nn_param.conv2d.pad[3] = 1;
    node[230]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[230]->nn_param.conv2d.group = 1;
    node[230]->nn_param.conv2d.dilation[0] = 1;
    node[230]->nn_param.conv2d.dilation[1] = 1;
    node[230]->nn_param.conv2d.multiplier = 0;
    node[230]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[230]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[230]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    /*-----------------------------------------
      lid       - Sigmoid_/rep_conv_3/act/Sigmoid_14_Mul_/rep_conv_3/act/Mul_8
      var       - node[231]
      name      - swish
      operation - swish
      input     - [20, 20, 1024, 1]
      output    - [20, 20, 1024, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[231], VSI_NN_OP_SWISH, 1, 1, 8);
    node[231]->nn_param.swish.type = VSI_NN_SWISH;
    node[231]->nn_param.swish.beta = 1.0;

    /*-----------------------------------------
      lid       - Conv_/yolo_head_P5/Conv_5
      var       - node[232]
      name      - Conv_/yolo_head_P5/Conv
      operation - convolution
      input     - [20, 20, 1024, 1]
      filter    - [1, 1, 1024, 18]
      output    - [20, 20, 18, 1]
    -----------------------------------------*/
    NEW_VXNODE(node[232], VSI_NN_OP_CONV2D, 3, 1, 5);
    node[232]->nn_param.conv2d.ksize[0] = 1;
    node[232]->nn_param.conv2d.ksize[1] = 1;
    node[232]->nn_param.conv2d.weights = 18;
    node[232]->nn_param.conv2d.stride[0] = 1;
    node[232]->nn_param.conv2d.stride[1] = 1;
    node[232]->nn_param.conv2d.pad[0] = 0;
    node[232]->nn_param.conv2d.pad[1] = 0;
    node[232]->nn_param.conv2d.pad[2] = 0;
    node[232]->nn_param.conv2d.pad[3] = 0;
    node[232]->nn_param.conv2d.pad_mode = VSI_NN_PAD_MODE_CONSTANT;
    node[232]->nn_param.conv2d.group = 1;
    node[232]->nn_param.conv2d.dilation[0] = 1;
    node[232]->nn_param.conv2d.dilation[1] = 1;
    node[232]->nn_param.conv2d.multiplier = 0;
    node[232]->vx_param.overflow_policy = VX_CONVERT_POLICY_SATURATE;
    node[232]->vx_param.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
    node[232]->vx_param.down_scale_size_rounding = VX_CONVOLUTIONAL_NETWORK_DS_SIZE_ROUNDING_FLOOR;

    }
    else
    {
    NEW_VXNODE(node[0], VSI_NN_OP_NBG, 1, 3, 0);
    node[0]->nn_param.nbg.type = VSI_NN_NBG_FILE;
    node[0]->nn_param.nbg.url = data_file_name;

    }

/*-----------------------------------------
  Tensor initialize
 -----------------------------------------*/
    attr.dtype.fmt = VSI_NN_DIM_FMT_NCHW;
    /* @attach_Conv_/yolo_head_P5/Conv/out0_0:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 20;
    attr.size[1] = 20;
    attr.size[2] = 18;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.07358036190271378;
    attr.dtype.zero_point = 164;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
#ifdef HHANDLE_OUT_TENSOR
    NEW_HANDLE_TENSOR(norm_tensor[0], attr, VSI_NN_TYPE_UINT8,output_data_1);
#else
    NEW_NORM_TENSOR(norm_tensor[0], attr, VSI_NN_TYPE_UINT8);
#endif

    /* @attach_Conv_/yolo_head_P4/Conv/out0_1:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 40;
    attr.size[1] = 40;
    attr.size[2] = 18;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.07308664917945862;
    attr.dtype.zero_point = 166;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
#ifdef HHANDLE_OUT_TENSOR
    NEW_HANDLE_TENSOR(norm_tensor[1], attr, VSI_NN_TYPE_UINT8,output_data_2);
#else
    NEW_NORM_TENSOR(norm_tensor[1], attr, VSI_NN_TYPE_UINT8);
#endif

    /* @attach_Conv_/yolo_head_P3/Conv/out0_2:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 80;
    attr.size[1] = 80;
    attr.size[2] = 18;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.08372680842876434;
    attr.dtype.zero_point = 164;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
#ifdef HHANDLE_OUT_TENSOR
    NEW_HANDLE_TENSOR(norm_tensor[2], attr, VSI_NN_TYPE_UINT8,output_data_3);
#else
    NEW_NORM_TENSOR(norm_tensor[2], attr, VSI_NN_TYPE_UINT8);
#endif

    /* @images_328:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 640;
    attr.size[1] = 640;
    attr.size[2] = 3;
    attr.size[3] = 1;
    attr.dim_num = 4;
    attr.dtype.scale = 0.003921568859368563;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_NORM_TENSOR(norm_tensor[3], attr, VSI_NN_TYPE_UINT8);



    if( !inference_with_nbg )
    {
    /* @Conv_/stem/stem.0/conv/Conv_326:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 3;
    attr.size[3] = 32;
    attr.dim_num = 4;
    attr.dtype.scale = 0.3656691610813141;
    attr.dtype.zero_point = 141;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[0], attr, VSI_NN_TYPE_UINT8, 37713792, 864);

    /* @Conv_/stem/stem.0/conv/Conv_326:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 32;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0014339968329295516;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[1], attr, VSI_NN_TYPE_INT32, 37713664, 128);

    /* @Conv_/stem/stem.1/conv/Conv_324:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 32;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.010432920418679714;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[2], attr, VSI_NN_TYPE_UINT8, 37714912, 18432);

    /* @Conv_/stem/stem.1/conv/Conv_324:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0014260053867474198;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[3], attr, VSI_NN_TYPE_INT32, 37714656, 256);

    /* @Conv_/stem/stem.2/conv/Conv_319:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.002891071140766144;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[4], attr, VSI_NN_TYPE_UINT8, 37733600, 36864);

    /* @Conv_/stem/stem.2/conv/Conv_319:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00046959868632256985;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[5], attr, VSI_NN_TYPE_INT32, 37733344, 256);

    /* @Conv_/dark2/dark2.0/conv/Conv_306:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.002631127368658781;
    attr.dtype.zero_point = 140;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[6], attr, VSI_NN_TYPE_UINT8, 9656576, 73728);

    /* @Conv_/dark2/dark2.0/conv/Conv_306:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00015485071344301105;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[7], attr, VSI_NN_TYPE_INT32, 9656064, 512);

    /* @Conv_/dark2/dark2.1/cv1/conv/Conv_302:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 128;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0076198456808924675;
    attr.dtype.zero_point = 165;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[8], attr, VSI_NN_TYPE_UINT8, 9730560, 8192);

    /* @Conv_/dark2/dark2.1/cv1/conv/Conv_302:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00035888029378838837;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[9], attr, VSI_NN_TYPE_INT32, 9730304, 256);

    /* @Conv_/dark2/dark2.1/cv2/conv/Conv_311:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 128;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005436065141111612;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[10], attr, VSI_NN_TYPE_UINT8, 9739008, 8192);

    /* @Conv_/dark2/dark2.1/cv2/conv/Conv_311:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.000256028346484527;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[11], attr, VSI_NN_TYPE_INT32, 9738752, 256);

    /* @Conv_/dark2/dark2.1/cv3.0/conv/Conv_317:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007440747227519751;
    attr.dtype.zero_point = 138;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[12], attr, VSI_NN_TYPE_UINT8, 9747456, 36864);

    /* @Conv_/dark2/dark2.1/cv3.0/conv/Conv_317:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00019092645379714668;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[13], attr, VSI_NN_TYPE_INT32, 9747200, 256);

    /* @Conv_/dark2/dark2.1/cv3.1/conv/Conv_309:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.003889642423018813;
    attr.dtype.zero_point = 147;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[14], attr, VSI_NN_TYPE_UINT8, 9784576, 36864);

    /* @Conv_/dark2/dark2.1/cv3.1/conv/Conv_309:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 9.248374408343807e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[15], attr, VSI_NN_TYPE_INT32, 9784320, 256);

    /* @Conv_/dark2/dark2.1/cv3.2/conv/Conv_321:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004320872947573662;
    attr.dtype.zero_point = 130;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[16], attr, VSI_NN_TYPE_UINT8, 9821696, 36864);

    /* @Conv_/dark2/dark2.1/cv3.2/conv/Conv_321:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00011087178427260369;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[17], attr, VSI_NN_TYPE_INT32, 9821440, 256);

    /* @Conv_/dark2/dark2.1/cv3.3/conv/Conv_307:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00866386853158474;
    attr.dtype.zero_point = 159;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[18], attr, VSI_NN_TYPE_UINT8, 9858816, 36864);

    /* @Conv_/dark2/dark2.1/cv3.3/conv/Conv_307:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002035590587183833;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[19], attr, VSI_NN_TYPE_INT32, 9858560, 256);

    /* @Conv_/dark2/dark2.1/cv4/conv/Conv_280:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.009086855687201023;
    attr.dtype.zero_point = 151;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[20], attr, VSI_NN_TYPE_UINT8, 9896704, 65536);

    /* @Conv_/dark2/dark2.1/cv4/conv/Conv_280:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00023316490114666522;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[21], attr, VSI_NN_TYPE_INT32, 9895680, 1024);

    /* @Conv_/dark3/dark3.0/cv2/conv/Conv_290:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007623798213899136;
    attr.dtype.zero_point = 143;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[22], attr, VSI_NN_TYPE_UINT8, 9996032, 32768);

    /* @Conv_/dark3/dark3.0/cv2/conv/Conv_290:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00020890113955829293;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[23], attr, VSI_NN_TYPE_INT32, 9995520, 512);

    /* @Conv_/dark3/dark3.0/cv1/conv/Conv_255:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006677345838397741;
    attr.dtype.zero_point = 144;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[24], attr, VSI_NN_TYPE_UINT8, 9962752, 32768);

    /* @Conv_/dark3/dark3.0/cv1/conv/Conv_255:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001829672110034153;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[25], attr, VSI_NN_TYPE_INT32, 9962240, 512);

    /* @Conv_/dark3/dark3.0/cv3/conv/Conv_253:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.002966087544336915;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[26], attr, VSI_NN_TYPE_UINT8, 10029312, 147456);

    /* @Conv_/dark3/dark3.0/cv3/conv/Conv_253:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 7.330117659876123e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[27], attr, VSI_NN_TYPE_INT32, 10028800, 512);

    /* @Conv_/dark3/dark3.1/cv2/conv/Conv_201:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005213807802647352;
    attr.dtype.zero_point = 118;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[28], attr, VSI_NN_TYPE_UINT8, 10210560, 32768);

    /* @Conv_/dark3/dark3.1/cv2/conv/Conv_201:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00014293286949396133;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[29], attr, VSI_NN_TYPE_INT32, 10210048, 512);

    /* @Conv_/dark3/dark3.1/cv1/conv/Conv_203:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006602211389690638;
    attr.dtype.zero_point = 123;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[30], attr, VSI_NN_TYPE_UINT8, 10177280, 32768);

    /* @Conv_/dark3/dark3.1/cv1/conv/Conv_203:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001809949753805995;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[31], attr, VSI_NN_TYPE_INT32, 10176768, 512);

    /* @Conv_/dark3/dark3.1/cv3.0/conv/Conv_226:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004017851315438747;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[32], attr, VSI_NN_TYPE_UINT8, 10243840, 147456);

    /* @Conv_/dark3/dark3.1/cv3.0/conv/Conv_226:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00011648229701677337;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[33], attr, VSI_NN_TYPE_INT32, 10243328, 512);

    /* @Conv_/dark3/dark3.1/cv3.1/conv/Conv_199:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005502310115844011;
    attr.dtype.zero_point = 130;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[34], attr, VSI_NN_TYPE_UINT8, 10391808, 147456);

    /* @Conv_/dark3/dark3.1/cv3.1/conv/Conv_199:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001218696852447465;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[35], attr, VSI_NN_TYPE_INT32, 10391296, 512);

    /* @Conv_/dark3/dark3.1/cv3.2/conv/Conv_227:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004357900936156511;
    attr.dtype.zero_point = 116;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[36], attr, VSI_NN_TYPE_UINT8, 10539776, 147456);

    /* @Conv_/dark3/dark3.1/cv3.2/conv/Conv_227:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00012634073209483176;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[37], attr, VSI_NN_TYPE_INT32, 10539264, 512);

    /* @Conv_/dark3/dark3.1/cv3.3/conv/Conv_197:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007231116760522127;
    attr.dtype.zero_point = 153;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[38], attr, VSI_NN_TYPE_UINT8, 10687744, 147456);

    /* @Conv_/dark3/dark3.1/cv3.3/conv/Conv_197:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00019193388288840652;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[39], attr, VSI_NN_TYPE_INT32, 10687232, 512);

    /* @Conv_/dark3/dark3.1/cv4/conv/Conv_164:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007894106209278107;
    attr.dtype.zero_point = 141;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[40], attr, VSI_NN_TYPE_UINT8, 10837248, 262144);

    /* @Conv_/dark3/dark3.1/cv4/conv/Conv_164:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00022885954240337014;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[41], attr, VSI_NN_TYPE_INT32, 10835200, 2048);

    /* @Conv_/conv_for_feat1/conv/Conv_123:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006370093207806349;
    attr.dtype.zero_point = 127;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[42], attr, VSI_NN_TYPE_UINT8, 9126400, 65536);

    /* @Conv_/conv_for_feat1/conv/Conv_123:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002074145886581391;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[43], attr, VSI_NN_TYPE_INT32, 9125888, 512);

    /* @Conv_/dark4/dark4.0/cv2/conv/Conv_295:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00655271764844656;
    attr.dtype.zero_point = 135;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[44], attr, VSI_NN_TYPE_UINT8, 11232512, 131072);

    /* @Conv_/dark4/dark4.0/cv2/conv/Conv_295:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002133609668817371;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[45], attr, VSI_NN_TYPE_INT32, 11231488, 1024);

    /* @Conv_/dark4/dark4.0/cv1/conv/Conv_264:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006187625229358673;
    attr.dtype.zero_point = 95;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[46], attr, VSI_NN_TYPE_UINT8, 11100416, 131072);

    /* @Conv_/dark4/dark4.0/cv1/conv/Conv_264:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002014732890529558;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[47], attr, VSI_NN_TYPE_INT32, 11099392, 1024);

    /* @Conv_/dark4/dark4.0/cv3/conv/Conv_284:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0034690655302256346;
    attr.dtype.zero_point = 121;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[48], attr, VSI_NN_TYPE_UINT8, 11364608, 589824);

    /* @Conv_/dark4/dark4.0/cv3/conv/Conv_284:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00012093918485334143;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[49], attr, VSI_NN_TYPE_INT32, 11363584, 1024);

    /* @Conv_/dark4/dark4.1/cv2/conv/Conv_234:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005150179844349623;
    attr.dtype.zero_point = 116;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[50], attr, VSI_NN_TYPE_UINT8, 12087552, 131072);

    /* @Conv_/dark4/dark4.1/cv2/conv/Conv_234:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00014520238619297743;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[51], attr, VSI_NN_TYPE_INT32, 12086528, 1024);

    /* @Conv_/dark4/dark4.1/cv1/conv/Conv_236:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00531929824501276;
    attr.dtype.zero_point = 86;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[52], attr, VSI_NN_TYPE_UINT8, 11955456, 131072);

    /* @Conv_/dark4/dark4.1/cv1/conv/Conv_236:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00014997045218478888;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[53], attr, VSI_NN_TYPE_INT32, 11954432, 1024);

    /* @Conv_/dark4/dark4.1/cv3.0/conv/Conv_279:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004439857788383961;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[54], attr, VSI_NN_TYPE_UINT8, 12219648, 589824);

    /* @Conv_/dark4/dark4.1/cv3.0/conv/Conv_279:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00015558712766505778;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[55], attr, VSI_NN_TYPE_INT32, 12218624, 1024);

    /* @Conv_/dark4/dark4.1/cv3.1/conv/Conv_232:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.003619986353442073;
    attr.dtype.zero_point = 118;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[56], attr, VSI_NN_TYPE_UINT8, 12810496, 589824);

    /* @Conv_/dark4/dark4.1/cv3.1/conv/Conv_232:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 9.012872033054009e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[57], attr, VSI_NN_TYPE_INT32, 12809472, 1024);

    /* @Conv_/dark4/dark4.1/cv3.2/conv/Conv_277:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.002665476640686393;
    attr.dtype.zero_point = 104;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[58], attr, VSI_NN_TYPE_UINT8, 13401344, 589824);

    /* @Conv_/dark4/dark4.1/cv3.2/conv/Conv_277:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 9.340701944893226e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[59], attr, VSI_NN_TYPE_INT32, 13400320, 1024);

    /* @Conv_/dark4/dark4.1/cv3.3/conv/Conv_230:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0030652079731225967;
    attr.dtype.zero_point = 119;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[60], attr, VSI_NN_TYPE_UINT8, 13992192, 589824);

    /* @Conv_/dark4/dark4.1/cv3.3/conv/Conv_230:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 7.750857912469655e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[61], attr, VSI_NN_TYPE_INT32, 13991168, 1024);

    /* @Conv_/dark4/dark4.1/cv4/conv/Conv_168:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 1024;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007417062763124704;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[62], attr, VSI_NN_TYPE_UINT8, 14586112, 1048576);

    /* @Conv_/dark4/dark4.1/cv4/conv/Conv_168:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1024;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00025991813163273036;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[63], attr, VSI_NN_TYPE_INT32, 14582016, 4096);

    /* @Conv_/conv_for_feat2/conv/Conv_152:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007893117144703865;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[64], attr, VSI_NN_TYPE_UINT8, 9192960, 262144);

    /* @Conv_/conv_for_feat2/conv/Conv_152:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00023139799304772168;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[65], attr, VSI_NN_TYPE_INT32, 9191936, 1024);

    /* @Conv_/dark5/dark5.0/cv2/conv/Conv_288:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007450242526829243;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[66], attr, VSI_NN_TYPE_UINT8, 16163072, 524288);

    /* @Conv_/dark5/dark5.0/cv2/conv/Conv_288:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00021841449779458344;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[67], attr, VSI_NN_TYPE_INT32, 16161024, 2048);

    /* @Conv_/dark5/dark5.0/cv1/conv/Conv_249:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00791759230196476;
    attr.dtype.zero_point = 118;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[68], attr, VSI_NN_TYPE_UINT8, 15636736, 524288);

    /* @Conv_/dark5/dark5.0/cv1/conv/Conv_249:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002321136271348223;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[69], attr, VSI_NN_TYPE_INT32, 15634688, 2048);

    /* @Conv_/dark5/dark5.0/cv3/conv/Conv_271:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 512;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0019289356423541903;
    attr.dtype.zero_point = 88;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[70], attr, VSI_NN_TYPE_UINT8, 16689408, 2359296);

    /* @Conv_/dark5/dark5.0/cv3/conv/Conv_271:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 8.219140727305785e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[71], attr, VSI_NN_TYPE_INT32, 16687360, 2048);

    /* @Conv_/dark5/dark5.1/cv1/conv/Conv_195:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00313383131287992;
    attr.dtype.zero_point = 96;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[72], attr, VSI_NN_TYPE_UINT8, 19049728, 262144);

    /* @Conv_/dark5/dark5.1/cv1/conv/Conv_195:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00010471292625879869;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[73], attr, VSI_NN_TYPE_INT32, 19048704, 1024);

    /* @Conv_/dark5/dark5.1/cv2/conv/Conv_218:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005875286180526018;
    attr.dtype.zero_point = 106;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[74], attr, VSI_NN_TYPE_UINT8, 19312896, 262144);

    /* @Conv_/dark5/dark5.1/cv2/conv/Conv_218:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00019631510076578707;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[75], attr, VSI_NN_TYPE_INT32, 19311872, 1024);

    /* @Conv_/dark5/dark5.1/cv3.0/conv/Conv_246:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0034954261500388384;
    attr.dtype.zero_point = 114;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[76], attr, VSI_NN_TYPE_UINT8, 19576064, 589824);

    /* @Conv_/dark5/dark5.1/cv3.0/conv/Conv_246:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00011301047197775915;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[77], attr, VSI_NN_TYPE_INT32, 19575040, 1024);

    /* @Conv_/dark5/dark5.1/cv3.1/conv/Conv_216:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0030689819250255823;
    attr.dtype.zero_point = 113;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[78], attr, VSI_NN_TYPE_UINT8, 20166912, 589824);

    /* @Conv_/dark5/dark5.1/cv3.1/conv/Conv_216:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 7.888011168688536e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[79], attr, VSI_NN_TYPE_INT32, 20165888, 1024);

    /* @Conv_/dark5/dark5.1/cv3.2/conv/Conv_247:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0035958020016551018;
    attr.dtype.zero_point = 88;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[80], attr, VSI_NN_TYPE_UINT8, 20757760, 589824);

    /* @Conv_/dark5/dark5.1/cv3.2/conv/Conv_247:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00011625571642071009;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[81], attr, VSI_NN_TYPE_INT32, 20756736, 1024);

    /* @Conv_/dark5/dark5.1/cv3.3/conv/Conv_214:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00280093215405941;
    attr.dtype.zero_point = 80;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[82], attr, VSI_NN_TYPE_UINT8, 21348608, 589824);

    /* @Conv_/dark5/dark5.1/cv3.3/conv/Conv_214:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 8.4446590335574e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[83], attr, VSI_NN_TYPE_INT32, 21347584, 1024);

    /* @Conv_/dark5/dark5.1/cv4/conv/Conv_162:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 1024;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004184474237263203;
    attr.dtype.zero_point = 98;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[84], attr, VSI_NN_TYPE_UINT8, 21942528, 1048576);

    /* @Conv_/dark5/dark5.1/cv4/conv/Conv_162:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1024;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00013528804993256927;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[85], attr, VSI_NN_TYPE_INT32, 21938432, 4096);

    /* @Conv_/coordstt5/conv_1x1/Conv_287:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0005697677843272686;
    attr.dtype.zero_point = 130;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[86], attr, VSI_NN_TYPE_UINT8, 9590528, 65536);

    /* @Conv_/coordstt5/conv_1x1/Conv_287:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 6.020140972395893e-06;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[87], attr, VSI_NN_TYPE_INT32, 9590272, 256);

    /* @Conv_/coordstt5/F_w/Conv_213:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 64;
    attr.size[3] = 1024;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0005933456122875214;
    attr.dtype.zero_point = 134;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[88], attr, VSI_NN_TYPE_UINT8, 9524736, 65536);

    /* @Conv_/coordstt5/F_w/Conv_213:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1024;
    attr.dim_num = 1;
    attr.dtype.scale = 1.1021497812180314e-06;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[89], attr, VSI_NN_TYPE_INT32, 9455104, 4096);

    /* @Conv_/coordstt5/F_h/Conv_241:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 64;
    attr.size[3] = 1024;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0006245073163881898;
    attr.dtype.zero_point = 135;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[90], attr, VSI_NN_TYPE_UINT8, 9459200, 65536);

    /* @Conv_/coordstt5/F_h/Conv_241:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1024;
    attr.dim_num = 1;
    attr.dtype.scale = 1.160033093583479e-06;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[91], attr, VSI_NN_TYPE_INT32, 9455104, 4096);

    /* @Conv_/conv/Conv_120:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 1024;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0006876587285660207;
    attr.dtype.zero_point = 120;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[92], attr, VSI_NN_TYPE_UINT8, 4096, 1048576);

    /* @Conv_/conv/Conv_120:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1024;
    attr.dim_num = 1;
    attr.dtype.scale = 4.7062312660273165e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[93], attr, VSI_NN_TYPE_INT32, 0, 4096);

    /* @Conv_/sppcspc/cv2/conv/Conv_88:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.011221176944673061;
    attr.dtype.zero_point = 103;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[94], attr, VSI_NN_TYPE_UINT8, 30625536, 524288);

    /* @Conv_/sppcspc/cv2/conv/Conv_88:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00014688960800413042;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[95], attr, VSI_NN_TYPE_INT32, 30623488, 2048);

    /* @Conv_/sppcspc/cv1/conv/Conv_285:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.01404735166579485;
    attr.dtype.zero_point = 127;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[96], attr, VSI_NN_TYPE_UINT8, 30099200, 524288);

    /* @Conv_/sppcspc/cv1/conv/Conv_285:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00018388533499091864;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[97], attr, VSI_NN_TYPE_INT32, 30097152, 2048);

    /* @Conv_/sppcspc/cv3/conv/Conv_239:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 512;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.002118525793775916;
    attr.dtype.zero_point = 98;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[98], attr, VSI_NN_TYPE_UINT8, 31151872, 2359296);

    /* @Conv_/sppcspc/cv3/conv/Conv_239:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 8.946018351707608e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[99], attr, VSI_NN_TYPE_INT32, 31149824, 2048);

    /* @Conv_/sppcspc/cv4/conv/Conv_189:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005247130058705807;
    attr.dtype.zero_point = 100;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[100], attr, VSI_NN_TYPE_UINT8, 33513216, 262144);

    /* @Conv_/sppcspc/cv4/conv/Conv_189:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00013654040230903774;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[101], attr, VSI_NN_TYPE_INT32, 33511168, 2048);

    /* @Conv_/sppcspc/cv5/conv/Conv_159:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 2048;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.008643689565360546;
    attr.dtype.zero_point = 111;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[102], attr, VSI_NN_TYPE_UINT8, 33777408, 1048576);

    /* @Conv_/sppcspc/cv5/conv/Conv_159:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00018779834499582648;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[103], attr, VSI_NN_TYPE_INT32, 33775360, 2048);

    /* @Conv_/sppcspc/cv6/conv/Conv_137:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 512;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.002145068719983101;
    attr.dtype.zero_point = 118;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[104], attr, VSI_NN_TYPE_UINT8, 34828032, 2359296);

    /* @Conv_/sppcspc/cv6/conv/Conv_137:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 4.5260025217430666e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[105], attr, VSI_NN_TYPE_INT32, 34825984, 2048);

    /* @Conv_/sppcspc/cv7/conv/Conv_84:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006967160850763321;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[106], attr, VSI_NN_TYPE_UINT8, 37189376, 524288);

    /* @Conv_/sppcspc/cv7/conv/Conv_84:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.000167358317412436;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[107], attr, VSI_NN_TYPE_INT32, 37187328, 2048);

    /* @MatMul_/se/fc/fc.0/MatMul_210:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.size[1] = 32;
    attr.dim_num = 2;
    attr.dtype.scale = 0.0003149317635688931;
    attr.dtype.zero_point = 127;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[108], attr, VSI_NN_TYPE_UINT8, 37803064, 16384);

    /* @MatMul_/se/fc/fc.0/MatMul_210:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 32;
    attr.dim_num = 1;
    attr.dtype.scale = 9.628450925447396e-07;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[109], attr, VSI_NN_TYPE_INT32, 37802936, 128);

    /* @MatMul_/se/fc/fc.2/MatMul_184:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 32;
    attr.size[1] = 512;
    attr.dim_num = 2;
    attr.dtype.scale = 0.0012595111038535833;
    attr.dtype.zero_point = 127;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[110], attr, VSI_NN_TYPE_UINT8, 37821496, 16384);

    /* @MatMul_/se/fc/fc.2/MatMul_184:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 9.193726668854652e-07;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[111], attr, VSI_NN_TYPE_INT32, 37819448, 2048);

    /* @Conv_/conv_for_P5/conv/Conv_131:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0015674701426178217;
    attr.dtype.zero_point = 141;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[112], attr, VSI_NN_TYPE_UINT8, 8994816, 131072);

    /* @Conv_/conv_for_P5/conv/Conv_131:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00012927190982736647;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[113], attr, VSI_NN_TYPE_INT32, 8993792, 1024);

    /* @Conv_/conv3_for_upsample1/cv1/conv/Conv_100:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.01349818054586649;
    attr.dtype.zero_point = 84;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[114], attr, VSI_NN_TYPE_UINT8, 7376896, 131072);

    /* @Conv_/conv3_for_upsample1/cv1/conv/Conv_100:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0004648897156585008;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[115], attr, VSI_NN_TYPE_INT32, 7375872, 1024);

    /* @Conv_/conv3_for_upsample1/cv2/conv/Conv_150:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0058408090844750404;
    attr.dtype.zero_point = 151;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[116], attr, VSI_NN_TYPE_UINT8, 7508992, 131072);

    /* @Conv_/conv3_for_upsample1/cv2/conv/Conv_150:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00020116280938964337;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[117], attr, VSI_NN_TYPE_INT32, 7507968, 1024);

    /* @Conv_/conv3_for_upsample1/cv3.0/conv/Conv_148:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005392726045101881;
    attr.dtype.zero_point = 109;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[118], attr, VSI_NN_TYPE_UINT8, 7640576, 294912);

    /* @Conv_/conv3_for_upsample1/cv3.0/conv/Conv_148:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002215147396782413;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[119], attr, VSI_NN_TYPE_INT32, 7640064, 512);

    /* @Conv_/conv3_for_upsample1/cv3.1/conv/Conv_146:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.003393105696886778;
    attr.dtype.zero_point = 126;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[120], attr, VSI_NN_TYPE_UINT8, 7936000, 147456);

    /* @Conv_/conv3_for_upsample1/cv3.1/conv/Conv_146:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001393771672155708;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[121], attr, VSI_NN_TYPE_INT32, 7935488, 512);

    /* @Conv_/conv3_for_upsample1/cv3.2/conv/Conv_144:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.003972877282649279;
    attr.dtype.zero_point = 99;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[122], attr, VSI_NN_TYPE_UINT8, 8083968, 147456);

    /* @Conv_/conv3_for_upsample1/cv3.2/conv/Conv_144:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00016319220594596118;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[123], attr, VSI_NN_TYPE_INT32, 8083456, 512);

    /* @Conv_/conv3_for_upsample1/cv3.3/conv/Conv_142:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007908564992249012;
    attr.dtype.zero_point = 95;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[124], attr, VSI_NN_TYPE_UINT8, 8231936, 147456);

    /* @Conv_/conv3_for_upsample1/cv3.3/conv/Conv_142:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00032485678093507886;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[125], attr, VSI_NN_TYPE_INT32, 8231424, 512);

    /* @Conv_/conv3_for_upsample1/cv4/conv/Conv_96:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00564432330429554;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[126], attr, VSI_NN_TYPE_UINT8, 8380416, 262144);

    /* @Conv_/conv3_for_upsample1/cv4/conv/Conv_96:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.000231849480769597;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[127], attr, VSI_NN_TYPE_INT32, 8379392, 1024);

    /* @Conv_/conv_for_P4/conv/Conv_93:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007522018160670996;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[128], attr, VSI_NN_TYPE_UINT8, 8961024, 32768);

    /* @Conv_/conv_for_P4/conv/Conv_93:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00021577029838226736;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[129], attr, VSI_NN_TYPE_INT32, 8960512, 512);

    /* @Conv_/conv3_for_upsample2/cv2/conv/Conv_53:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0058746542781591415;
    attr.dtype.zero_point = 157;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[130], attr, VSI_NN_TYPE_UINT8, 8676352, 32768);

    /* @Conv_/conv3_for_upsample2/cv2/conv/Conv_53:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00017595656390767545;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[131], attr, VSI_NN_TYPE_INT32, 8675840, 512);

    /* @Conv_/conv3_for_upsample2/cv1/conv/Conv_55:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006247200537472963;
    attr.dtype.zero_point = 135;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[132], attr, VSI_NN_TYPE_UINT8, 8643072, 32768);

    /* @Conv_/conv3_for_upsample2/cv1/conv/Conv_55:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001871150016086176;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[133], attr, VSI_NN_TYPE_INT32, 8642560, 512);

    /* @Conv_/conv3_for_upsample2/cv3.0/conv/Conv_51:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005855055991560221;
    attr.dtype.zero_point = 152;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[134], attr, VSI_NN_TYPE_UINT8, 8709376, 73728);

    /* @Conv_/conv3_for_upsample2/cv3.0/conv/Conv_51:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001680725545156747;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[135], attr, VSI_NN_TYPE_INT32, 8709120, 256);

    /* @Conv_/conv3_for_upsample2/cv3.1/conv/Conv_49:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00883887056261301;
    attr.dtype.zero_point = 125;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[136], attr, VSI_NN_TYPE_UINT8, 8783360, 36864);

    /* @Conv_/conv3_for_upsample2/cv3.1/conv/Conv_49:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0002537245745770633;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[137], attr, VSI_NN_TYPE_INT32, 8783104, 256);

    /* @Conv_/conv3_for_upsample2/cv3.2/conv/Conv_47:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007212359923869371;
    attr.dtype.zero_point = 162;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[138], attr, VSI_NN_TYPE_UINT8, 8820480, 36864);

    /* @Conv_/conv3_for_upsample2/cv3.2/conv/Conv_47:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00020703469635918736;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[139], attr, VSI_NN_TYPE_INT32, 8820224, 256);

    /* @Conv_/conv3_for_upsample2/cv3.3/conv/Conv_45:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 64;
    attr.size[3] = 64;
    attr.dim_num = 4;
    attr.dtype.scale = 0.009812992997467518;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[140], attr, VSI_NN_TYPE_UINT8, 8857600, 36864);

    /* @Conv_/conv3_for_upsample2/cv3.3/conv/Conv_45:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 64;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00028168727294541895;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[141], attr, VSI_NN_TYPE_INT32, 8857344, 256);

    /* @Conv_/conv3_for_upsample2/cv4/conv/Conv_21:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007842490449547768;
    attr.dtype.zero_point = 169;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[142], attr, VSI_NN_TYPE_UINT8, 8894976, 65536);

    /* @Conv_/conv3_for_upsample2/cv4/conv/Conv_21:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00022512293071486056;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[143], attr, VSI_NN_TYPE_INT32, 8894464, 512);

    /* @Conv_/rep_conv_1/rbr_reparam/Conv_9:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.019155779853463173;
    attr.dtype.zero_point = 185;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[144], attr, VSI_NN_TYPE_UINT8, 23897856, 294912);

    /* @Conv_/rep_conv_1/rbr_reparam/Conv_9:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00047522454406134784;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[145], attr, VSI_NN_TYPE_INT32, 23896832, 1024);

    /* @Conv_/down_sample1/cv2/conv/Conv_111:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.014317628927528858;
    attr.dtype.zero_point = 160;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[146], attr, VSI_NN_TYPE_UINT8, 23008512, 16384);

    /* @Conv_/down_sample1/cv2/conv/Conv_111:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0003551976988092065;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[147], attr, VSI_NN_TYPE_INT32, 23008000, 512);

    /* @Conv_/down_sample1/cv1/conv/Conv_104:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00752028776332736;
    attr.dtype.zero_point = 128;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[148], attr, VSI_NN_TYPE_UINT8, 22991616, 16384);

    /* @Conv_/down_sample1/cv1/conv/Conv_104:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001865662052296102;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[149], attr, VSI_NN_TYPE_INT32, 22991104, 512);

    /* @Conv_/yolo_head_P3/Conv_3:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 18;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0009880465222522616;
    attr.dtype.zero_point = 165;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[150], attr, VSI_NN_TYPE_UINT8, 37770536, 4608);

    /* @Conv_/yolo_head_P3/Conv_3:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 18;
    attr.dim_num = 1;
    attr.dtype.scale = 9.01317034731619e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[151], attr, VSI_NN_TYPE_INT32, 37770464, 72);

    /* @Conv_/down_sample1/cv3/conv/Conv_108:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0028879414312541485;
    attr.dtype.zero_point = 133;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[152], attr, VSI_NN_TYPE_UINT8, 23025408, 147456);

    /* @Conv_/down_sample1/cv3/conv/Conv_108:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 7.330413063755259e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[153], attr, VSI_NN_TYPE_INT32, 23024896, 512);

    /* @Conv_/conv3_for_downsample1/cv2/conv/Conv_65:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005187144968658686;
    attr.dtype.zero_point = 134;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[154], attr, VSI_NN_TYPE_UINT8, 1185792, 131072);

    /* @Conv_/conv3_for_downsample1/cv2/conv/Conv_65:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00014879408990964293;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[155], attr, VSI_NN_TYPE_INT32, 1184768, 1024);

    /* @Conv_/conv3_for_downsample1/cv1/conv/Conv_67:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.008512040600180626;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[156], attr, VSI_NN_TYPE_UINT8, 1053696, 131072);

    /* @Conv_/conv3_for_downsample1/cv1/conv/Conv_67:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00024416923406533897;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[157], attr, VSI_NN_TYPE_INT32, 1052672, 1024);

    /* @Conv_/conv3_for_downsample1/cv3.0/conv/Conv_63:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004246440250426531;
    attr.dtype.zero_point = 124;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[158], attr, VSI_NN_TYPE_UINT8, 1317376, 294912);

    /* @Conv_/conv3_for_downsample1/cv3.0/conv/Conv_63:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00014665830531157553;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[159], attr, VSI_NN_TYPE_INT32, 1316864, 512);

    /* @Conv_/conv3_for_downsample1/cv3.1/conv/Conv_61:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.005911242216825485;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[160], attr, VSI_NN_TYPE_UINT8, 1612800, 147456);

    /* @Conv_/conv3_for_downsample1/cv3.1/conv/Conv_61:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00020415517792571336;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[161], attr, VSI_NN_TYPE_INT32, 1612288, 512);

    /* @Conv_/conv3_for_downsample1/cv3.2/conv/Conv_59:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00603388249874115;
    attr.dtype.zero_point = 164;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[162], attr, VSI_NN_TYPE_UINT8, 1760768, 147456);

    /* @Conv_/conv3_for_downsample1/cv3.2/conv/Conv_59:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00020839077478740364;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[163], attr, VSI_NN_TYPE_INT32, 1760256, 512);

    /* @Conv_/conv3_for_downsample1/cv3.3/conv/Conv_57:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 128;
    attr.size[3] = 128;
    attr.dim_num = 4;
    attr.dtype.scale = 0.009843260049819946;
    attr.dtype.zero_point = 136;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[164], attr, VSI_NN_TYPE_UINT8, 1908736, 147456);

    /* @Conv_/conv3_for_downsample1/cv3.3/conv/Conv_57:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 128;
    attr.dim_num = 1;
    attr.dtype.scale = 0.000339954363880679;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[165], attr, VSI_NN_TYPE_INT32, 1908224, 512);

    /* @Conv_/conv3_for_downsample1/cv4/conv/Conv_23:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.006932158023118973;
    attr.dtype.zero_point = 133;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[166], attr, VSI_NN_TYPE_UINT8, 2057216, 262144);

    /* @Conv_/conv3_for_downsample1/cv4/conv/Conv_23:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00023941430845297873;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[167], attr, VSI_NN_TYPE_INT32, 2056192, 1024);

    /* @Conv_/rep_conv_2/rbr_reparam/Conv_11:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.014392183162271976;
    attr.dtype.zero_point = 177;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[168], attr, VSI_NN_TYPE_UINT8, 24194816, 1179648);

    /* @Conv_/rep_conv_2/rbr_reparam/Conv_11:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0003672240418381989;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[169], attr, VSI_NN_TYPE_INT32, 24192768, 2048);

    /* @Conv_/down_sample2/cv2/conv/Conv_158:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.012035565450787544;
    attr.dtype.zero_point = 146;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[170], attr, VSI_NN_TYPE_UINT8, 23240448, 65536);

    /* @Conv_/down_sample2/cv2/conv/Conv_158:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00030709372367709875;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[171], attr, VSI_NN_TYPE_INT32, 23239424, 1024);

    /* @Conv_/down_sample2/cv1/conv/Conv_135:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.008484913967549801;
    attr.dtype.zero_point = 127;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[172], attr, VSI_NN_TYPE_UINT8, 23173888, 65536);

    /* @Conv_/down_sample2/cv1/conv/Conv_135:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00021649494010489434;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[173], attr, VSI_NN_TYPE_INT32, 23172864, 1024);

    /* @Conv_/yolo_head_P4/Conv_4:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 512;
    attr.size[3] = 18;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0008103395812213421;
    attr.dtype.zero_point = 142;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[174], attr, VSI_NN_TYPE_UINT8, 37775216, 9216);

    /* @Conv_/yolo_head_P4/Conv_4:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 18;
    attr.dim_num = 1;
    attr.dtype.scale = 5.475717625813559e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[175], attr, VSI_NN_TYPE_INT32, 37775144, 72);

    /* @Conv_/down_sample2/cv3/conv/Conv_133:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0031051645055413246;
    attr.dtype.zero_point = 102;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[176], attr, VSI_NN_TYPE_UINT8, 23307008, 589824);

    /* @Conv_/down_sample2/cv3/conv/Conv_133:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 8.68573843035847e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[177], attr, VSI_NN_TYPE_INT32, 23305984, 1024);

    /* @Conv_/conv3_for_downsample2/cv2/conv/Conv_77:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004528776276856661;
    attr.dtype.zero_point = 120;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[178], attr, VSI_NN_TYPE_UINT8, 2847744, 524288);

    /* @Conv_/conv3_for_downsample2/cv2/conv/Conv_77:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00019199981761630625;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[179], attr, VSI_NN_TYPE_INT32, 2845696, 2048);

    /* @Conv_/conv3_for_downsample2/cv1/conv/Conv_79:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004546910058706999;
    attr.dtype.zero_point = 121;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[180], attr, VSI_NN_TYPE_UINT8, 2321408, 524288);

    /* @Conv_/conv3_for_downsample2/cv1/conv/Conv_79:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001927686098497361;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[181], attr, VSI_NN_TYPE_INT32, 2319360, 2048);

    /* @Conv_/conv3_for_downsample2/cv3.0/conv/Conv_75:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 512;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0026407840196043253;
    attr.dtype.zero_point = 122;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[182], attr, VSI_NN_TYPE_UINT8, 3373056, 1179648);

    /* @Conv_/conv3_for_downsample2/cv3.0/conv/Conv_75:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00011551890929695219;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[183], attr, VSI_NN_TYPE_INT32, 3372032, 1024);

    /* @Conv_/conv3_for_downsample2/cv3.1/conv/Conv_73:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.004229202400892973;
    attr.dtype.zero_point = 125;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[184], attr, VSI_NN_TYPE_UINT8, 4553728, 589824);

    /* @Conv_/conv3_for_downsample2/cv3.1/conv/Conv_73:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0001850029657362029;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[185], attr, VSI_NN_TYPE_INT32, 4552704, 1024);

    /* @Conv_/conv3_for_downsample2/cv3.2/conv/Conv_71:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0054836515337228775;
    attr.dtype.zero_point = 138;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[186], attr, VSI_NN_TYPE_UINT8, 5144576, 589824);

    /* @Conv_/conv3_for_downsample2/cv3.2/conv/Conv_71:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00023987780150491744;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[187], attr, VSI_NN_TYPE_INT32, 5143552, 1024);

    /* @Conv_/conv3_for_downsample2/cv3.3/conv/Conv_69:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 256;
    attr.size[3] = 256;
    attr.dim_num = 4;
    attr.dtype.scale = 0.00757104204967618;
    attr.dtype.zero_point = 161;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[188], attr, VSI_NN_TYPE_UINT8, 5735424, 589824);

    /* @Conv_/conv3_for_downsample2/cv3.3/conv/Conv_69:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 256;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0003311889595352113;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[189], attr, VSI_NN_TYPE_INT32, 5734400, 1024);

    /* @Conv_/conv3_for_downsample2/cv4/conv/Conv_25:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 2048;
    attr.size[3] = 512;
    attr.dim_num = 4;
    attr.dtype.scale = 0.007810138165950775;
    attr.dtype.zero_point = 174;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[190], attr, VSI_NN_TYPE_UINT8, 6327296, 1048576);

    /* @Conv_/conv3_for_downsample2/cv4/conv/Conv_25:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 512;
    attr.dim_num = 1;
    attr.dtype.scale = 0.00034164803219027817;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[191], attr, VSI_NN_TYPE_INT32, 6325248, 2048);

    /* @Conv_/rep_conv_3/rbr_reparam/Conv_13:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 3;
    attr.size[1] = 3;
    attr.size[2] = 512;
    attr.size[3] = 1024;
    attr.dim_num = 4;
    attr.dtype.scale = 0.01161565724760294;
    attr.dtype.zero_point = 177;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[192], attr, VSI_NN_TYPE_UINT8, 25378560, 4718592);

    /* @Conv_/rep_conv_3/rbr_reparam/Conv_13:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1024;
    attr.dim_num = 1;
    attr.dtype.scale = 0.0003563287027645856;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[193], attr, VSI_NN_TYPE_INT32, 25374464, 4096);

    /* @Conv_/yolo_head_P5/Conv_5:weight */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 1;
    attr.size[1] = 1;
    attr.size[2] = 1024;
    attr.size[3] = 18;
    attr.dim_num = 4;
    attr.dtype.scale = 0.0006107246153987944;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[194], attr, VSI_NN_TYPE_UINT8, 37784504, 18432);

    /* @Conv_/yolo_head_P5/Conv_5:bias */
    memset( &attr, 0, sizeof( attr ) );
    attr.size[0] = 18;
    attr.dim_num = 1;
    attr.dtype.scale = 2.5930683477781713e-05;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_CONST_TENSOR(const_tensor[195], attr, VSI_NN_TYPE_INT32, 37784432, 72);



    /* @Conv_/stem/stem.0/conv/Conv_326:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.2584458887577057;
    attr.dtype.zero_point = 121;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[0]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/stem/stem.0/act/Sigmoid_327_Mul_/stem/stem.0/act/Mul_325:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.13668324053287506;
    attr.dtype.zero_point = 2;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[1]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/stem/stem.1/conv/Conv_324:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.38959410786628723;
    attr.dtype.zero_point = 149;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[2]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/stem/stem.1/act/Sigmoid_323_Mul_/stem/stem.1/act/Mul_322:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.16243068873882294;
    attr.dtype.zero_point = 2;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[3]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/stem/stem.2/conv/Conv_319:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.15891562402248383;
    attr.dtype.zero_point = 162;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[4]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/stem/stem.2/act/Sigmoid_320_Mul_/stem/stem.2/act/Mul_314:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05885337293148041;
    attr.dtype.zero_point = 5;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[5]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark2/dark2.0/conv/Conv_306:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.09556099027395248;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[6]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark2/dark2.0/act/Sigmoid_305_Mul_/dark2/dark2.0/act/Mul_304:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.047098103910684586;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[7]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark2/dark2.1/cv1/conv/Conv_302:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.059960611164569855;
    attr.dtype.zero_point = 161;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[8]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark2/dark2.1/cv2/conv/Conv_311:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05627228692173958;
    attr.dtype.zero_point = 160;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[9]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark2/dark2.1/cv1/act/Sigmoid_303_Mul_/dark2/dark2.1/cv1/act/Mul_294:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025659579783678055;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[10]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark2/dark2.1/cv2/act/Sigmoid_312_Mul_/dark2/dark2.1/cv2/act/Mul_301:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025659579783678055;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[11]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark2/dark2.1/cv3.0/conv/Conv_317:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0648304671049118;
    attr.dtype.zero_point = 166;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[12]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark2/dark2.1/cv3.0/act/Sigmoid_318_Mul_/dark2/dark2.1/cv3.0/act/Mul_313:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.023776927962899208;
    attr.dtype.zero_point = 12;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[13]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark2/dark2.1/cv3.1/conv/Conv_309:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05634843558073044;
    attr.dtype.zero_point = 144;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[14]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark2/dark2.1/cv3.1/act/Sigmoid_310_Mul_/dark2/dark2.1/cv3.1/act/Mul_300:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025659579783678055;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[15]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark2/dark2.1/cv3.2/conv/Conv_321:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05939716100692749;
    attr.dtype.zero_point = 159;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[16]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark2/dark2.1/cv3.2/act/Sigmoid_316_Mul_/dark2/dark2.1/cv3.2/act/Mul_315:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02349516935646534;
    attr.dtype.zero_point = 12;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[17]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark2/dark2.1/cv3.3/conv/Conv_307:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04888187348842621;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[18]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark2/dark2.1/cv3.3/act/Sigmoid_308_Mul_/dark2/dark2.1/cv3.3/act/Mul_299:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025659579783678055;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[19]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/dark2/dark2.1/Concat_293:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025659579783678055;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[20]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark2/dark2.1/cv4/conv/Conv_280:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06267107278108597;
    attr.dtype.zero_point = 148;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[21]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark2/dark2.1/cv4/act/Sigmoid_278_Mul_/dark2/dark2.1/cv4/act/Mul_276:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.027401190251111984;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[22]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/dark3/dark3.0/mp/m/MaxPool_275:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.027401188388466835;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[23]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.0/cv2/conv/Conv_290:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06350527703762054;
    attr.dtype.zero_point = 160;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[24]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.0/cv1/conv/Conv_255:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04769923537969589;
    attr.dtype.zero_point = 152;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[25]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.0/cv2/act/Sigmoid_274_Mul_/dark3/dark3.0/cv2/act/Mul_273:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02471308596432209;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[26]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.0/cv1/act/Sigmoid_256_Mul_/dark3/dark3.0/cv1/act/Mul_229:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.027414295822381973;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[27]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.0/cv3/conv/Conv_253:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.050481196492910385;
    attr.dtype.zero_point = 122;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[28]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.0/cv3/act/Sigmoid_254_Mul_/dark3/dark3.0/cv3/act/Mul_228:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.027414295822381973;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[29]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/dark3/dark3.0/Concat_204:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.027414295822381973;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[30]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.1/cv2/conv/Conv_201:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.047994740307331085;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[31]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.1/cv1/conv/Conv_203:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0432734377682209;
    attr.dtype.zero_point = 141;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[32]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.1/cv2/act/Sigmoid_202_Mul_/dark3/dark3.1/cv2/act/Mul_180:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02899119071662426;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[33]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.1/cv1/act/Sigmoid_182_Mul_/dark3/dark3.1/cv1/act/Mul_181:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02899119071662426;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[34]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.1/cv3.0/conv/Conv_226:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04925283417105675;
    attr.dtype.zero_point = 145;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[35]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.1/cv3.0/act/Sigmoid_225_Mul_/dark3/dark3.1/cv3.0/act/Mul_224:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.022148821502923965;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[36]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.1/cv3.1/conv/Conv_199:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07005093991756439;
    attr.dtype.zero_point = 153;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[37]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.1/cv3.1/act/Sigmoid_200_Mul_/dark3/dark3.1/cv3.1/act/Mul_179:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02899119071662426;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[38]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.1/cv3.2/conv/Conv_227:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05666550621390343;
    attr.dtype.zero_point = 140;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[39]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.1/cv3.2/act/Sigmoid_223_Mul_/dark3/dark3.1/cv3.2/act/Mul_222:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.026542771607637405;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[40]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.1/cv3.3/conv/Conv_197:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06368283927440643;
    attr.dtype.zero_point = 143;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[41]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.1/cv3.3/act/Sigmoid_198_Mul_/dark3/dark3.1/cv3.3/act/Mul_178:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02899119071662426;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[42]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/dark3/dark3.1/Concat_165:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02899119071662426;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[43]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark3/dark3.1/cv4/conv/Conv_164:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06033540144562721;
    attr.dtype.zero_point = 122;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[44]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark3/dark3.1/cv4/act/Sigmoid_151_Mul_/dark3/dark3.1/cv4/act/Mul_141:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03256068378686905;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[45]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv_for_feat1/conv/Conv_123:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.055266473442316055;
    attr.dtype.zero_point = 122;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[46]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/dark4/dark4.0/mp/m/MaxPool_283:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03256068006157875;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[47]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.0/cv2/conv/Conv_295:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07023512572050095;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[48]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv_for_feat1/act/Sigmoid_122_Mul_/conv_for_feat1/act/Mul_121:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02995181642472744;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[49]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.0/cv1/conv/Conv_264:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05193720757961273;
    attr.dtype.zero_point = 128;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[50]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.0/cv2/act/Sigmoid_296_Mul_/dark4/dark4.0/cv2/act/Mul_286:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.034862179309129715;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[51]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.0/cv1/act/Sigmoid_263_Mul_/dark4/dark4.0/cv1/act/Mul_262:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028193652629852295;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[52]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.0/cv3/conv/Conv_284:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06424640864133835;
    attr.dtype.zero_point = 147;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[53]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.0/cv3/act/Sigmoid_282_Mul_/dark4/dark4.0/cv3/act/Mul_281:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028193652629852295;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[54]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/dark4/dark4.0/Concat_261:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028193652629852295;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[55]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.1/cv2/conv/Conv_234:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0538872592151165;
    attr.dtype.zero_point = 112;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[56]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.1/cv1/conv/Conv_236:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05888845771551132;
    attr.dtype.zero_point = 128;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[57]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.1/cv2/act/Sigmoid_235_Mul_/dark4/dark4.1/cv2/act/Mul_207:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03504326939582825;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[58]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.1/cv1/act/Sigmoid_237_Mul_/dark4/dark4.1/cv1/act/Mul_208:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03504326939582825;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[59]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.1/cv3.0/conv/Conv_279:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05027171969413757;
    attr.dtype.zero_point = 134;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[60]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.1/cv3.0/act/Sigmoid_260_Mul_/dark4/dark4.1/cv3.0/act/Mul_259:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.024897530674934387;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[61]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.1/cv3.1/conv/Conv_232:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06458236277103424;
    attr.dtype.zero_point = 129;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[62]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.1/cv3.1/act/Sigmoid_233_Mul_/dark4/dark4.1/cv3.1/act/Mul_206:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03504326939582825;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[63]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.1/cv3.2/conv/Conv_277:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05840706825256348;
    attr.dtype.zero_point = 149;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[64]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.1/cv3.2/act/Sigmoid_258_Mul_/dark4/dark4.1/cv3.2/act/Mul_257:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025286564603447914;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[65]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.1/cv3.3/conv/Conv_230:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0694454237818718;
    attr.dtype.zero_point = 130;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[66]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.1/cv3.3/act/Sigmoid_231_Mul_/dark4/dark4.1/cv3.3/act/Mul_205:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03504326939582825;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[67]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/dark4/dark4.1/Concat_183:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03504326939582825;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[68]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark4/dark4.1/cv4/conv/Conv_168:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06199130043387413;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[69]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark4/dark4.1/cv4/act/Sigmoid_167_Mul_/dark4/dark4.1/cv4/act/Mul_166:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.029316427186131477;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[70]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv_for_feat2/conv/Conv_152:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06706616282463074;
    attr.dtype.zero_point = 128;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[71]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/dark5/dark5.0/mp/m/MaxPool_251:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.029316188767552376;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[72]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.0/cv2/conv/Conv_288:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07636106014251709;
    attr.dtype.zero_point = 116;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[73]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv_for_feat2/act/Sigmoid_153_Mul_/conv_for_feat2/act/Mul_130:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.034440916031599045;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[74]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.0/cv1/conv/Conv_249:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06371000409126282;
    attr.dtype.zero_point = 126;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[75]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.0/cv2/act/Sigmoid_289_Mul_/dark5/dark5.0/cv2/act/Mul_272:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.042609721422195435;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[76]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.0/cv1/act/Sigmoid_250_Mul_/dark5/dark5.0/cv1/act/Mul_221:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033413708209991455;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[77]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.0/cv3/conv/Conv_271:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05409904569387436;
    attr.dtype.zero_point = 128;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[78]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.0/cv3/act/Sigmoid_252_Mul_/dark5/dark5.0/cv3/act/Mul_248:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033413708209991455;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[79]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/dark5/dark5.0/Concat_220:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033413708209991455;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[80]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.1/cv1/conv/Conv_195:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05445190146565437;
    attr.dtype.zero_point = 142;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[81]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.1/cv2/conv/Conv_218:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05277632176876068;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[82]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.1/cv1/act/Sigmoid_196_Mul_/dark5/dark5.1/cv1/act/Mul_177:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0323309563100338;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[83]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.1/cv2/act/Sigmoid_219_Mul_/dark5/dark5.1/cv2/act/Mul_194:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0323309563100338;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[84]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.1/cv3.0/conv/Conv_246:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04880888760089874;
    attr.dtype.zero_point = 126;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[85]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.1/cv3.0/act/Sigmoid_245_Mul_/dark5/dark5.1/cv3.0/act/Mul_244:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025702370330691338;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[86]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.1/cv3.1/conv/Conv_216:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05757684260606766;
    attr.dtype.zero_point = 117;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[87]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.1/cv3.1/act/Sigmoid_217_Mul_/dark5/dark5.1/cv3.1/act/Mul_193:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0323309563100338;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[88]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.1/cv3.2/conv/Conv_247:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05141959711909294;
    attr.dtype.zero_point = 111;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[89]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.1/cv3.2/act/Sigmoid_243_Mul_/dark5/dark5.1/cv3.2/act/Mul_242:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.030149459838867188;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[90]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.1/cv3.3/conv/Conv_214:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04582119360566139;
    attr.dtype.zero_point = 122;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[91]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.1/cv3.3/act/Sigmoid_215_Mul_/dark5/dark5.1/cv3.3/act/Mul_192:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0323309563100338;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[92]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/dark5/dark5.1/Concat_176:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0323309563100338;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[93]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/dark5/dark5.1/cv4/conv/Conv_162:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.059093549847602844;
    attr.dtype.zero_point = 114;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[94]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/dark5/dark5.1/cv4/act/Sigmoid_163_Mul_/dark5/dark5.1/cv4/act/Mul_140:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.033796943724155426;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[95]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @AveragePool_/coordstt5/avg_pool_y/AveragePool_292:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.010565955191850662;
    attr.dtype.zero_point = 26;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[96]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @AveragePool_/coordstt5/avg_pool_x/AveragePool_298:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.010565955191850662;
    attr.dtype.zero_point = 26;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[97]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/coordstt5/Concat_291_acuity_mark_perm_50:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.010565955191850662;
    attr.dtype.zero_point = 26;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[98]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/coordstt5/Concat_291:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.010565955191850662;
    attr.dtype.zero_point = 26;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[99]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/coordstt5/conv_1x1/Conv_287:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0018575172871351242;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[100]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Relu_/coordstt5/relu/Relu_270:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0018575172871351242;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[101]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/coordstt5/Split_269:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0018575172871351242;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[102]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Split_/coordstt5/Split_269:out1 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0018575172871351242;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[102]->output.tensors[1], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/coordstt5/F_h/Conv_241_acuity_mark_perm_48:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0018575172871351242;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[103]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/coordstt5/F_w/Conv_213:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0005759564228355885;
    attr.dtype.zero_point = 126;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[104]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/coordstt5/F_h/Conv_241:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0005163071327842772;
    attr.dtype.zero_point = 120;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[105]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/coordstt5/sigmoid_w/Sigmoid_191:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0020333207212388515;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[106]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/coordstt5/sigmoid_h/Sigmoid_212:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0020288724917918444;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[107]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Mul_/coordstt5/Mul_174:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.017016276717185974;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[108]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Mul_/coordstt5/Mul_1_161:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.008489543572068214;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[109]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Mul_/Mul_139:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06843847036361694;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[110]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv/Conv_120:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.013090391643345356;
    attr.dtype.zero_point = 125;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[111]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/sppcspc/cv2/conv/Conv_88:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06818059831857681;
    attr.dtype.zero_point = 169;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[112]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/sppcspc/cv1/conv/Conv_285:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07617080956697464;
    attr.dtype.zero_point = 117;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[113]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/sppcspc/cv2/act/Sigmoid_87_Mul_/sppcspc/cv2/act/Mul_86:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.024021022021770477;
    attr.dtype.zero_point = 12;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[114]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/sppcspc/cv1/act/Sigmoid_267_Mul_/sppcspc/cv1/act/Mul_266:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04222756251692772;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[115]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/sppcspc/cv3/conv/Conv_239:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06552481651306152;
    attr.dtype.zero_point = 158;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[116]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/sppcspc/cv3/act/Sigmoid_240_Mul_/sppcspc/cv3/act/Mul_211:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.026021920144557953;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[117]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/sppcspc/cv4/conv/Conv_189:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04214312881231308;
    attr.dtype.zero_point = 130;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[118]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/sppcspc/cv4/act/Sigmoid_188_Mul_/sppcspc/cv4/act/Mul_185:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.021726641803979874;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[119]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/sppcspc/m.2/MaxPool_173:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.021726641803979874;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[120]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/sppcspc/m.0/MaxPool_186:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.021726641803979874;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[121]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/sppcspc/m.1/MaxPool_187:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.021726641803979874;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[122]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/sppcspc/Concat_172:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.021726641803979874;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[123]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/sppcspc/cv5/conv/Conv_159:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04338264465332031;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[124]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/sppcspc/cv5/act/Sigmoid_160_Mul_/sppcspc/cv5/act/Mul_138:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.021099569275975227;
    attr.dtype.zero_point = 13;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[125]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/sppcspc/cv6/conv/Conv_137:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.034183088690042496;
    attr.dtype.zero_point = 124;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[126]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/sppcspc/cv6/act/Sigmoid_119_Mul_/sppcspc/cv6/act/Mul_118:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.024021022021770477;
    attr.dtype.zero_point = 12;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[127]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/sppcspc/Concat_1_85:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.024021022021770477;
    attr.dtype.zero_point = 12;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[128]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/sppcspc/cv7/conv/Conv_84:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05340634658932686;
    attr.dtype.zero_point = 135;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[129]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/sppcspc/cv7/act/Sigmoid_83_Mul_/sppcspc/cv7/act/Mul_82:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.042395517230033875;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[130]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @GlobalAveragePool_/se/avg_pool/GlobalAveragePool_265:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.003057313384488225;
    attr.dtype.zero_point = 83;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[131]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Reshape_/se/Reshape_238:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.003057313384488225;
    attr.dtype.zero_point = 83;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[132]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MatMul_/se/fc/fc.0/MatMul_210:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0007299440912902355;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[133]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Relu_/se/fc/fc.1/Relu_209:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0007299440912902355;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[134]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MatMul_/se/fc/fc.2/MatMul_184:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0005299493204802275;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[135]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/se/fc/fc.3/Sigmoid_171:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0020249546505510807;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[136]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Reshape_/se/Reshape_1_170:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0020249546505510807;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[137]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Mul_/se/Mul_155:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.013412708416581154;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[138]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Mul_/Mul_1_154:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.08247169107198715;
    attr.dtype.zero_point = 0;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[139]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv_for_P5/conv/Conv_131:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.01968378573656082;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[140]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv_for_P5/act/Sigmoid_132_Mul_/conv_for_P5/act/Mul_114:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.034440916031599045;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[141]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Resize_/upsample/Resize_113:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.034440916031599045;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[142]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/Concat_112:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.034440916031599045;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[143]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample1/cv1/conv/Conv_100:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05841513350605965;
    attr.dtype.zero_point = 141;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[144]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample1/cv2/conv/Conv_150:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05605878680944443;
    attr.dtype.zero_point = 138;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[145]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample1/cv1/act/Sigmoid_99_Mul_/conv3_for_upsample1/cv1/act/Mul_98:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.041076578199863434;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[146]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample1/cv2/act/Sigmoid_129_Mul_/conv3_for_upsample1/cv2/act/Mul_128:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.041076578199863434;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[147]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample1/cv3.0/conv/Conv_148:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06684339791536331;
    attr.dtype.zero_point = 102;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[148]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample1/cv3.0/act/Sigmoid_149_Mul_/conv3_for_upsample1/cv3.0/act/Mul_127:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.041076578199863434;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[149]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample1/cv3.1/conv/Conv_146:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0453452542424202;
    attr.dtype.zero_point = 133;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[150]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample1/cv3.1/act/Sigmoid_147_Mul_/conv3_for_upsample1/cv3.1/act/Mul_126:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.041076578199863434;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[151]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample1/cv3.2/conv/Conv_144:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0443764328956604;
    attr.dtype.zero_point = 154;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[152]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample1/cv3.2/act/Sigmoid_145_Mul_/conv3_for_upsample1/cv3.2/act/Mul_125:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.041076578199863434;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[153]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample1/cv3.3/conv/Conv_142:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.047026462852954865;
    attr.dtype.zero_point = 140;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[154]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample1/cv3.3/act/Sigmoid_143_Mul_/conv3_for_upsample1/cv3.3/act/Mul_124:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.041076578199863434;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[155]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/conv3_for_upsample1/Concat_97:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.041076578199863434;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[156]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample1/cv4/conv/Conv_96:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0520034059882164;
    attr.dtype.zero_point = 137;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[157]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample1/cv4/act/Sigmoid_95_Mul_/conv3_for_upsample1/cv4/act/Mul_94:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028685159981250763;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[158]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv_for_P4/conv/Conv_93:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04500037431716919;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[159]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv_for_P4/act/Sigmoid_92_Mul_/conv_for_P4/act/Mul_91:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02995181642472744;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[160]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Resize_/upsample_1/Resize_90:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02995181642472744;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[161]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/Concat_1_89:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02995181642472744;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[162]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample2/cv2/conv/Conv_53:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.042045958340168;
    attr.dtype.zero_point = 128;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[163]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample2/cv1/conv/Conv_55:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03967418149113655;
    attr.dtype.zero_point = 163;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[164]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample2/cv2/act/Sigmoid_54_Mul_/conv3_for_upsample2/cv2/act/Mul_31:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028705541044473648;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[165]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample2/cv1/act/Sigmoid_56_Mul_/conv3_for_upsample2/cv1/act/Mul_32:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028705541044473648;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[166]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample2/cv3.0/conv/Conv_51:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03985006362199783;
    attr.dtype.zero_point = 139;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[167]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample2/cv3.0/act/Sigmoid_52_Mul_/conv3_for_upsample2/cv3.0/act/Mul_30:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028705541044473648;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[168]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample2/cv3.1/conv/Conv_49:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.045476265251636505;
    attr.dtype.zero_point = 151;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[169]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample2/cv3.1/act/Sigmoid_50_Mul_/conv3_for_upsample2/cv3.1/act/Mul_29:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028705541044473648;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[170]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample2/cv3.2/conv/Conv_47:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.041973698884248734;
    attr.dtype.zero_point = 166;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[171]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample2/cv3.2/act/Sigmoid_48_Mul_/conv3_for_upsample2/cv3.2/act/Mul_28:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028705541044473648;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[172]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample2/cv3.3/conv/Conv_45:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07704517245292664;
    attr.dtype.zero_point = 164;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[173]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample2/cv3.3/act/Sigmoid_46_Mul_/conv3_for_upsample2/cv3.3/act/Mul_27:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028705541044473648;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[174]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/conv3_for_upsample2/Concat_22:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028705541044473648;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[175]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_upsample2/cv4/conv/Conv_21:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.054978884756565094;
    attr.dtype.zero_point = 145;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[176]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_upsample2/cv4/act/Sigmoid_16_Mul_/conv3_for_upsample2/cv4/act/Mul_15:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.02480841614305973;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[177]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/rep_conv_1/rbr_reparam/Conv_9:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.17473797500133514;
    attr.dtype.zero_point = 123;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[178]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/down_sample1/mp/m/MaxPool_105:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.024808386340737343;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[179]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/down_sample1/cv2/conv/Conv_111:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06360652297735214;
    attr.dtype.zero_point = 157;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[180]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/rep_conv_1/act/Sigmoid_10_Mul_/rep_conv_1/act/Mul_6:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0912221223115921;
    attr.dtype.zero_point = 3;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[181]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/down_sample1/cv1/conv/Conv_104:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04385605454444885;
    attr.dtype.zero_point = 149;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[182]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/down_sample1/cv2/act/Sigmoid_110_Mul_/down_sample1/cv2/act/Mul_109:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025382831692695618;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[183]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/down_sample1/cv1/act/Sigmoid_103_Mul_/down_sample1/cv1/act/Mul_102:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028685159981250763;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[185]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/down_sample1/cv3/conv/Conv_108:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05852734297513962;
    attr.dtype.zero_point = 135;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[186]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/down_sample1/cv3/act/Sigmoid_107_Mul_/down_sample1/cv3/act/Mul_106:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028685159981250763;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[187]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/Concat_2_101:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.028685159981250763;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[188]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample1/cv2/conv/Conv_65:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.042832642793655396;
    attr.dtype.zero_point = 141;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[189]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample1/cv1/conv/Conv_67:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04712870717048645;
    attr.dtype.zero_point = 132;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[190]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample1/cv2/act/Sigmoid_66_Mul_/conv3_for_downsample1/cv2/act/Mul_37:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03453676402568817;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[191]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample1/cv1/act/Sigmoid_68_Mul_/conv3_for_downsample1/cv1/act/Mul_38:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03453676402568817;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[192]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample1/cv3.0/conv/Conv_63:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.062012214213609695;
    attr.dtype.zero_point = 123;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[193]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample1/cv3.0/act/Sigmoid_64_Mul_/conv3_for_downsample1/cv3.0/act/Mul_36:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03453676402568817;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[194]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample1/cv3.1/conv/Conv_61:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0543760247528553;
    attr.dtype.zero_point = 138;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[195]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample1/cv3.1/act/Sigmoid_62_Mul_/conv3_for_downsample1/cv3.1/act/Mul_35:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03453676402568817;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[196]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample1/cv3.2/conv/Conv_59:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06997086852788925;
    attr.dtype.zero_point = 144;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[197]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample1/cv3.2/act/Sigmoid_60_Mul_/conv3_for_downsample1/cv3.2/act/Mul_34:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03453676402568817;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[198]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample1/cv3.3/conv/Conv_57:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07800596952438354;
    attr.dtype.zero_point = 146;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[199]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample1/cv3.3/act/Sigmoid_58_Mul_/conv3_for_downsample1/cv3.3/act/Mul_33:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03453676402568817;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[200]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/conv3_for_downsample1/Concat_24:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03453676402568817;
    attr.dtype.zero_point = 8;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[201]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample1/cv4/conv/Conv_23:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06491579860448837;
    attr.dtype.zero_point = 159;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[202]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample1/cv4/act/Sigmoid_18_Mul_/conv3_for_downsample1/cv4/act/Mul_17:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025515520945191383;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[203]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/rep_conv_2/rbr_reparam/Conv_11:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.1288543939590454;
    attr.dtype.zero_point = 123;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[204]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @MaxPool_/down_sample2/mp/m/MaxPool_136:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.025515278801321983;
    attr.dtype.zero_point = 11;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[205]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/down_sample2/cv2/conv/Conv_158:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05209777504205704;
    attr.dtype.zero_point = 123;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[206]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/rep_conv_2/act/Sigmoid_12_Mul_/rep_conv_2/act/Mul_7:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06757312268018723;
    attr.dtype.zero_point = 4;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[207]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/down_sample2/cv1/conv/Conv_135:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.03896613419055939;
    attr.dtype.zero_point = 126;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[208]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/down_sample2/cv2/act/Sigmoid_157_Mul_/down_sample2/cv2/act/Mul_156:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.027971910312771797;
    attr.dtype.zero_point = 10;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[209]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/down_sample2/cv1/act/Sigmoid_117_Mul_/down_sample2/cv1/act/Mul_116:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.042395517230033875;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[211]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/down_sample2/cv3/conv/Conv_133:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07158828526735306;
    attr.dtype.zero_point = 108;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[212]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/down_sample2/cv3/act/Sigmoid_134_Mul_/down_sample2/cv3/act/Mul_115:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.042395517230033875;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[213]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/Concat_3_81:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.042395517230033875;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[214]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample2/cv2/conv/Conv_77:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05923522636294365;
    attr.dtype.zero_point = 90;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[215]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample2/cv1/conv/Conv_79:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.05574345961213112;
    attr.dtype.zero_point = 104;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[216]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample2/cv2/act/Sigmoid_78_Mul_/conv3_for_downsample2/cv2/act/Mul_43:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043744172900915146;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[217]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample2/cv1/act/Sigmoid_80_Mul_/conv3_for_downsample2/cv1/act/Mul_44:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043744172900915146;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[218]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample2/cv3.0/conv/Conv_75:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07726486772298813;
    attr.dtype.zero_point = 114;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[219]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample2/cv3.0/act/Sigmoid_76_Mul_/conv3_for_downsample2/cv3.0/act/Mul_42:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043744172900915146;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[220]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample2/cv3.1/conv/Conv_73:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07782817631959915;
    attr.dtype.zero_point = 129;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[221]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample2/cv3.1/act/Sigmoid_74_Mul_/conv3_for_downsample2/cv3.1/act/Mul_41:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043744172900915146;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[222]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample2/cv3.2/conv/Conv_71:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07274586707353592;
    attr.dtype.zero_point = 152;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[223]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample2/cv3.2/act/Sigmoid_72_Mul_/conv3_for_downsample2/cv3.2/act/Mul_40:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043744172900915146;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[224]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample2/cv3.3/conv/Conv_69:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06654113531112671;
    attr.dtype.zero_point = 140;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[225]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample2/cv3.3/act/Sigmoid_70_Mul_/conv3_for_downsample2/cv3.3/act/Mul_39:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043744172900915146;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[226]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Concat_/conv3_for_downsample2/Concat_26:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.043744172900915146;
    attr.dtype.zero_point = 6;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[227]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/conv3_for_downsample2/cv4/conv/Conv_25:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.06067119538784027;
    attr.dtype.zero_point = 131;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[228]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/conv3_for_downsample2/cv4/act/Sigmoid_20_Mul_/conv3_for_downsample2/cv4/act/Mul_19:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.0306765865534544;
    attr.dtype.zero_point = 9;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[229]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Conv_/rep_conv_3/rbr_reparam/Conv_13:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.07698015868663788;
    attr.dtype.zero_point = 118;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[230]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);

    /* @Sigmoid_/rep_conv_3/act/Sigmoid_14_Mul_/rep_conv_3/act/Mul_8:out0 */
    memset( &attr, 0, sizeof( attr ) );
    attr.dtype.scale = 0.04245888069272041;
    attr.dtype.zero_point = 7;
    attr.dtype.qnt_type = VSI_NN_QNT_TYPE_AFFINE_ASYMMETRIC;
    NEW_VIRTUAL_TENSOR(node[231]->output.tensors[0], attr, VSI_NN_TYPE_UINT8);



/*-----------------------------------------
  Connection initialize
 -----------------------------------------*/
    node[0]->input.tensors[0] = norm_tensor[3];
    node[184]->output.tensors[0] = norm_tensor[2];
    node[210]->output.tensors[0] = norm_tensor[1];
    node[232]->output.tensors[0] = norm_tensor[0];

    /* Conv_/stem/stem.0/conv/Conv_326 */
    node[0]->input.tensors[1] = const_tensor[0]; /* data_weight */
    node[0]->input.tensors[2] = const_tensor[1]; /* data_bias */

    /* Sigmoid_/stem/stem.0/act/Sigmoid_327_Mul_/stem/stem.0/act/Mul_325 */
    node[1]->input.tensors[0] = node[0]->output.tensors[0];

    /* Conv_/stem/stem.1/conv/Conv_324 */
    node[2]->input.tensors[0] = node[1]->output.tensors[0];
    node[2]->input.tensors[1] = const_tensor[2]; /* data_weight */
    node[2]->input.tensors[2] = const_tensor[3]; /* data_bias */

    /* Sigmoid_/stem/stem.1/act/Sigmoid_323_Mul_/stem/stem.1/act/Mul_322 */
    node[3]->input.tensors[0] = node[2]->output.tensors[0];

    /* Conv_/stem/stem.2/conv/Conv_319 */
    node[4]->input.tensors[0] = node[3]->output.tensors[0];
    node[4]->input.tensors[1] = const_tensor[4]; /* data_weight */
    node[4]->input.tensors[2] = const_tensor[5]; /* data_bias */

    /* Sigmoid_/stem/stem.2/act/Sigmoid_320_Mul_/stem/stem.2/act/Mul_314 */
    node[5]->input.tensors[0] = node[4]->output.tensors[0];

    /* Conv_/dark2/dark2.0/conv/Conv_306 */
    node[6]->input.tensors[0] = node[5]->output.tensors[0];
    node[6]->input.tensors[1] = const_tensor[6]; /* data_weight */
    node[6]->input.tensors[2] = const_tensor[7]; /* data_bias */

    /* Sigmoid_/dark2/dark2.0/act/Sigmoid_305_Mul_/dark2/dark2.0/act/Mul_304 */
    node[7]->input.tensors[0] = node[6]->output.tensors[0];

    /* Conv_/dark2/dark2.1/cv1/conv/Conv_302 */
    node[8]->input.tensors[0] = node[7]->output.tensors[0];
    node[8]->input.tensors[1] = const_tensor[8]; /* data_weight */
    node[8]->input.tensors[2] = const_tensor[9]; /* data_bias */

    /* Conv_/dark2/dark2.1/cv2/conv/Conv_311 */
    node[9]->input.tensors[0] = node[7]->output.tensors[0];
    node[9]->input.tensors[1] = const_tensor[10]; /* data_weight */
    node[9]->input.tensors[2] = const_tensor[11]; /* data_bias */

    /* Sigmoid_/dark2/dark2.1/cv1/act/Sigmoid_303_Mul_/dark2/dark2.1/cv1/act/Mul_294 */
    node[10]->input.tensors[0] = node[8]->output.tensors[0];

    /* Sigmoid_/dark2/dark2.1/cv2/act/Sigmoid_312_Mul_/dark2/dark2.1/cv2/act/Mul_301 */
    node[11]->input.tensors[0] = node[9]->output.tensors[0];

    /* Conv_/dark2/dark2.1/cv3.0/conv/Conv_317 */
    node[12]->input.tensors[0] = node[11]->output.tensors[0];
    node[12]->input.tensors[1] = const_tensor[12]; /* data_weight */
    node[12]->input.tensors[2] = const_tensor[13]; /* data_bias */

    /* Sigmoid_/dark2/dark2.1/cv3.0/act/Sigmoid_318_Mul_/dark2/dark2.1/cv3.0/act/Mul_313 */
    node[13]->input.tensors[0] = node[12]->output.tensors[0];

    /* Conv_/dark2/dark2.1/cv3.1/conv/Conv_309 */
    node[14]->input.tensors[0] = node[13]->output.tensors[0];
    node[14]->input.tensors[1] = const_tensor[14]; /* data_weight */
    node[14]->input.tensors[2] = const_tensor[15]; /* data_bias */

    /* Sigmoid_/dark2/dark2.1/cv3.1/act/Sigmoid_310_Mul_/dark2/dark2.1/cv3.1/act/Mul_300 */
    node[15]->input.tensors[0] = node[14]->output.tensors[0];

    /* Conv_/dark2/dark2.1/cv3.2/conv/Conv_321 */
    node[16]->input.tensors[0] = node[15]->output.tensors[0];
    node[16]->input.tensors[1] = const_tensor[16]; /* data_weight */
    node[16]->input.tensors[2] = const_tensor[17]; /* data_bias */

    /* Sigmoid_/dark2/dark2.1/cv3.2/act/Sigmoid_316_Mul_/dark2/dark2.1/cv3.2/act/Mul_315 */
    node[17]->input.tensors[0] = node[16]->output.tensors[0];

    /* Conv_/dark2/dark2.1/cv3.3/conv/Conv_307 */
    node[18]->input.tensors[0] = node[17]->output.tensors[0];
    node[18]->input.tensors[1] = const_tensor[18]; /* data_weight */
    node[18]->input.tensors[2] = const_tensor[19]; /* data_bias */

    /* Sigmoid_/dark2/dark2.1/cv3.3/act/Sigmoid_308_Mul_/dark2/dark2.1/cv3.3/act/Mul_299 */
    node[19]->input.tensors[0] = node[18]->output.tensors[0];

    /* Concat_/dark2/dark2.1/Concat_293 */
    node[20]->input.tensors[0] = node[19]->output.tensors[0];
    node[20]->input.tensors[1] = node[15]->output.tensors[0];
    node[20]->input.tensors[2] = node[11]->output.tensors[0];
    node[20]->input.tensors[3] = node[10]->output.tensors[0];

    /* Conv_/dark2/dark2.1/cv4/conv/Conv_280 */
    node[21]->input.tensors[0] = node[20]->output.tensors[0];
    node[21]->input.tensors[1] = const_tensor[20]; /* data_weight */
    node[21]->input.tensors[2] = const_tensor[21]; /* data_bias */

    /* Sigmoid_/dark2/dark2.1/cv4/act/Sigmoid_278_Mul_/dark2/dark2.1/cv4/act/Mul_276 */
    node[22]->input.tensors[0] = node[21]->output.tensors[0];

    /* MaxPool_/dark3/dark3.0/mp/m/MaxPool_275 */
    node[23]->input.tensors[0] = node[22]->output.tensors[0];

    /* Conv_/dark3/dark3.0/cv2/conv/Conv_290 */
    node[24]->input.tensors[0] = node[22]->output.tensors[0];
    node[24]->input.tensors[1] = const_tensor[22]; /* data_weight */
    node[24]->input.tensors[2] = const_tensor[23]; /* data_bias */

    /* Conv_/dark3/dark3.0/cv1/conv/Conv_255 */
    node[25]->input.tensors[0] = node[23]->output.tensors[0];
    node[25]->input.tensors[1] = const_tensor[24]; /* data_weight */
    node[25]->input.tensors[2] = const_tensor[25]; /* data_bias */

    /* Sigmoid_/dark3/dark3.0/cv2/act/Sigmoid_274_Mul_/dark3/dark3.0/cv2/act/Mul_273 */
    node[26]->input.tensors[0] = node[24]->output.tensors[0];

    /* Sigmoid_/dark3/dark3.0/cv1/act/Sigmoid_256_Mul_/dark3/dark3.0/cv1/act/Mul_229 */
    node[27]->input.tensors[0] = node[25]->output.tensors[0];

    /* Conv_/dark3/dark3.0/cv3/conv/Conv_253 */
    node[28]->input.tensors[0] = node[26]->output.tensors[0];
    node[28]->input.tensors[1] = const_tensor[26]; /* data_weight */
    node[28]->input.tensors[2] = const_tensor[27]; /* data_bias */

    /* Sigmoid_/dark3/dark3.0/cv3/act/Sigmoid_254_Mul_/dark3/dark3.0/cv3/act/Mul_228 */
    node[29]->input.tensors[0] = node[28]->output.tensors[0];

    /* Concat_/dark3/dark3.0/Concat_204 */
    node[30]->input.tensors[0] = node[29]->output.tensors[0];
    node[30]->input.tensors[1] = node[27]->output.tensors[0];

    /* Conv_/dark3/dark3.1/cv2/conv/Conv_201 */
    node[31]->input.tensors[0] = node[30]->output.tensors[0];
    node[31]->input.tensors[1] = const_tensor[28]; /* data_weight */
    node[31]->input.tensors[2] = const_tensor[29]; /* data_bias */

    /* Conv_/dark3/dark3.1/cv1/conv/Conv_203 */
    node[32]->input.tensors[0] = node[30]->output.tensors[0];
    node[32]->input.tensors[1] = const_tensor[30]; /* data_weight */
    node[32]->input.tensors[2] = const_tensor[31]; /* data_bias */

    /* Sigmoid_/dark3/dark3.1/cv2/act/Sigmoid_202_Mul_/dark3/dark3.1/cv2/act/Mul_180 */
    node[33]->input.tensors[0] = node[31]->output.tensors[0];

    /* Sigmoid_/dark3/dark3.1/cv1/act/Sigmoid_182_Mul_/dark3/dark3.1/cv1/act/Mul_181 */
    node[34]->input.tensors[0] = node[32]->output.tensors[0];

    /* Conv_/dark3/dark3.1/cv3.0/conv/Conv_226 */
    node[35]->input.tensors[0] = node[33]->output.tensors[0];
    node[35]->input.tensors[1] = const_tensor[32]; /* data_weight */
    node[35]->input.tensors[2] = const_tensor[33]; /* data_bias */

    /* Sigmoid_/dark3/dark3.1/cv3.0/act/Sigmoid_225_Mul_/dark3/dark3.1/cv3.0/act/Mul_224 */
    node[36]->input.tensors[0] = node[35]->output.tensors[0];

    /* Conv_/dark3/dark3.1/cv3.1/conv/Conv_199 */
    node[37]->input.tensors[0] = node[36]->output.tensors[0];
    node[37]->input.tensors[1] = const_tensor[34]; /* data_weight */
    node[37]->input.tensors[2] = const_tensor[35]; /* data_bias */

    /* Sigmoid_/dark3/dark3.1/cv3.1/act/Sigmoid_200_Mul_/dark3/dark3.1/cv3.1/act/Mul_179 */
    node[38]->input.tensors[0] = node[37]->output.tensors[0];

    /* Conv_/dark3/dark3.1/cv3.2/conv/Conv_227 */
    node[39]->input.tensors[0] = node[38]->output.tensors[0];
    node[39]->input.tensors[1] = const_tensor[36]; /* data_weight */
    node[39]->input.tensors[2] = const_tensor[37]; /* data_bias */

    /* Sigmoid_/dark3/dark3.1/cv3.2/act/Sigmoid_223_Mul_/dark3/dark3.1/cv3.2/act/Mul_222 */
    node[40]->input.tensors[0] = node[39]->output.tensors[0];

    /* Conv_/dark3/dark3.1/cv3.3/conv/Conv_197 */
    node[41]->input.tensors[0] = node[40]->output.tensors[0];
    node[41]->input.tensors[1] = const_tensor[38]; /* data_weight */
    node[41]->input.tensors[2] = const_tensor[39]; /* data_bias */

    /* Sigmoid_/dark3/dark3.1/cv3.3/act/Sigmoid_198_Mul_/dark3/dark3.1/cv3.3/act/Mul_178 */
    node[42]->input.tensors[0] = node[41]->output.tensors[0];

    /* Concat_/dark3/dark3.1/Concat_165 */
    node[43]->input.tensors[0] = node[42]->output.tensors[0];
    node[43]->input.tensors[1] = node[38]->output.tensors[0];
    node[43]->input.tensors[2] = node[33]->output.tensors[0];
    node[43]->input.tensors[3] = node[34]->output.tensors[0];

    /* Conv_/dark3/dark3.1/cv4/conv/Conv_164 */
    node[44]->input.tensors[0] = node[43]->output.tensors[0];
    node[44]->input.tensors[1] = const_tensor[40]; /* data_weight */
    node[44]->input.tensors[2] = const_tensor[41]; /* data_bias */

    /* Sigmoid_/dark3/dark3.1/cv4/act/Sigmoid_151_Mul_/dark3/dark3.1/cv4/act/Mul_141 */
    node[45]->input.tensors[0] = node[44]->output.tensors[0];

    /* Conv_/conv_for_feat1/conv/Conv_123 */
    node[46]->input.tensors[0] = node[45]->output.tensors[0];
    node[46]->input.tensors[1] = const_tensor[42]; /* data_weight */
    node[46]->input.tensors[2] = const_tensor[43]; /* data_bias */

    /* MaxPool_/dark4/dark4.0/mp/m/MaxPool_283 */
    node[47]->input.tensors[0] = node[45]->output.tensors[0];

    /* Conv_/dark4/dark4.0/cv2/conv/Conv_295 */
    node[48]->input.tensors[0] = node[45]->output.tensors[0];
    node[48]->input.tensors[1] = const_tensor[44]; /* data_weight */
    node[48]->input.tensors[2] = const_tensor[45]; /* data_bias */

    /* Sigmoid_/conv_for_feat1/act/Sigmoid_122_Mul_/conv_for_feat1/act/Mul_121 */
    node[49]->input.tensors[0] = node[46]->output.tensors[0];

    /* Conv_/dark4/dark4.0/cv1/conv/Conv_264 */
    node[50]->input.tensors[0] = node[47]->output.tensors[0];
    node[50]->input.tensors[1] = const_tensor[46]; /* data_weight */
    node[50]->input.tensors[2] = const_tensor[47]; /* data_bias */

    /* Sigmoid_/dark4/dark4.0/cv2/act/Sigmoid_296_Mul_/dark4/dark4.0/cv2/act/Mul_286 */
    node[51]->input.tensors[0] = node[48]->output.tensors[0];

    /* Sigmoid_/dark4/dark4.0/cv1/act/Sigmoid_263_Mul_/dark4/dark4.0/cv1/act/Mul_262 */
    node[52]->input.tensors[0] = node[50]->output.tensors[0];

    /* Conv_/dark4/dark4.0/cv3/conv/Conv_284 */
    node[53]->input.tensors[0] = node[51]->output.tensors[0];
    node[53]->input.tensors[1] = const_tensor[48]; /* data_weight */
    node[53]->input.tensors[2] = const_tensor[49]; /* data_bias */

    /* Sigmoid_/dark4/dark4.0/cv3/act/Sigmoid_282_Mul_/dark4/dark4.0/cv3/act/Mul_281 */
    node[54]->input.tensors[0] = node[53]->output.tensors[0];

    /* Concat_/dark4/dark4.0/Concat_261 */
    node[55]->input.tensors[0] = node[54]->output.tensors[0];
    node[55]->input.tensors[1] = node[52]->output.tensors[0];

    /* Conv_/dark4/dark4.1/cv2/conv/Conv_234 */
    node[56]->input.tensors[0] = node[55]->output.tensors[0];
    node[56]->input.tensors[1] = const_tensor[50]; /* data_weight */
    node[56]->input.tensors[2] = const_tensor[51]; /* data_bias */

    /* Conv_/dark4/dark4.1/cv1/conv/Conv_236 */
    node[57]->input.tensors[0] = node[55]->output.tensors[0];
    node[57]->input.tensors[1] = const_tensor[52]; /* data_weight */
    node[57]->input.tensors[2] = const_tensor[53]; /* data_bias */

    /* Sigmoid_/dark4/dark4.1/cv2/act/Sigmoid_235_Mul_/dark4/dark4.1/cv2/act/Mul_207 */
    node[58]->input.tensors[0] = node[56]->output.tensors[0];

    /* Sigmoid_/dark4/dark4.1/cv1/act/Sigmoid_237_Mul_/dark4/dark4.1/cv1/act/Mul_208 */
    node[59]->input.tensors[0] = node[57]->output.tensors[0];

    /* Conv_/dark4/dark4.1/cv3.0/conv/Conv_279 */
    node[60]->input.tensors[0] = node[58]->output.tensors[0];
    node[60]->input.tensors[1] = const_tensor[54]; /* data_weight */
    node[60]->input.tensors[2] = const_tensor[55]; /* data_bias */

    /* Sigmoid_/dark4/dark4.1/cv3.0/act/Sigmoid_260_Mul_/dark4/dark4.1/cv3.0/act/Mul_259 */
    node[61]->input.tensors[0] = node[60]->output.tensors[0];

    /* Conv_/dark4/dark4.1/cv3.1/conv/Conv_232 */
    node[62]->input.tensors[0] = node[61]->output.tensors[0];
    node[62]->input.tensors[1] = const_tensor[56]; /* data_weight */
    node[62]->input.tensors[2] = const_tensor[57]; /* data_bias */

    /* Sigmoid_/dark4/dark4.1/cv3.1/act/Sigmoid_233_Mul_/dark4/dark4.1/cv3.1/act/Mul_206 */
    node[63]->input.tensors[0] = node[62]->output.tensors[0];

    /* Conv_/dark4/dark4.1/cv3.2/conv/Conv_277 */
    node[64]->input.tensors[0] = node[63]->output.tensors[0];
    node[64]->input.tensors[1] = const_tensor[58]; /* data_weight */
    node[64]->input.tensors[2] = const_tensor[59]; /* data_bias */

    /* Sigmoid_/dark4/dark4.1/cv3.2/act/Sigmoid_258_Mul_/dark4/dark4.1/cv3.2/act/Mul_257 */
    node[65]->input.tensors[0] = node[64]->output.tensors[0];

    /* Conv_/dark4/dark4.1/cv3.3/conv/Conv_230 */
    node[66]->input.tensors[0] = node[65]->output.tensors[0];
    node[66]->input.tensors[1] = const_tensor[60]; /* data_weight */
    node[66]->input.tensors[2] = const_tensor[61]; /* data_bias */

    /* Sigmoid_/dark4/dark4.1/cv3.3/act/Sigmoid_231_Mul_/dark4/dark4.1/cv3.3/act/Mul_205 */
    node[67]->input.tensors[0] = node[66]->output.tensors[0];

    /* Concat_/dark4/dark4.1/Concat_183 */
    node[68]->input.tensors[0] = node[67]->output.tensors[0];
    node[68]->input.tensors[1] = node[63]->output.tensors[0];
    node[68]->input.tensors[2] = node[58]->output.tensors[0];
    node[68]->input.tensors[3] = node[59]->output.tensors[0];

    /* Conv_/dark4/dark4.1/cv4/conv/Conv_168 */
    node[69]->input.tensors[0] = node[68]->output.tensors[0];
    node[69]->input.tensors[1] = const_tensor[62]; /* data_weight */
    node[69]->input.tensors[2] = const_tensor[63]; /* data_bias */

    /* Sigmoid_/dark4/dark4.1/cv4/act/Sigmoid_167_Mul_/dark4/dark4.1/cv4/act/Mul_166 */
    node[70]->input.tensors[0] = node[69]->output.tensors[0];

    /* Conv_/conv_for_feat2/conv/Conv_152 */
    node[71]->input.tensors[0] = node[70]->output.tensors[0];
    node[71]->input.tensors[1] = const_tensor[64]; /* data_weight */
    node[71]->input.tensors[2] = const_tensor[65]; /* data_bias */

    /* MaxPool_/dark5/dark5.0/mp/m/MaxPool_251 */
    node[72]->input.tensors[0] = node[70]->output.tensors[0];

    /* Conv_/dark5/dark5.0/cv2/conv/Conv_288 */
    node[73]->input.tensors[0] = node[70]->output.tensors[0];
    node[73]->input.tensors[1] = const_tensor[66]; /* data_weight */
    node[73]->input.tensors[2] = const_tensor[67]; /* data_bias */

    /* Sigmoid_/conv_for_feat2/act/Sigmoid_153_Mul_/conv_for_feat2/act/Mul_130 */
    node[74]->input.tensors[0] = node[71]->output.tensors[0];

    /* Conv_/dark5/dark5.0/cv1/conv/Conv_249 */
    node[75]->input.tensors[0] = node[72]->output.tensors[0];
    node[75]->input.tensors[1] = const_tensor[68]; /* data_weight */
    node[75]->input.tensors[2] = const_tensor[69]; /* data_bias */

    /* Sigmoid_/dark5/dark5.0/cv2/act/Sigmoid_289_Mul_/dark5/dark5.0/cv2/act/Mul_272 */
    node[76]->input.tensors[0] = node[73]->output.tensors[0];

    /* Sigmoid_/dark5/dark5.0/cv1/act/Sigmoid_250_Mul_/dark5/dark5.0/cv1/act/Mul_221 */
    node[77]->input.tensors[0] = node[75]->output.tensors[0];

    /* Conv_/dark5/dark5.0/cv3/conv/Conv_271 */
    node[78]->input.tensors[0] = node[76]->output.tensors[0];
    node[78]->input.tensors[1] = const_tensor[70]; /* data_weight */
    node[78]->input.tensors[2] = const_tensor[71]; /* data_bias */

    /* Sigmoid_/dark5/dark5.0/cv3/act/Sigmoid_252_Mul_/dark5/dark5.0/cv3/act/Mul_248 */
    node[79]->input.tensors[0] = node[78]->output.tensors[0];

    /* Concat_/dark5/dark5.0/Concat_220 */
    node[80]->input.tensors[0] = node[79]->output.tensors[0];
    node[80]->input.tensors[1] = node[77]->output.tensors[0];

    /* Conv_/dark5/dark5.1/cv1/conv/Conv_195 */
    node[81]->input.tensors[0] = node[80]->output.tensors[0];
    node[81]->input.tensors[1] = const_tensor[72]; /* data_weight */
    node[81]->input.tensors[2] = const_tensor[73]; /* data_bias */

    /* Conv_/dark5/dark5.1/cv2/conv/Conv_218 */
    node[82]->input.tensors[0] = node[80]->output.tensors[0];
    node[82]->input.tensors[1] = const_tensor[74]; /* data_weight */
    node[82]->input.tensors[2] = const_tensor[75]; /* data_bias */

    /* Sigmoid_/dark5/dark5.1/cv1/act/Sigmoid_196_Mul_/dark5/dark5.1/cv1/act/Mul_177 */
    node[83]->input.tensors[0] = node[81]->output.tensors[0];

    /* Sigmoid_/dark5/dark5.1/cv2/act/Sigmoid_219_Mul_/dark5/dark5.1/cv2/act/Mul_194 */
    node[84]->input.tensors[0] = node[82]->output.tensors[0];

    /* Conv_/dark5/dark5.1/cv3.0/conv/Conv_246 */
    node[85]->input.tensors[0] = node[84]->output.tensors[0];
    node[85]->input.tensors[1] = const_tensor[76]; /* data_weight */
    node[85]->input.tensors[2] = const_tensor[77]; /* data_bias */

    /* Sigmoid_/dark5/dark5.1/cv3.0/act/Sigmoid_245_Mul_/dark5/dark5.1/cv3.0/act/Mul_244 */
    node[86]->input.tensors[0] = node[85]->output.tensors[0];

    /* Conv_/dark5/dark5.1/cv3.1/conv/Conv_216 */
    node[87]->input.tensors[0] = node[86]->output.tensors[0];
    node[87]->input.tensors[1] = const_tensor[78]; /* data_weight */
    node[87]->input.tensors[2] = const_tensor[79]; /* data_bias */

    /* Sigmoid_/dark5/dark5.1/cv3.1/act/Sigmoid_217_Mul_/dark5/dark5.1/cv3.1/act/Mul_193 */
    node[88]->input.tensors[0] = node[87]->output.tensors[0];

    /* Conv_/dark5/dark5.1/cv3.2/conv/Conv_247 */
    node[89]->input.tensors[0] = node[88]->output.tensors[0];
    node[89]->input.tensors[1] = const_tensor[80]; /* data_weight */
    node[89]->input.tensors[2] = const_tensor[81]; /* data_bias */

    /* Sigmoid_/dark5/dark5.1/cv3.2/act/Sigmoid_243_Mul_/dark5/dark5.1/cv3.2/act/Mul_242 */
    node[90]->input.tensors[0] = node[89]->output.tensors[0];

    /* Conv_/dark5/dark5.1/cv3.3/conv/Conv_214 */
    node[91]->input.tensors[0] = node[90]->output.tensors[0];
    node[91]->input.tensors[1] = const_tensor[82]; /* data_weight */
    node[91]->input.tensors[2] = const_tensor[83]; /* data_bias */

    /* Sigmoid_/dark5/dark5.1/cv3.3/act/Sigmoid_215_Mul_/dark5/dark5.1/cv3.3/act/Mul_192 */
    node[92]->input.tensors[0] = node[91]->output.tensors[0];

    /* Concat_/dark5/dark5.1/Concat_176 */
    node[93]->input.tensors[0] = node[92]->output.tensors[0];
    node[93]->input.tensors[1] = node[88]->output.tensors[0];
    node[93]->input.tensors[2] = node[84]->output.tensors[0];
    node[93]->input.tensors[3] = node[83]->output.tensors[0];

    /* Conv_/dark5/dark5.1/cv4/conv/Conv_162 */
    node[94]->input.tensors[0] = node[93]->output.tensors[0];
    node[94]->input.tensors[1] = const_tensor[84]; /* data_weight */
    node[94]->input.tensors[2] = const_tensor[85]; /* data_bias */

    /* Sigmoid_/dark5/dark5.1/cv4/act/Sigmoid_163_Mul_/dark5/dark5.1/cv4/act/Mul_140 */
    node[95]->input.tensors[0] = node[94]->output.tensors[0];

    /* AveragePool_/coordstt5/avg_pool_y/AveragePool_292 */
    node[96]->input.tensors[0] = node[95]->output.tensors[0];

    /* AveragePool_/coordstt5/avg_pool_x/AveragePool_298 */
    node[97]->input.tensors[0] = node[95]->output.tensors[0];

    /* Concat_/coordstt5/Concat_291_acuity_mark_perm_50 */
    node[98]->input.tensors[0] = node[97]->output.tensors[0];

    /* Concat_/coordstt5/Concat_291 */
    node[99]->input.tensors[0] = node[98]->output.tensors[0];
    node[99]->input.tensors[1] = node[96]->output.tensors[0];

    /* Conv_/coordstt5/conv_1x1/Conv_287 */
    node[100]->input.tensors[0] = node[99]->output.tensors[0];
    node[100]->input.tensors[1] = const_tensor[86]; /* data_weight */
    node[100]->input.tensors[2] = const_tensor[87]; /* data_bias */

    /* Relu_/coordstt5/relu/Relu_270 */
    node[101]->input.tensors[0] = node[100]->output.tensors[0];

    /* Split_/coordstt5/Split_269 */
    node[102]->input.tensors[0] = node[101]->output.tensors[0];

    /* Conv_/coordstt5/F_h/Conv_241_acuity_mark_perm_48 */
    node[103]->input.tensors[0] = node[102]->output.tensors[0];

    /* Conv_/coordstt5/F_w/Conv_213 */
    node[104]->input.tensors[0] = node[102]->output.tensors[1];
    node[104]->input.tensors[1] = const_tensor[88]; /* data_weight */
    node[104]->input.tensors[2] = const_tensor[89]; /* data_bias */

    /* Conv_/coordstt5/F_h/Conv_241 */
    node[105]->input.tensors[0] = node[103]->output.tensors[0];
    node[105]->input.tensors[1] = const_tensor[90]; /* data_weight */
    node[105]->input.tensors[2] = const_tensor[91]; /* data_bias */

    /* Sigmoid_/coordstt5/sigmoid_w/Sigmoid_191 */
    node[106]->input.tensors[0] = node[104]->output.tensors[0];

    /* Sigmoid_/coordstt5/sigmoid_h/Sigmoid_212 */
    node[107]->input.tensors[0] = node[105]->output.tensors[0];

    /* Mul_/coordstt5/Mul_174 */
    node[108]->input.tensors[0] = node[95]->output.tensors[0];
    node[108]->input.tensors[1] = node[107]->output.tensors[0];

    /* Mul_/coordstt5/Mul_1_161 */
    node[109]->input.tensors[0] = node[108]->output.tensors[0];
    node[109]->input.tensors[1] = node[106]->output.tensors[0];

    /* Mul_/Mul_139 */
    node[110]->input.tensors[0] = node[109]->output.tensors[0];
    node[110]->input.tensors[1] = node[95]->output.tensors[0];

    /* Conv_/conv/Conv_120 */
    node[111]->input.tensors[0] = node[110]->output.tensors[0];
    node[111]->input.tensors[1] = const_tensor[92]; /* data_weight */
    node[111]->input.tensors[2] = const_tensor[93]; /* data_bias */

    /* Conv_/sppcspc/cv2/conv/Conv_88 */
    node[112]->input.tensors[0] = node[111]->output.tensors[0];
    node[112]->input.tensors[1] = const_tensor[94]; /* data_weight */
    node[112]->input.tensors[2] = const_tensor[95]; /* data_bias */

    /* Conv_/sppcspc/cv1/conv/Conv_285 */
    node[113]->input.tensors[0] = node[111]->output.tensors[0];
    node[113]->input.tensors[1] = const_tensor[96]; /* data_weight */
    node[113]->input.tensors[2] = const_tensor[97]; /* data_bias */

    /* Sigmoid_/sppcspc/cv2/act/Sigmoid_87_Mul_/sppcspc/cv2/act/Mul_86 */
    node[114]->input.tensors[0] = node[112]->output.tensors[0];

    /* Sigmoid_/sppcspc/cv1/act/Sigmoid_267_Mul_/sppcspc/cv1/act/Mul_266 */
    node[115]->input.tensors[0] = node[113]->output.tensors[0];

    /* Conv_/sppcspc/cv3/conv/Conv_239 */
    node[116]->input.tensors[0] = node[115]->output.tensors[0];
    node[116]->input.tensors[1] = const_tensor[98]; /* data_weight */
    node[116]->input.tensors[2] = const_tensor[99]; /* data_bias */

    /* Sigmoid_/sppcspc/cv3/act/Sigmoid_240_Mul_/sppcspc/cv3/act/Mul_211 */
    node[117]->input.tensors[0] = node[116]->output.tensors[0];

    /* Conv_/sppcspc/cv4/conv/Conv_189 */
    node[118]->input.tensors[0] = node[117]->output.tensors[0];
    node[118]->input.tensors[1] = const_tensor[100]; /* data_weight */
    node[118]->input.tensors[2] = const_tensor[101]; /* data_bias */

    /* Sigmoid_/sppcspc/cv4/act/Sigmoid_188_Mul_/sppcspc/cv4/act/Mul_185 */
    node[119]->input.tensors[0] = node[118]->output.tensors[0];

    /* MaxPool_/sppcspc/m.2/MaxPool_173 */
    node[120]->input.tensors[0] = node[119]->output.tensors[0];

    /* MaxPool_/sppcspc/m.0/MaxPool_186 */
    node[121]->input.tensors[0] = node[119]->output.tensors[0];

    /* MaxPool_/sppcspc/m.1/MaxPool_187 */
    node[122]->input.tensors[0] = node[119]->output.tensors[0];

    /* Concat_/sppcspc/Concat_172 */
    node[123]->input.tensors[0] = node[119]->output.tensors[0];
    node[123]->input.tensors[1] = node[121]->output.tensors[0];
    node[123]->input.tensors[2] = node[122]->output.tensors[0];
    node[123]->input.tensors[3] = node[120]->output.tensors[0];

    /* Conv_/sppcspc/cv5/conv/Conv_159 */
    node[124]->input.tensors[0] = node[123]->output.tensors[0];
    node[124]->input.tensors[1] = const_tensor[102]; /* data_weight */
    node[124]->input.tensors[2] = const_tensor[103]; /* data_bias */

    /* Sigmoid_/sppcspc/cv5/act/Sigmoid_160_Mul_/sppcspc/cv5/act/Mul_138 */
    node[125]->input.tensors[0] = node[124]->output.tensors[0];

    /* Conv_/sppcspc/cv6/conv/Conv_137 */
    node[126]->input.tensors[0] = node[125]->output.tensors[0];
    node[126]->input.tensors[1] = const_tensor[104]; /* data_weight */
    node[126]->input.tensors[2] = const_tensor[105]; /* data_bias */

    /* Sigmoid_/sppcspc/cv6/act/Sigmoid_119_Mul_/sppcspc/cv6/act/Mul_118 */
    node[127]->input.tensors[0] = node[126]->output.tensors[0];

    /* Concat_/sppcspc/Concat_1_85 */
    node[128]->input.tensors[0] = node[127]->output.tensors[0];
    node[128]->input.tensors[1] = node[114]->output.tensors[0];

    /* Conv_/sppcspc/cv7/conv/Conv_84 */
    node[129]->input.tensors[0] = node[128]->output.tensors[0];
    node[129]->input.tensors[1] = const_tensor[106]; /* data_weight */
    node[129]->input.tensors[2] = const_tensor[107]; /* data_bias */

    /* Sigmoid_/sppcspc/cv7/act/Sigmoid_83_Mul_/sppcspc/cv7/act/Mul_82 */
    node[130]->input.tensors[0] = node[129]->output.tensors[0];

    /* GlobalAveragePool_/se/avg_pool/GlobalAveragePool_265 */
    node[131]->input.tensors[0] = node[130]->output.tensors[0];

    /* Reshape_/se/Reshape_238 */
    node[132]->input.tensors[0] = node[131]->output.tensors[0];

    /* MatMul_/se/fc/fc.0/MatMul_210 */
    node[133]->input.tensors[0] = node[132]->output.tensors[0];
    node[133]->input.tensors[1] = const_tensor[108]; /* data_weight */
    node[133]->input.tensors[2] = const_tensor[109]; /* data_bias */

    /* Relu_/se/fc/fc.1/Relu_209 */
    node[134]->input.tensors[0] = node[133]->output.tensors[0];

    /* MatMul_/se/fc/fc.2/MatMul_184 */
    node[135]->input.tensors[0] = node[134]->output.tensors[0];
    node[135]->input.tensors[1] = const_tensor[110]; /* data_weight */
    node[135]->input.tensors[2] = const_tensor[111]; /* data_bias */

    /* Sigmoid_/se/fc/fc.3/Sigmoid_171 */
    node[136]->input.tensors[0] = node[135]->output.tensors[0];

    /* Reshape_/se/Reshape_1_170 */
    node[137]->input.tensors[0] = node[136]->output.tensors[0];

    /* Mul_/se/Mul_155 */
    node[138]->input.tensors[0] = node[130]->output.tensors[0];
    node[138]->input.tensors[1] = node[137]->output.tensors[0];

    /* Mul_/Mul_1_154 */
    node[139]->input.tensors[0] = node[138]->output.tensors[0];
    node[139]->input.tensors[1] = node[130]->output.tensors[0];

    /* Conv_/conv_for_P5/conv/Conv_131 */
    node[140]->input.tensors[0] = node[139]->output.tensors[0];
    node[140]->input.tensors[1] = const_tensor[112]; /* data_weight */
    node[140]->input.tensors[2] = const_tensor[113]; /* data_bias */

    /* Sigmoid_/conv_for_P5/act/Sigmoid_132_Mul_/conv_for_P5/act/Mul_114 */
    node[141]->input.tensors[0] = node[140]->output.tensors[0];

    /* Resize_/upsample/Resize_113 */
    node[142]->input.tensors[0] = node[141]->output.tensors[0];

    /* Concat_/Concat_112 */
    node[143]->input.tensors[0] = node[74]->output.tensors[0];
    node[143]->input.tensors[1] = node[142]->output.tensors[0];

    /* Conv_/conv3_for_upsample1/cv1/conv/Conv_100 */
    node[144]->input.tensors[0] = node[143]->output.tensors[0];
    node[144]->input.tensors[1] = const_tensor[114]; /* data_weight */
    node[144]->input.tensors[2] = const_tensor[115]; /* data_bias */

    /* Conv_/conv3_for_upsample1/cv2/conv/Conv_150 */
    node[145]->input.tensors[0] = node[143]->output.tensors[0];
    node[145]->input.tensors[1] = const_tensor[116]; /* data_weight */
    node[145]->input.tensors[2] = const_tensor[117]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample1/cv1/act/Sigmoid_99_Mul_/conv3_for_upsample1/cv1/act/Mul_98 */
    node[146]->input.tensors[0] = node[144]->output.tensors[0];

    /* Sigmoid_/conv3_for_upsample1/cv2/act/Sigmoid_129_Mul_/conv3_for_upsample1/cv2/act/Mul_128 */
    node[147]->input.tensors[0] = node[145]->output.tensors[0];

    /* Conv_/conv3_for_upsample1/cv3.0/conv/Conv_148 */
    node[148]->input.tensors[0] = node[147]->output.tensors[0];
    node[148]->input.tensors[1] = const_tensor[118]; /* data_weight */
    node[148]->input.tensors[2] = const_tensor[119]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample1/cv3.0/act/Sigmoid_149_Mul_/conv3_for_upsample1/cv3.0/act/Mul_127 */
    node[149]->input.tensors[0] = node[148]->output.tensors[0];

    /* Conv_/conv3_for_upsample1/cv3.1/conv/Conv_146 */
    node[150]->input.tensors[0] = node[149]->output.tensors[0];
    node[150]->input.tensors[1] = const_tensor[120]; /* data_weight */
    node[150]->input.tensors[2] = const_tensor[121]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample1/cv3.1/act/Sigmoid_147_Mul_/conv3_for_upsample1/cv3.1/act/Mul_126 */
    node[151]->input.tensors[0] = node[150]->output.tensors[0];

    /* Conv_/conv3_for_upsample1/cv3.2/conv/Conv_144 */
    node[152]->input.tensors[0] = node[151]->output.tensors[0];
    node[152]->input.tensors[1] = const_tensor[122]; /* data_weight */
    node[152]->input.tensors[2] = const_tensor[123]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample1/cv3.2/act/Sigmoid_145_Mul_/conv3_for_upsample1/cv3.2/act/Mul_125 */
    node[153]->input.tensors[0] = node[152]->output.tensors[0];

    /* Conv_/conv3_for_upsample1/cv3.3/conv/Conv_142 */
    node[154]->input.tensors[0] = node[153]->output.tensors[0];
    node[154]->input.tensors[1] = const_tensor[124]; /* data_weight */
    node[154]->input.tensors[2] = const_tensor[125]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample1/cv3.3/act/Sigmoid_143_Mul_/conv3_for_upsample1/cv3.3/act/Mul_124 */
    node[155]->input.tensors[0] = node[154]->output.tensors[0];

    /* Concat_/conv3_for_upsample1/Concat_97 */
    node[156]->input.tensors[0] = node[155]->output.tensors[0];
    node[156]->input.tensors[1] = node[153]->output.tensors[0];
    node[156]->input.tensors[2] = node[151]->output.tensors[0];
    node[156]->input.tensors[3] = node[149]->output.tensors[0];
    node[156]->input.tensors[4] = node[147]->output.tensors[0];
    node[156]->input.tensors[5] = node[146]->output.tensors[0];

    /* Conv_/conv3_for_upsample1/cv4/conv/Conv_96 */
    node[157]->input.tensors[0] = node[156]->output.tensors[0];
    node[157]->input.tensors[1] = const_tensor[126]; /* data_weight */
    node[157]->input.tensors[2] = const_tensor[127]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample1/cv4/act/Sigmoid_95_Mul_/conv3_for_upsample1/cv4/act/Mul_94 */
    node[158]->input.tensors[0] = node[157]->output.tensors[0];

    /* Conv_/conv_for_P4/conv/Conv_93 */
    node[159]->input.tensors[0] = node[158]->output.tensors[0];
    node[159]->input.tensors[1] = const_tensor[128]; /* data_weight */
    node[159]->input.tensors[2] = const_tensor[129]; /* data_bias */

    /* Sigmoid_/conv_for_P4/act/Sigmoid_92_Mul_/conv_for_P4/act/Mul_91 */
    node[160]->input.tensors[0] = node[159]->output.tensors[0];

    /* Resize_/upsample_1/Resize_90 */
    node[161]->input.tensors[0] = node[160]->output.tensors[0];

    /* Concat_/Concat_1_89 */
    node[162]->input.tensors[0] = node[49]->output.tensors[0];
    node[162]->input.tensors[1] = node[161]->output.tensors[0];

    /* Conv_/conv3_for_upsample2/cv2/conv/Conv_53 */
    node[163]->input.tensors[0] = node[162]->output.tensors[0];
    node[163]->input.tensors[1] = const_tensor[130]; /* data_weight */
    node[163]->input.tensors[2] = const_tensor[131]; /* data_bias */

    /* Conv_/conv3_for_upsample2/cv1/conv/Conv_55 */
    node[164]->input.tensors[0] = node[162]->output.tensors[0];
    node[164]->input.tensors[1] = const_tensor[132]; /* data_weight */
    node[164]->input.tensors[2] = const_tensor[133]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample2/cv2/act/Sigmoid_54_Mul_/conv3_for_upsample2/cv2/act/Mul_31 */
    node[165]->input.tensors[0] = node[163]->output.tensors[0];

    /* Sigmoid_/conv3_for_upsample2/cv1/act/Sigmoid_56_Mul_/conv3_for_upsample2/cv1/act/Mul_32 */
    node[166]->input.tensors[0] = node[164]->output.tensors[0];

    /* Conv_/conv3_for_upsample2/cv3.0/conv/Conv_51 */
    node[167]->input.tensors[0] = node[165]->output.tensors[0];
    node[167]->input.tensors[1] = const_tensor[134]; /* data_weight */
    node[167]->input.tensors[2] = const_tensor[135]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample2/cv3.0/act/Sigmoid_52_Mul_/conv3_for_upsample2/cv3.0/act/Mul_30 */
    node[168]->input.tensors[0] = node[167]->output.tensors[0];

    /* Conv_/conv3_for_upsample2/cv3.1/conv/Conv_49 */
    node[169]->input.tensors[0] = node[168]->output.tensors[0];
    node[169]->input.tensors[1] = const_tensor[136]; /* data_weight */
    node[169]->input.tensors[2] = const_tensor[137]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample2/cv3.1/act/Sigmoid_50_Mul_/conv3_for_upsample2/cv3.1/act/Mul_29 */
    node[170]->input.tensors[0] = node[169]->output.tensors[0];

    /* Conv_/conv3_for_upsample2/cv3.2/conv/Conv_47 */
    node[171]->input.tensors[0] = node[170]->output.tensors[0];
    node[171]->input.tensors[1] = const_tensor[138]; /* data_weight */
    node[171]->input.tensors[2] = const_tensor[139]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample2/cv3.2/act/Sigmoid_48_Mul_/conv3_for_upsample2/cv3.2/act/Mul_28 */
    node[172]->input.tensors[0] = node[171]->output.tensors[0];

    /* Conv_/conv3_for_upsample2/cv3.3/conv/Conv_45 */
    node[173]->input.tensors[0] = node[172]->output.tensors[0];
    node[173]->input.tensors[1] = const_tensor[140]; /* data_weight */
    node[173]->input.tensors[2] = const_tensor[141]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample2/cv3.3/act/Sigmoid_46_Mul_/conv3_for_upsample2/cv3.3/act/Mul_27 */
    node[174]->input.tensors[0] = node[173]->output.tensors[0];

    /* Concat_/conv3_for_upsample2/Concat_22 */
    node[175]->input.tensors[0] = node[174]->output.tensors[0];
    node[175]->input.tensors[1] = node[172]->output.tensors[0];
    node[175]->input.tensors[2] = node[170]->output.tensors[0];
    node[175]->input.tensors[3] = node[168]->output.tensors[0];
    node[175]->input.tensors[4] = node[165]->output.tensors[0];
    node[175]->input.tensors[5] = node[166]->output.tensors[0];

    /* Conv_/conv3_for_upsample2/cv4/conv/Conv_21 */
    node[176]->input.tensors[0] = node[175]->output.tensors[0];
    node[176]->input.tensors[1] = const_tensor[142]; /* data_weight */
    node[176]->input.tensors[2] = const_tensor[143]; /* data_bias */

    /* Sigmoid_/conv3_for_upsample2/cv4/act/Sigmoid_16_Mul_/conv3_for_upsample2/cv4/act/Mul_15 */
    node[177]->input.tensors[0] = node[176]->output.tensors[0];

    /* Conv_/rep_conv_1/rbr_reparam/Conv_9 */
    node[178]->input.tensors[0] = node[177]->output.tensors[0];
    node[178]->input.tensors[1] = const_tensor[144]; /* data_weight */
    node[178]->input.tensors[2] = const_tensor[145]; /* data_bias */

    /* MaxPool_/down_sample1/mp/m/MaxPool_105 */
    node[179]->input.tensors[0] = node[177]->output.tensors[0];

    /* Conv_/down_sample1/cv2/conv/Conv_111 */
    node[180]->input.tensors[0] = node[177]->output.tensors[0];
    node[180]->input.tensors[1] = const_tensor[146]; /* data_weight */
    node[180]->input.tensors[2] = const_tensor[147]; /* data_bias */

    /* Sigmoid_/rep_conv_1/act/Sigmoid_10_Mul_/rep_conv_1/act/Mul_6 */
    node[181]->input.tensors[0] = node[178]->output.tensors[0];

    /* Conv_/down_sample1/cv1/conv/Conv_104 */
    node[182]->input.tensors[0] = node[179]->output.tensors[0];
    node[182]->input.tensors[1] = const_tensor[148]; /* data_weight */
    node[182]->input.tensors[2] = const_tensor[149]; /* data_bias */

    /* Sigmoid_/down_sample1/cv2/act/Sigmoid_110_Mul_/down_sample1/cv2/act/Mul_109 */
    node[183]->input.tensors[0] = node[180]->output.tensors[0];

    /* Conv_/yolo_head_P3/Conv_3 */
    node[184]->input.tensors[0] = node[181]->output.tensors[0];
    node[184]->input.tensors[1] = const_tensor[150]; /* data_weight */
    node[184]->input.tensors[2] = const_tensor[151]; /* data_bias */

    /* Sigmoid_/down_sample1/cv1/act/Sigmoid_103_Mul_/down_sample1/cv1/act/Mul_102 */
    node[185]->input.tensors[0] = node[182]->output.tensors[0];

    /* Conv_/down_sample1/cv3/conv/Conv_108 */
    node[186]->input.tensors[0] = node[183]->output.tensors[0];
    node[186]->input.tensors[1] = const_tensor[152]; /* data_weight */
    node[186]->input.tensors[2] = const_tensor[153]; /* data_bias */

    /* Sigmoid_/down_sample1/cv3/act/Sigmoid_107_Mul_/down_sample1/cv3/act/Mul_106 */
    node[187]->input.tensors[0] = node[186]->output.tensors[0];

    /* Concat_/Concat_2_101 */
    node[188]->input.tensors[0] = node[187]->output.tensors[0];
    node[188]->input.tensors[1] = node[185]->output.tensors[0];
    node[188]->input.tensors[2] = node[158]->output.tensors[0];

    /* Conv_/conv3_for_downsample1/cv2/conv/Conv_65 */
    node[189]->input.tensors[0] = node[188]->output.tensors[0];
    node[189]->input.tensors[1] = const_tensor[154]; /* data_weight */
    node[189]->input.tensors[2] = const_tensor[155]; /* data_bias */

    /* Conv_/conv3_for_downsample1/cv1/conv/Conv_67 */
    node[190]->input.tensors[0] = node[188]->output.tensors[0];
    node[190]->input.tensors[1] = const_tensor[156]; /* data_weight */
    node[190]->input.tensors[2] = const_tensor[157]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample1/cv2/act/Sigmoid_66_Mul_/conv3_for_downsample1/cv2/act/Mul_37 */
    node[191]->input.tensors[0] = node[189]->output.tensors[0];

    /* Sigmoid_/conv3_for_downsample1/cv1/act/Sigmoid_68_Mul_/conv3_for_downsample1/cv1/act/Mul_38 */
    node[192]->input.tensors[0] = node[190]->output.tensors[0];

    /* Conv_/conv3_for_downsample1/cv3.0/conv/Conv_63 */
    node[193]->input.tensors[0] = node[191]->output.tensors[0];
    node[193]->input.tensors[1] = const_tensor[158]; /* data_weight */
    node[193]->input.tensors[2] = const_tensor[159]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample1/cv3.0/act/Sigmoid_64_Mul_/conv3_for_downsample1/cv3.0/act/Mul_36 */
    node[194]->input.tensors[0] = node[193]->output.tensors[0];

    /* Conv_/conv3_for_downsample1/cv3.1/conv/Conv_61 */
    node[195]->input.tensors[0] = node[194]->output.tensors[0];
    node[195]->input.tensors[1] = const_tensor[160]; /* data_weight */
    node[195]->input.tensors[2] = const_tensor[161]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample1/cv3.1/act/Sigmoid_62_Mul_/conv3_for_downsample1/cv3.1/act/Mul_35 */
    node[196]->input.tensors[0] = node[195]->output.tensors[0];

    /* Conv_/conv3_for_downsample1/cv3.2/conv/Conv_59 */
    node[197]->input.tensors[0] = node[196]->output.tensors[0];
    node[197]->input.tensors[1] = const_tensor[162]; /* data_weight */
    node[197]->input.tensors[2] = const_tensor[163]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample1/cv3.2/act/Sigmoid_60_Mul_/conv3_for_downsample1/cv3.2/act/Mul_34 */
    node[198]->input.tensors[0] = node[197]->output.tensors[0];

    /* Conv_/conv3_for_downsample1/cv3.3/conv/Conv_57 */
    node[199]->input.tensors[0] = node[198]->output.tensors[0];
    node[199]->input.tensors[1] = const_tensor[164]; /* data_weight */
    node[199]->input.tensors[2] = const_tensor[165]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample1/cv3.3/act/Sigmoid_58_Mul_/conv3_for_downsample1/cv3.3/act/Mul_33 */
    node[200]->input.tensors[0] = node[199]->output.tensors[0];

    /* Concat_/conv3_for_downsample1/Concat_24 */
    node[201]->input.tensors[0] = node[200]->output.tensors[0];
    node[201]->input.tensors[1] = node[198]->output.tensors[0];
    node[201]->input.tensors[2] = node[196]->output.tensors[0];
    node[201]->input.tensors[3] = node[194]->output.tensors[0];
    node[201]->input.tensors[4] = node[191]->output.tensors[0];
    node[201]->input.tensors[5] = node[192]->output.tensors[0];

    /* Conv_/conv3_for_downsample1/cv4/conv/Conv_23 */
    node[202]->input.tensors[0] = node[201]->output.tensors[0];
    node[202]->input.tensors[1] = const_tensor[166]; /* data_weight */
    node[202]->input.tensors[2] = const_tensor[167]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample1/cv4/act/Sigmoid_18_Mul_/conv3_for_downsample1/cv4/act/Mul_17 */
    node[203]->input.tensors[0] = node[202]->output.tensors[0];

    /* Conv_/rep_conv_2/rbr_reparam/Conv_11 */
    node[204]->input.tensors[0] = node[203]->output.tensors[0];
    node[204]->input.tensors[1] = const_tensor[168]; /* data_weight */
    node[204]->input.tensors[2] = const_tensor[169]; /* data_bias */

    /* MaxPool_/down_sample2/mp/m/MaxPool_136 */
    node[205]->input.tensors[0] = node[203]->output.tensors[0];

    /* Conv_/down_sample2/cv2/conv/Conv_158 */
    node[206]->input.tensors[0] = node[203]->output.tensors[0];
    node[206]->input.tensors[1] = const_tensor[170]; /* data_weight */
    node[206]->input.tensors[2] = const_tensor[171]; /* data_bias */

    /* Sigmoid_/rep_conv_2/act/Sigmoid_12_Mul_/rep_conv_2/act/Mul_7 */
    node[207]->input.tensors[0] = node[204]->output.tensors[0];

    /* Conv_/down_sample2/cv1/conv/Conv_135 */
    node[208]->input.tensors[0] = node[205]->output.tensors[0];
    node[208]->input.tensors[1] = const_tensor[172]; /* data_weight */
    node[208]->input.tensors[2] = const_tensor[173]; /* data_bias */

    /* Sigmoid_/down_sample2/cv2/act/Sigmoid_157_Mul_/down_sample2/cv2/act/Mul_156 */
    node[209]->input.tensors[0] = node[206]->output.tensors[0];

    /* Conv_/yolo_head_P4/Conv_4 */
    node[210]->input.tensors[0] = node[207]->output.tensors[0];
    node[210]->input.tensors[1] = const_tensor[174]; /* data_weight */
    node[210]->input.tensors[2] = const_tensor[175]; /* data_bias */

    /* Sigmoid_/down_sample2/cv1/act/Sigmoid_117_Mul_/down_sample2/cv1/act/Mul_116 */
    node[211]->input.tensors[0] = node[208]->output.tensors[0];

    /* Conv_/down_sample2/cv3/conv/Conv_133 */
    node[212]->input.tensors[0] = node[209]->output.tensors[0];
    node[212]->input.tensors[1] = const_tensor[176]; /* data_weight */
    node[212]->input.tensors[2] = const_tensor[177]; /* data_bias */

    /* Sigmoid_/down_sample2/cv3/act/Sigmoid_134_Mul_/down_sample2/cv3/act/Mul_115 */
    node[213]->input.tensors[0] = node[212]->output.tensors[0];

    /* Concat_/Concat_3_81 */
    node[214]->input.tensors[0] = node[213]->output.tensors[0];
    node[214]->input.tensors[1] = node[211]->output.tensors[0];
    node[214]->input.tensors[2] = node[130]->output.tensors[0];

    /* Conv_/conv3_for_downsample2/cv2/conv/Conv_77 */
    node[215]->input.tensors[0] = node[214]->output.tensors[0];
    node[215]->input.tensors[1] = const_tensor[178]; /* data_weight */
    node[215]->input.tensors[2] = const_tensor[179]; /* data_bias */

    /* Conv_/conv3_for_downsample2/cv1/conv/Conv_79 */
    node[216]->input.tensors[0] = node[214]->output.tensors[0];
    node[216]->input.tensors[1] = const_tensor[180]; /* data_weight */
    node[216]->input.tensors[2] = const_tensor[181]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample2/cv2/act/Sigmoid_78_Mul_/conv3_for_downsample2/cv2/act/Mul_43 */
    node[217]->input.tensors[0] = node[215]->output.tensors[0];

    /* Sigmoid_/conv3_for_downsample2/cv1/act/Sigmoid_80_Mul_/conv3_for_downsample2/cv1/act/Mul_44 */
    node[218]->input.tensors[0] = node[216]->output.tensors[0];

    /* Conv_/conv3_for_downsample2/cv3.0/conv/Conv_75 */
    node[219]->input.tensors[0] = node[217]->output.tensors[0];
    node[219]->input.tensors[1] = const_tensor[182]; /* data_weight */
    node[219]->input.tensors[2] = const_tensor[183]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample2/cv3.0/act/Sigmoid_76_Mul_/conv3_for_downsample2/cv3.0/act/Mul_42 */
    node[220]->input.tensors[0] = node[219]->output.tensors[0];

    /* Conv_/conv3_for_downsample2/cv3.1/conv/Conv_73 */
    node[221]->input.tensors[0] = node[220]->output.tensors[0];
    node[221]->input.tensors[1] = const_tensor[184]; /* data_weight */
    node[221]->input.tensors[2] = const_tensor[185]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample2/cv3.1/act/Sigmoid_74_Mul_/conv3_for_downsample2/cv3.1/act/Mul_41 */
    node[222]->input.tensors[0] = node[221]->output.tensors[0];

    /* Conv_/conv3_for_downsample2/cv3.2/conv/Conv_71 */
    node[223]->input.tensors[0] = node[222]->output.tensors[0];
    node[223]->input.tensors[1] = const_tensor[186]; /* data_weight */
    node[223]->input.tensors[2] = const_tensor[187]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample2/cv3.2/act/Sigmoid_72_Mul_/conv3_for_downsample2/cv3.2/act/Mul_40 */
    node[224]->input.tensors[0] = node[223]->output.tensors[0];

    /* Conv_/conv3_for_downsample2/cv3.3/conv/Conv_69 */
    node[225]->input.tensors[0] = node[224]->output.tensors[0];
    node[225]->input.tensors[1] = const_tensor[188]; /* data_weight */
    node[225]->input.tensors[2] = const_tensor[189]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample2/cv3.3/act/Sigmoid_70_Mul_/conv3_for_downsample2/cv3.3/act/Mul_39 */
    node[226]->input.tensors[0] = node[225]->output.tensors[0];

    /* Concat_/conv3_for_downsample2/Concat_26 */
    node[227]->input.tensors[0] = node[226]->output.tensors[0];
    node[227]->input.tensors[1] = node[224]->output.tensors[0];
    node[227]->input.tensors[2] = node[222]->output.tensors[0];
    node[227]->input.tensors[3] = node[220]->output.tensors[0];
    node[227]->input.tensors[4] = node[217]->output.tensors[0];
    node[227]->input.tensors[5] = node[218]->output.tensors[0];

    /* Conv_/conv3_for_downsample2/cv4/conv/Conv_25 */
    node[228]->input.tensors[0] = node[227]->output.tensors[0];
    node[228]->input.tensors[1] = const_tensor[190]; /* data_weight */
    node[228]->input.tensors[2] = const_tensor[191]; /* data_bias */

    /* Sigmoid_/conv3_for_downsample2/cv4/act/Sigmoid_20_Mul_/conv3_for_downsample2/cv4/act/Mul_19 */
    node[229]->input.tensors[0] = node[228]->output.tensors[0];

    /* Conv_/rep_conv_3/rbr_reparam/Conv_13 */
    node[230]->input.tensors[0] = node[229]->output.tensors[0];
    node[230]->input.tensors[1] = const_tensor[192]; /* data_weight */
    node[230]->input.tensors[2] = const_tensor[193]; /* data_bias */

    /* Sigmoid_/rep_conv_3/act/Sigmoid_14_Mul_/rep_conv_3/act/Mul_8 */
    node[231]->input.tensors[0] = node[230]->output.tensors[0];

    /* Conv_/yolo_head_P5/Conv_5 */
    node[232]->input.tensors[0] = node[231]->output.tensors[0];
    node[232]->input.tensors[1] = const_tensor[194]; /* data_weight */
    node[232]->input.tensors[2] = const_tensor[195]; /* data_bias */


    }
    else
    {
    node[0]->output.tensors[0] = norm_tensor[0];
    node[0]->output.tensors[1] = norm_tensor[1];
    node[0]->output.tensors[2] = norm_tensor[2];
    node[0]->input.tensors[0] = norm_tensor[3];

    }
    graph->output.tensors[0] = norm_tensor[0];
    graph->output.tensors[1] = norm_tensor[1];
    graph->output.tensors[2] = norm_tensor[2];
    graph->input.tensors[0] = norm_tensor[3];


    if( enable_pre_post_process )
    {
        sort = TRUE;
        if( pre_process_map_count > 0 )
        {
            for( i = 0; i < pre_process_map_count; i++ )
            {
                status = vsi_nn_AddGraphPreProcess(graph, pre_process_map[i].graph_input_idx,
                                                   pre_process_map[i].preprocesses,
                                                   pre_process_map[i].preprocess_count);
                TEST_CHECK_STATUS( status, error );
            }
        }

        if( post_process_map_count > 0 )
        {
            for( i = 0; i < post_process_map_count; i++ )
            {
                 status = vsi_nn_AddGraphPostProcess(graph, post_process_map[i].graph_output_idx,
                                                     post_process_map[i].postprocesses,
                                                     post_process_map[i].postprocess_count);
                 TEST_CHECK_STATUS( status, error );
            }
        }
    }

    status = vsi_nn_SetupGraph( graph, sort );
    TEST_CHECK_STATUS( status, error );
//    vsi_nn_DumpGraphToJson( graph );

    if( VSI_FAILURE == status )
    {
        goto error;
    }

    fclose( fp );

    return graph;

error:
    if( NULL != fp )
    {
        fclose( fp );
    }

    release_ctx = ( NULL == in_ctx );
    vsi_nn_DumpGraphToJson( graph );
    vnn_ReleaseYolov3TinyUint8( graph, release_ctx );

    return NULL;
} /* vsi_nn_CreateYolov3TinyUint8() */


void vnn_ReleaseYolov3TinyUint8
    (
    vsi_nn_graph_t * graph,
    vsi_bool release_ctx
    )
{
    vsi_nn_context_t ctx;
    if( NULL != graph )
    {
        ctx = graph->ctx;
        vsi_nn_ReleaseGraph( &graph );

        /*-----------------------------------------
        Unregister client ops
        -----------------------------------------*/
        

        if( release_ctx )
        {
            vsi_nn_ReleaseContext( &ctx );
        }
    }
} /* vsi_nn_ReleaseYolov3TinyUint8() */

